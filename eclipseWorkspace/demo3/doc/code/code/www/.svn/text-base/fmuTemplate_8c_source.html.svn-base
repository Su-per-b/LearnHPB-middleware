<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Functional Mockup Interface For EnergyPlus: fmuTemplate.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.4 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Functional Mockup Interface For EnergyPlus</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('fmuTemplate_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">fmuTemplate.c</div>  </div>
</div>
<div class="contents">
<a href="fmuTemplate_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* ---------------------------------------------------------------------------*</span>
<a name="l00002"></a>00002 <span class="comment"> * Implementation of the FMU interface based on functions and macros to</span>
<a name="l00003"></a>00003 <span class="comment"> * be defined by the includer of this file.</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * Revision history</span>
<a name="l00006"></a>00006 <span class="comment"> *  07.02.2010 initial version released in FMU SDK 1.0</span>
<a name="l00007"></a>00007 <span class="comment"> *  05.03.2010 bug fix: fmiSetString now copies the passed string argument</span>
<a name="l00008"></a>00008 <span class="comment"> *     and fmiFreeModelInstance frees all string copies</span>
<a name="l00009"></a>00009 <span class="comment"> *  </span>
<a name="l00010"></a>00010 <span class="comment"> * (c) 2010 QTronic GmbH </span>
<a name="l00011"></a>00011 <span class="comment"> * ---------------------------------------------------------------------------*/</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="comment">// array of value references of states</span>
<a name="l00014"></a>00014 <span class="preprocessor">#if NUMBER_OF_REALS&gt;0</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vrStates[NUMBER_OF_STATES] = STATES; 
<a name="l00016"></a>00016 <span class="preprocessor">#endif</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span>
<a name="l00018"></a>00018 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00019"></a>00019 <span class="comment">// Private helpers used below to validate function arguments</span>
<a name="l00020"></a>00020 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00021"></a>00021 
<a name="l00022"></a><a class="code" href="fmuTemplate_8c.html#a120d2869e86428a8ef5a4478ac41e3e8">00022</a> <span class="keyword">static</span> <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="fmuTemplate_8c.html#a120d2869e86428a8ef5a4478ac41e3e8">invalidNumber</a>(<a class="code" href="structModelInstance.html">ModelInstance</a>* comp, <span class="keyword">const</span> <span class="keywordtype">char</span>* f, <span class="keyword">const</span> <span class="keywordtype">char</span>* arg, <span class="keywordtype">int</span> n, <span class="keywordtype">int</span> nExpected){
<a name="l00023"></a>00023     <span class="keywordflow">if</span> (n != nExpected) {
<a name="l00024"></a>00024         comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364a1ba29ce12cfc278cb5c7cbbce76e8b4e">modelError</a>;
<a name="l00025"></a>00025         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(comp, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00026"></a>00026                 <span class="stringliteral">&quot;%s: Invalid argument %s = %d. Expected %d.&quot;</span>, f, arg, n, nExpected);
<a name="l00027"></a>00027         <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>;
<a name="l00028"></a>00028     }
<a name="l00029"></a>00029     <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>;
<a name="l00030"></a>00030 }
<a name="l00031"></a>00031 
<a name="l00032"></a><a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">00032</a> <span class="keyword">static</span> <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(<a class="code" href="structModelInstance.html">ModelInstance</a>* comp, <span class="keyword">const</span> <span class="keywordtype">char</span>* f, <span class="keywordtype">int</span> statesExpected){
<a name="l00033"></a>00033     <span class="keywordflow">if</span> (!comp) 
<a name="l00034"></a>00034         <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>;
<a name="l00035"></a>00035     <span class="keywordflow">if</span> (!(comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> &amp; statesExpected)) {
<a name="l00036"></a>00036         comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364a1ba29ce12cfc278cb5c7cbbce76e8b4e">modelError</a>;
<a name="l00037"></a>00037         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(comp, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00038"></a>00038                 <span class="stringliteral">&quot;%s: Illegal call sequence.&quot;</span>, f);
<a name="l00039"></a>00039         <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>;
<a name="l00040"></a>00040     }
<a name="l00041"></a>00041     <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>;
<a name="l00042"></a>00042 }
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">00044</a> <span class="keyword">static</span> <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(<a class="code" href="structModelInstance.html">ModelInstance</a>* comp, <span class="keyword">const</span> <span class="keywordtype">char</span>* f, <span class="keyword">const</span> <span class="keywordtype">char</span>* arg, <span class="keyword">const</span> <span class="keywordtype">void</span>* p){
<a name="l00045"></a>00045     <span class="keywordflow">if</span> (!p) {
<a name="l00046"></a>00046         comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364a1ba29ce12cfc278cb5c7cbbce76e8b4e">modelError</a>;
<a name="l00047"></a>00047         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(comp, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00048"></a>00048                 <span class="stringliteral">&quot;%s: Invalid argument %s = NULL.&quot;</span>, f, arg);
<a name="l00049"></a>00049         <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>;
<a name="l00050"></a>00050     }
<a name="l00051"></a>00051     <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>;
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">00054</a> <span class="keyword">static</span> <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(<a class="code" href="structModelInstance.html">ModelInstance</a>* comp, <span class="keyword">const</span> <span class="keywordtype">char</span>* f, <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr, <span class="keywordtype">int</span> end) {
<a name="l00055"></a>00055     <span class="keywordflow">if</span> (vr &gt;= end) {
<a name="l00056"></a>00056         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(comp, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>,
<a name="l00057"></a>00057                 <span class="stringliteral">&quot;%s: Illegal value reference %u.&quot;</span>, f, vr);
<a name="l00058"></a>00058         comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00059"></a>00059         <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061     <span class="keywordflow">return</span> <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>;
<a name="l00062"></a>00062 }  
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00065"></a>00065 <span class="comment">// FMI functions: class methods not depending of a specific model instance</span>
<a name="l00066"></a>00066 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00067"></a>00067 <span class="comment">// Zuo: definition in model-ex V1.0</span>
<a name="l00068"></a>00068 <span class="comment">/*const char* fmiGetModelTypesPlatform() {  </span>
<a name="l00069"></a>00069 <span class="comment">    return fmiModelTypesPlatform;           </span>
<a name="l00070"></a>00070 <span class="comment">}*/</span>
<a name="l00071"></a>00071 <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00072"></a><a class="code" href="fmuTemplate_8c.html#adbac14b3a0aecb3ce76765f3d41fa058">00072</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="fmiFunctions_8h.html#a39814a13f12bd1b5704c3d2d7b6cda54">fmiGetTypesPlatform</a>() {         <span class="comment">// Zuo: Definition in V1.0</span>
<a name="l00073"></a>00073     <span class="keywordflow">return</span> <a class="code" href="include_2fmiModelTypes_8h.html#a3b064079b9fb492f0889827831dd1ce9">fmiTypesPlatform</a>;                <span class="comment">// Zuo: Definition in V1.0</span>
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="fmuTemplate_8c.html#a7520b0437962550ae1707fa40aeffdd3">00076</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="fmiFunctions_8h.html#acc5301d956aa30fd2b87293b4f52b32c">fmiGetVersion</a>() {
<a name="l00077"></a>00077     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a57949e837c006b501bcdecf2cd24206c">fmiVersion</a>;
<a name="l00078"></a>00078 }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00081"></a>00081 <span class="comment">// FMI functions: creation and destruction of a model instance</span>
<a name="l00082"></a>00082 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00083"></a>00083 <span class="comment">// Zuo: definition in model-ex V1.0</span>
<a name="l00084"></a>00084 <span class="comment">//fmiComponent fmiInstantiateModel(fmiString instanceName, fmiString GUID, </span>
<a name="l00085"></a>00085 <span class="comment">//        fmiCallbackFunctions functions, fmiBoolean loggingOn) {    </span>
<a name="l00086"></a>00086 <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00087"></a><a class="code" href="fmuTemplate_8c.html#a959158e44afd872fd82f374fd28af46b">00087</a> <a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> <a class="code" href="fmiFunctions_8h.html#a215d202ca5f53ed990efaeea7a36bd38">fmiInstantiateSlave</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> instanceName, <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> GUID, 
<a name="l00088"></a>00088         <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> fmuLocation, <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> mimeType, <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> timeout, 
<a name="l00089"></a>00089         <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> visible, <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> interactive,                 
<a name="l00090"></a>00090         <a class="code" href="structfmiCallbackFunctions.html">fmiCallbackFunctions</a> functions, <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> loggingOn) {             
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         printf(<span class="stringliteral">&quot;Start to instantiate model\n&quot;</span>);     
<a name="l00093"></a>00093     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp;
<a name="l00094"></a>00094         printf(<span class="stringliteral">&quot;Start to instantiate model\n&quot;</span>);
<a name="l00095"></a>00095     <span class="keywordflow">if</span> (!functions.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>) 
<a name="l00096"></a>00096         <span class="keywordflow">return</span> NULL;
<a name="l00097"></a>00097     <span class="keywordflow">if</span> (!functions.<a class="code" href="structfmiCallbackFunctions.html#a4eef008ee9b76ca12ef68ae30c55245a">allocateMemory</a> || !functions.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>){ 
<a name="l00098"></a>00098         functions.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00099"></a>00099                 <span class="comment">//&quot;fmiInstantiateModel: Missing callback function.&quot;);   // Zuo: model-ex</span>
<a name="l00100"></a>00100                 <span class="stringliteral">&quot;fmiInstantiateSlave: Missing callback function.&quot;</span>);     <span class="comment">// Zuo: co-sim</span>
<a name="l00101"></a>00101         <span class="keywordflow">return</span> NULL;
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103     <span class="keywordflow">if</span> (!instanceName || strlen(instanceName)==0) { 
<a name="l00104"></a>00104         functions.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00105"></a>00105                 <span class="comment">//&quot;fmiInstantiateModel: Missing instance name.&quot;);       // Zuo: model-ex</span>
<a name="l00106"></a>00106                 <span class="stringliteral">&quot;fmiInstantiateSlave: Missing instance name.&quot;</span>);         <span class="comment">// Zuo: co-sim</span>
<a name="l00107"></a>00107         <span class="keywordflow">return</span> NULL;
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109     <span class="keywordflow">if</span> (strcmp(GUID, MODEL_GUID)) {
<a name="l00110"></a>00110         functions.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00111"></a>00111                 <span class="comment">//&quot;fmiInstantiateModel: Wrong GUID %s. Expected %s.&quot;, GUID, MODEL_GUID);    // Zuo: model-ex</span>
<a name="l00112"></a>00112                 <span class="stringliteral">&quot;fmiInstantiateSlave: Wrong GUID %s. Expected %s.&quot;</span>, GUID, MODEL_GUID);      <span class="comment">// Zuo: co-sim</span>
<a name="l00113"></a>00113         <span class="keywordflow">return</span> NULL;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115     comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)functions.<a class="code" href="structfmiCallbackFunctions.html#a4eef008ee9b76ca12ef68ae30c55245a">allocateMemory</a>(1, <span class="keyword">sizeof</span>(<a class="code" href="structModelInstance.html">ModelInstance</a>));
<a name="l00116"></a>00116     <span class="keywordflow">if</span> (comp) {
<a name="l00117"></a>00117         comp-&gt;<a class="code" href="structModelInstance.html#a9de368a919b9f5786fbd9c2e1b8a6322">r</a> = calloc(NUMBER_OF_REALS,    <span class="keyword">sizeof</span>(<a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a>));
<a name="l00118"></a>00118         comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a> = calloc(NUMBER_OF_INTEGERS, <span class="keyword">sizeof</span>(<a class="code" href="common_2fmiModelTypes_8h.html#aa25f3f3cbdc012475221ef377f84958c">fmiInteger</a>));
<a name="l00119"></a>00119         comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a> = calloc(NUMBER_OF_BOOLEANS, <span class="keyword">sizeof</span>(<a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a>));
<a name="l00120"></a>00120         comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a> = calloc(NUMBER_OF_STRINGS,  <span class="keyword">sizeof</span>(<a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a>));
<a name="l00121"></a>00121         comp-&gt;<a class="code" href="structModelInstance.html#a796d4c0753f6be8be85fee943d56da60">isPositive</a> = calloc(NUMBER_OF_EVENT_INDICATORS, <span class="keyword">sizeof</span>(<a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a>));
<a name="l00122"></a>00122     }
<a name="l00123"></a>00123     <span class="keywordflow">if</span> (!comp || !comp-&gt;<a class="code" href="structModelInstance.html#a9de368a919b9f5786fbd9c2e1b8a6322">r</a> || !comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a> || !comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a> || !comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a> || !comp-&gt;<a class="code" href="structModelInstance.html#a796d4c0753f6be8be85fee943d56da60">isPositive</a>) {
<a name="l00124"></a>00124         functions.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, 
<a name="l00125"></a>00125                 <span class="comment">//&quot;fmiInstantiateModel: Out of memory.&quot;);   // Zuo: model-ex</span>
<a name="l00126"></a>00126                 <span class="stringliteral">&quot;fmiInstantiateSlave: Out of memory.&quot;</span>);     <span class="comment">// Zuo: co-sim</span>
<a name="l00127"></a>00127         <span class="keywordflow">return</span> NULL;
<a name="l00128"></a>00128     }
<a name="l00129"></a>00129     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00130"></a>00130             <span class="comment">//&quot;fmiInstantiateModel: GUID=%s&quot;, GUID);    // Zuo: model-ex</span>
<a name="l00131"></a>00131             <span class="stringliteral">&quot;fmiInstantiateSlave: GUID=%s&quot;</span>, GUID);      <span class="comment">// Zuo: co-sim</span>
<a name="l00132"></a>00132     comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a> = instanceName;
<a name="l00133"></a>00133     comp-&gt;<a class="code" href="structModelInstance.html#aacde52474972aabd4c37bf689d6483e1">GUID</a> = GUID;
<a name="l00134"></a>00134     comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a> = functions;
<a name="l00135"></a>00135     comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a> = loggingOn;
<a name="l00136"></a>00136     comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>;
<a name="l00137"></a>00137     setStartValues(comp); <span class="comment">// to be implemented by the includer of this file</span>
<a name="l00138"></a>00138     <span class="keywordflow">return</span> comp;
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a><a class="code" href="fmuTemplate_8c.html#ad492973b8304813c3310d642287d5cc7">00141</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a9f439d81a34969bed87c45753c9fa253">fmiSetDebugLogging</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> loggingOn) {
<a name="l00142"></a>00142     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00143"></a>00143     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiSetDebugLogging&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00144"></a>00144          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00145"></a>00145     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00146"></a>00146             <span class="stringliteral">&quot;fmiSetDebugLogging: loggingOn=%d&quot;</span>, loggingOn);
<a name="l00147"></a>00147     comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a> = loggingOn;
<a name="l00148"></a>00148     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 <span class="comment">//void fmiFreeModelInstance(fmiComponent c) {       // Zuo: definition in model-ex V1.0</span>
<a name="l00152"></a><a class="code" href="fmuTemplate_8c.html#a7ff86da45f3113f039d52367bfe3e143">00152</a> <span class="keywordtype">void</span> <a class="code" href="fmiFunctions_8h.html#ab0f9422e985821f7e6af28de2a78743f">fmiFreeSlaveInstance</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c) {         <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00153"></a>00153     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00154"></a>00154     <span class="keywordflow">if</span> (!comp) <span class="keywordflow">return</span>;
<a name="l00155"></a>00155     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00156"></a>00156             <span class="comment">//&quot;fmiFreeModelInstance&quot;);              // Zuo: model-ex</span>
<a name="l00157"></a>00157             <span class="stringliteral">&quot;fmiFreeSlaveInstance&quot;</span>);                <span class="comment">// Zuo: co-sim</span>
<a name="l00158"></a>00158     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a9de368a919b9f5786fbd9c2e1b8a6322">r</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp-&gt;<a class="code" href="structModelInstance.html#a9de368a919b9f5786fbd9c2e1b8a6322">r</a>);
<a name="l00159"></a>00159     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a>);
<a name="l00160"></a>00160     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a>);
<a name="l00161"></a>00161     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>) {
<a name="l00162"></a>00162         <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00163"></a>00163         <span class="keywordflow">for</span> (i=0; i&lt;NUMBER_OF_STRINGS; i++){
<a name="l00164"></a>00164             <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[i]) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[i]);
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>);
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168     comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(comp);
<a name="l00169"></a>00169 }
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00172"></a>00172 <span class="comment">// FMI functions: set variable values in the FMU</span>
<a name="l00173"></a>00173 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="fmuTemplate_8c.html#a02c1eb6f68b93b2407c0dc511931303e">00175</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a4e4f711711f0bd10a9a05272118f90d9">fmiSetReal</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]){
<a name="l00176"></a>00176     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00177"></a>00177     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00178"></a>00178     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiSetReal&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>|<a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364ac23beafef5933400a358371c8da20c49">modelInitialized</a>))
<a name="l00179"></a>00179          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00180"></a>00180     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetReal&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00181"></a>00181          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00182"></a>00182     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetReal&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00183"></a>00183          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00184"></a>00184     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00185"></a>00185             <span class="stringliteral">&quot;fmiSetReal: nvr = %d&quot;</span>, nvr);
<a name="l00186"></a>00186     <span class="comment">// no check wether setting the value is allowed in the current state</span>
<a name="l00187"></a>00187     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00188"></a>00188        <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiSetReal&quot;</span>, vr[i], NUMBER_OF_REALS))
<a name="l00189"></a>00189            <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00190"></a>00190        <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00191"></a>00191             <span class="stringliteral">&quot;fmiSetReal: #r%d# = %.16g&quot;</span>, vr[i], value[i]);
<a name="l00192"></a>00192        comp-&gt;<a class="code" href="structModelInstance.html#a9de368a919b9f5786fbd9c2e1b8a6322">r</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]] = value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>];
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a><a class="code" href="fmuTemplate_8c.html#a130ad451417ee0999a8bab50a187f360">00197</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a31923222656f38ee8977bc402d3b56ad">fmiSetInteger</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#aa25f3f3cbdc012475221ef377f84958c">fmiInteger</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]){
<a name="l00198"></a>00198     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00199"></a>00199     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00200"></a>00200     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiSetInteger&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>|<a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364ac23beafef5933400a358371c8da20c49">modelInitialized</a>))
<a name="l00201"></a>00201          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00202"></a>00202     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetInteger&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00203"></a>00203          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00204"></a>00204     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetInteger&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00205"></a>00205          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00206"></a>00206     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>)
<a name="l00207"></a>00207         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, <span class="stringliteral">&quot;fmiSetInteger: nvr = %d&quot;</span>,  nvr);
<a name="l00208"></a>00208     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00209"></a>00209        <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiSetInteger&quot;</span>, vr[i], NUMBER_OF_INTEGERS))
<a name="l00210"></a>00210            <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00211"></a>00211        <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00212"></a>00212             <span class="stringliteral">&quot;fmiSetInteger: #i%d# = %d&quot;</span>, vr[i], value[i]);
<a name="l00213"></a>00213         comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]] = value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]; 
<a name="l00214"></a>00214     }
<a name="l00215"></a>00215     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00216"></a>00216 }
<a name="l00217"></a>00217 
<a name="l00218"></a><a class="code" href="fmuTemplate_8c.html#a1663f963adc3a3132f0431fe04267a1f">00218</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a7242a4b8bf871f5fa4920de43ce9e5b9">fmiSetBoolean</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]){
<a name="l00219"></a>00219     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00220"></a>00220     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00221"></a>00221     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiSetBoolean&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>|<a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364ac23beafef5933400a358371c8da20c49">modelInitialized</a>))
<a name="l00222"></a>00222          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00223"></a>00223     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetBoolean&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00224"></a>00224          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00225"></a>00225     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetBoolean&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00226"></a>00226          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00227"></a>00227     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>)
<a name="l00228"></a>00228         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, <span class="stringliteral">&quot;fmiSetBoolean: nvr = %d&quot;</span>,  nvr);
<a name="l00229"></a>00229     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00230"></a>00230         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiSetBoolean&quot;</span>, vr[i], NUMBER_OF_BOOLEANS))
<a name="l00231"></a>00231             <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00232"></a>00232        <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00233"></a>00233             <span class="stringliteral">&quot;fmiSetBoolean: #b%d# = %s&quot;</span>, vr[i], value[i] ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>);
<a name="l00234"></a>00234         comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]] = value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]; 
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00237"></a>00237 }
<a name="l00238"></a>00238 
<a name="l00239"></a><a class="code" href="fmuTemplate_8c.html#aff854180d9df4a0b1d94cbd2b689f395">00239</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a99e2b9923ab7788c8e648655e8812a51">fmiSetString</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]){
<a name="l00240"></a>00240     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>, n;
<a name="l00241"></a>00241     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00242"></a>00242     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiSetString&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>|<a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364ac23beafef5933400a358371c8da20c49">modelInitialized</a>))
<a name="l00243"></a>00243          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00244"></a>00244     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetString&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00245"></a>00245          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00246"></a>00246     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetString&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00247"></a>00247          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00248"></a>00248     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>)
<a name="l00249"></a>00249         comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, <span class="stringliteral">&quot;fmiSetString: nvr = %d&quot;</span>,  nvr);
<a name="l00250"></a>00250     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00251"></a>00251         <span class="keywordtype">char</span>* <span class="keywordtype">string</span> = comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]];
<a name="l00252"></a>00252         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiSetString&quot;</span>, vr[i], NUMBER_OF_STRINGS))
<a name="l00253"></a>00253             <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00254"></a>00254         <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00255"></a>00255             <span class="stringliteral">&quot;fmiSetString: #s%d# = &#39;%s&#39;&quot;</span>, vr[i], value[i]);
<a name="l00256"></a>00256         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiSetString&quot;</span>, <span class="stringliteral">&quot;value[i]&quot;</span>, value[i]))
<a name="l00257"></a>00257             <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00258"></a>00258         <span class="keywordflow">if</span> (<span class="keywordtype">string</span>==NULL || strlen(<span class="keywordtype">string</span>) &lt; strlen(value[i])) {
<a name="l00259"></a>00259             <span class="keywordflow">if</span> (<span class="keywordtype">string</span>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a>(<span class="keywordtype">string</span>);
<a name="l00260"></a>00260             comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]] = comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#a4eef008ee9b76ca12ef68ae30c55245a">allocateMemory</a>(1+strlen(value[i]), <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>));
<a name="l00261"></a>00261             <span class="keywordflow">if</span> (!comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[vr[i]]) {
<a name="l00262"></a>00262                 comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364a1ba29ce12cfc278cb5c7cbbce76e8b4e">modelError</a>;
<a name="l00263"></a>00263                 comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(NULL, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>, <span class="stringliteral">&quot;error&quot;</span>, <span class="stringliteral">&quot;fmiSetString: Out of memory.&quot;</span>);
<a name="l00264"></a>00264                 <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00265"></a>00265             }
<a name="l00266"></a>00266         }
<a name="l00267"></a>00267         strcpy(comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[vr[i]], value[i]);
<a name="l00268"></a>00268     }
<a name="l00269"></a>00269     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00273"></a>00273 <span class="comment">/*fmiStatus fmiSetTime(fmiComponent c, fmiReal time) {                      </span>
<a name="l00274"></a>00274 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00275"></a>00275 <span class="comment">    if (invalidState(comp, &quot;fmiSetTime&quot;, modelInstantiated|modelInitialized))</span>
<a name="l00276"></a>00276 <span class="comment">         return fmiError;</span>
<a name="l00277"></a>00277 <span class="comment">    if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00278"></a>00278 <span class="comment">            &quot;fmiSetTime: time=%.16g&quot;, time);</span>
<a name="l00279"></a>00279 <span class="comment">    comp-&gt;time = time;</span>
<a name="l00280"></a>00280 <span class="comment">    return fmiOK;</span>
<a name="l00281"></a>00281 <span class="comment">}*/</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00284"></a>00284 <span class="comment">/*fmiStatus fmiSetContinuousStates(fmiComponent c, const fmiReal x[], size_t nx){       </span>
<a name="l00285"></a>00285 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00286"></a>00286 <span class="comment">    int i;</span>
<a name="l00287"></a>00287 <span class="comment">    if (invalidState(comp, &quot;fmiSetContinuousStates&quot;, modelInitialized))</span>
<a name="l00288"></a>00288 <span class="comment">         return fmiError;</span>
<a name="l00289"></a>00289 <span class="comment">    if (invalidNumber(comp, &quot;fmiSetContinuousStates&quot;, &quot;nx&quot;, nx, NUMBER_OF_STATES)) </span>
<a name="l00290"></a>00290 <span class="comment">        return fmiError;</span>
<a name="l00291"></a>00291 <span class="comment">    if (nullPointer(comp, &quot;fmiSetContinuousStates&quot;, &quot;x[]&quot;, x))</span>
<a name="l00292"></a>00292 <span class="comment">         return fmiError;</span>
<a name="l00293"></a>00293 <span class="comment">#if NUMBER_OF_REALS&gt;0</span>
<a name="l00294"></a>00294 <span class="comment">    for (i=0; i&lt;nx; i++) {</span>
<a name="l00295"></a>00295 <span class="comment">        fmiValueReference vr = vrStates[i];</span>
<a name="l00296"></a>00296 <span class="comment">        if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00297"></a>00297 <span class="comment">            &quot;fmiSetContinuousStates: #r%d#=%.16g&quot;, vr, x[i]);</span>
<a name="l00298"></a>00298 <span class="comment">        assert(vr&gt;=0 &amp;&amp; vr&lt;NUMBER_OF_REALS);</span>
<a name="l00299"></a>00299 <span class="comment">        comp-&gt;r[vr] = x[i];</span>
<a name="l00300"></a>00300 <span class="comment">    }</span>
<a name="l00301"></a>00301 <span class="comment">#endif</span>
<a name="l00302"></a>00302 <span class="comment">    return fmiOK;</span>
<a name="l00303"></a>00303 <span class="comment">}*/</span>
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="comment">// Zuo: the following function is modifed based on ITI&#39;s fmiDoStep in ITI_fmiCSFunctions.c</span>
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00311"></a>00311 <span class="comment">// FMI functions: get variable values from the FMU</span>
<a name="l00312"></a>00312 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00313"></a>00313 
<a name="l00314"></a><a class="code" href="fmuTemplate_8c.html#a55eb4ebd1879aaff36869d5f5751ee74">00314</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a8fdcaecef14c089a774ea8bf5307cd4d">fmiGetReal</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]) {
<a name="l00315"></a>00315     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00316"></a>00316     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00317"></a>00317     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiGetReal&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00318"></a>00318         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00319"></a>00319     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetReal&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00320"></a>00320          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00321"></a>00321     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetReal&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00322"></a>00322          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00323"></a>00323 <span class="preprocessor">#if NUMBER_OF_REALS&gt;0</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>    <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00325"></a>00325         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiGetReal&quot;</span>, vr[i], NUMBER_OF_REALS)) 
<a name="l00326"></a>00326             <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00327"></a>00327         value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>] = getReal(comp, vr[i]); <span class="comment">// to be implemented by the includer of this file</span>
<a name="l00328"></a>00328         <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00329"></a>00329                 <span class="stringliteral">&quot;fmiGetReal: #r%u# = %.16g&quot;</span>, vr[i], value[i]);
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 <span class="preprocessor">#endif</span>
<a name="l00332"></a>00332 <span class="preprocessor"></span>    <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00333"></a>00333 }
<a name="l00334"></a>00334 
<a name="l00335"></a><a class="code" href="fmuTemplate_8c.html#aab62c9a3c45e0e53d1b7a1078c1f511f">00335</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#ae0c3c64af78b9de0fd43e5936cf40bb4">fmiGetInteger</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <a class="code" href="common_2fmiModelTypes_8h.html#aa25f3f3cbdc012475221ef377f84958c">fmiInteger</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]) {
<a name="l00336"></a>00336     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00337"></a>00337     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00338"></a>00338     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiGetInteger&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00339"></a>00339         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00340"></a>00340     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetInteger&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00341"></a>00341          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00342"></a>00342     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetInteger&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00343"></a>00343          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00344"></a>00344     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00345"></a>00345         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiGetInteger&quot;</span>, vr[i], NUMBER_OF_INTEGERS))
<a name="l00346"></a>00346            <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00347"></a>00347         value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>] = comp-&gt;<a class="code" href="structModelInstance.html#a9152ed1aacfef33303b4f2c44a81e63c">i</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]];
<a name="l00348"></a>00348         <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00349"></a>00349                 <span class="stringliteral">&quot;fmiGetInteger: #i%u# = %d&quot;</span>, vr[i], value[i]);
<a name="l00350"></a>00350     }
<a name="l00351"></a>00351     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00352"></a>00352 }
<a name="l00353"></a>00353 
<a name="l00354"></a><a class="code" href="fmuTemplate_8c.html#a87a4cbfdd41b6f6f5f6560065e52f481">00354</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a07231b41cf8f6ce36ff21b44cbab7c43">fmiGetBoolean</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]) {
<a name="l00355"></a>00355     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00356"></a>00356     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00357"></a>00357     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiGetBoolean&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00358"></a>00358         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00359"></a>00359     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetBoolean&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00360"></a>00360          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00361"></a>00361     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetBoolean&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00362"></a>00362          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00363"></a>00363     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00364"></a>00364         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiGetBoolean&quot;</span>, vr[i], NUMBER_OF_BOOLEANS))
<a name="l00365"></a>00365            <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00366"></a>00366         value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>] = comp-&gt;<a class="code" href="structModelInstance.html#a2dd2e192ba81c1d6fcb1fd3a92818184">b</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]];
<a name="l00367"></a>00367         <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00368"></a>00368                 <span class="stringliteral">&quot;fmiGetBoolean: #b%u# = %s&quot;</span>, vr[i], value[i]? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>);
<a name="l00369"></a>00369     }
<a name="l00370"></a>00370     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00373"></a><a class="code" href="fmuTemplate_8c.html#ac8472ac9b6e8a797adf4322d42a77d77">00373</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#a8ba8eca671f4008f6f7751ce09096826">fmiGetString</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keyword">const</span> <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr[], <span class="keywordtype">size_t</span> nvr, <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a>  <a class="code" href="expat_8h.html#a4a30a13b813682e68c5b689b45c65971">value</a>[]) {
<a name="l00374"></a>00374     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00375"></a>00375     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00376"></a>00376     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiGetString&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00377"></a>00377         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00378"></a>00378     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetString&quot;</span>, <span class="stringliteral">&quot;vr[]&quot;</span>, vr))
<a name="l00379"></a>00379          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00380"></a>00380     <span class="keywordflow">if</span> (nvr&gt;0 &amp;&amp; <a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetString&quot;</span>, <span class="stringliteral">&quot;value[]&quot;</span>, value))
<a name="l00381"></a>00381          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00382"></a>00382     <span class="keywordflow">for</span> (i=0; i&lt;nvr; i++) {
<a name="l00383"></a>00383         <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a46c6996659cf451769409eff884953c3">vrOutOfRange</a>(comp, <span class="stringliteral">&quot;fmiGetString&quot;</span>, vr[i], NUMBER_OF_STRINGS))
<a name="l00384"></a>00384            <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00385"></a>00385         value[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>] = comp-&gt;<a class="code" href="structModelInstance.html#a2abf05349beff885fcc745431cb3aa1e">s</a>[vr[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]];
<a name="l00386"></a>00386         <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00387"></a>00387                 <span class="stringliteral">&quot;fmiGetString: #s%u# = &#39;%s&#39;&quot;</span>, vr[i], value[i]);
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00390"></a>00390 }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00393"></a>00393 <span class="comment">/*fmiStatus fmiGetStateValueReferences(fmiComponent c, fmiValueReference vrx[], size_t nx){</span>
<a name="l00394"></a>00394 <span class="comment">    int i;</span>
<a name="l00395"></a>00395 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00396"></a>00396 <span class="comment">    if (invalidState(comp, &quot;fmiGetStateValueReferences&quot;, not_modelError))</span>
<a name="l00397"></a>00397 <span class="comment">        return fmiError;</span>
<a name="l00398"></a>00398 <span class="comment">    if (invalidNumber(comp, &quot;fmiGetStateValueReferences&quot;, &quot;nx&quot;, nx, NUMBER_OF_STATES)) </span>
<a name="l00399"></a>00399 <span class="comment">        return fmiError;</span>
<a name="l00400"></a>00400 <span class="comment">    if (nullPointer(comp, &quot;fmiGetStateValueReferences&quot;, &quot;vrx[]&quot;, vrx))</span>
<a name="l00401"></a>00401 <span class="comment">         return fmiError;</span>
<a name="l00402"></a>00402 <span class="comment">#if NUMBER_OF_REALS&gt;0</span>
<a name="l00403"></a>00403 <span class="comment">    for (i=0; i&lt;nx; i++) {</span>
<a name="l00404"></a>00404 <span class="comment">        vrx[i] = vrStates[i];</span>
<a name="l00405"></a>00405 <span class="comment">        if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00406"></a>00406 <span class="comment">            &quot;fmiGetStateValueReferences: vrx[%d] = %d&quot;, i, vrx[i]);</span>
<a name="l00407"></a>00407 <span class="comment">    }</span>
<a name="l00408"></a>00408 <span class="comment">#endif </span>
<a name="l00409"></a>00409 <span class="comment">    return fmiOK;</span>
<a name="l00410"></a>00410 <span class="comment">}*/</span>
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00413"></a>00413 <span class="comment">/*fmiStatus fmiGetContinuousStates(fmiComponent c, fmiReal states[], size_t nx){</span>
<a name="l00414"></a>00414 <span class="comment">    int i;</span>
<a name="l00415"></a>00415 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00416"></a>00416 <span class="comment">    if (invalidState(comp, &quot;fmiGetContinuousStates&quot;, not_modelError))</span>
<a name="l00417"></a>00417 <span class="comment">        return fmiError;</span>
<a name="l00418"></a>00418 <span class="comment">    if (invalidNumber(comp, &quot;fmiGetContinuousStates&quot;, &quot;nx&quot;, nx, NUMBER_OF_STATES)) </span>
<a name="l00419"></a>00419 <span class="comment">        return fmiError;</span>
<a name="l00420"></a>00420 <span class="comment">    if (nullPointer(comp, &quot;fmiGetContinuousStates&quot;, &quot;states[]&quot;, states))</span>
<a name="l00421"></a>00421 <span class="comment">         return fmiError;</span>
<a name="l00422"></a>00422 <span class="comment">#if NUMBER_OF_REALS&gt;0</span>
<a name="l00423"></a>00423 <span class="comment">    for (i=0; i&lt;nx; i++) {</span>
<a name="l00424"></a>00424 <span class="comment">        fmiValueReference vr = vrStates[i];</span>
<a name="l00425"></a>00425 <span class="comment">        states[i] = getReal(comp, vr); // to be implemented by the includer of this file</span>
<a name="l00426"></a>00426 <span class="comment">        if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00427"></a>00427 <span class="comment">            &quot;fmiGetContinuousStates: #r%u# = %.16g&quot;, vr, states[i]);</span>
<a name="l00428"></a>00428 <span class="comment">    }</span>
<a name="l00429"></a>00429 <span class="comment">#endif</span>
<a name="l00430"></a>00430 <span class="comment">    return fmiOK;</span>
<a name="l00431"></a>00431 <span class="comment">}*/</span>
<a name="l00432"></a>00432 
<a name="l00433"></a><a class="code" href="fmuTemplate_8c.html#aa8a3222051aa59499f1c3c1af59a0a60">00433</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmuTemplate_8c.html#aa8a3222051aa59499f1c3c1af59a0a60">fmiGetNominalContinuousStates</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> x_nominal[], <span class="keywordtype">size_t</span> nx){
<a name="l00434"></a>00434     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00435"></a>00435     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00436"></a>00436     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiGetNominalContinuousStates&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a9e425bd7ab837ed20c4e4193ef441e8d">not_modelError</a>))
<a name="l00437"></a>00437         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00438"></a>00438     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a120d2869e86428a8ef5a4478ac41e3e8">invalidNumber</a>(comp, <span class="stringliteral">&quot;fmiGetNominalContinuousStates&quot;</span>, <span class="stringliteral">&quot;nx&quot;</span>, nx, NUMBER_OF_STATES)) 
<a name="l00439"></a>00439         <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00440"></a>00440     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#a8a8587b565abdc0f2f65846f5cd25df8">nullPointer</a>(comp, <span class="stringliteral">&quot;fmiGetNominalContinuousStates&quot;</span>, <span class="stringliteral">&quot;x_nominal[]&quot;</span>, x_nominal))
<a name="l00441"></a>00441          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00442"></a>00442     x_nominal[0] = 1;
<a name="l00443"></a>00443     <span class="keywordflow">if</span> (comp-&gt;<a class="code" href="structModelInstance.html#a7b4ddcf220cb3c987a59898225a85ad8">loggingOn</a>) comp-&gt;<a class="code" href="structModelInstance.html#a5cebbb0e0f16bf1940be66ca4553f0fc">functions</a>.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a>(c, comp-&gt;<a class="code" href="structModelInstance.html#a5f05df63d6e14a2d86927f845e7969f0">instanceName</a>, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>, <span class="stringliteral">&quot;log&quot;</span>, 
<a name="l00444"></a>00444         <span class="stringliteral">&quot;fmiGetNominalContinuousStates: x_nominal[0..%d] = 1.0&quot;</span>, nx-1);
<a name="l00445"></a>00445     <span class="keywordflow">for</span> (i=0; i&lt;nx; i++) 
<a name="l00446"></a>00446         x_nominal[i] = 1;
<a name="l00447"></a>00447     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00448"></a>00448 }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00451"></a>00451 <span class="comment">/*fmiStatus fmiGetDerivatives(fmiComponent c, fmiReal derivatives[], size_t nx) {</span>
<a name="l00452"></a>00452 <span class="comment">    int i;</span>
<a name="l00453"></a>00453 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00454"></a>00454 <span class="comment">    if (invalidState(comp, &quot;fmiGetDerivatives&quot;, not_modelError))</span>
<a name="l00455"></a>00455 <span class="comment">         return fmiError;</span>
<a name="l00456"></a>00456 <span class="comment">    if (invalidNumber(c, &quot;fmiGetDerivatives&quot;, &quot;nx&quot;, nx, NUMBER_OF_STATES)) </span>
<a name="l00457"></a>00457 <span class="comment">        return fmiError;</span>
<a name="l00458"></a>00458 <span class="comment">    if (nullPointer(comp, &quot;fmiGetDerivatives&quot;, &quot;derivatives[]&quot;, derivatives))</span>
<a name="l00459"></a>00459 <span class="comment">         return fmiError;</span>
<a name="l00460"></a>00460 <span class="comment">#if NUMBER_OF_STATES&gt;0</span>
<a name="l00461"></a>00461 <span class="comment">    for (i=0; i&lt;nx; i++) {</span>
<a name="l00462"></a>00462 <span class="comment">        fmiValueReference vr = vrStates[i] + 1;</span>
<a name="l00463"></a>00463 <span class="comment">        derivatives[i] = getReal(comp, vr); // to be implemented by the includer of this file</span>
<a name="l00464"></a>00464 <span class="comment">        if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00465"></a>00465 <span class="comment">            &quot;fmiGetDerivatives: #r%d# = %.16g&quot;, vr, derivatives[i]);</span>
<a name="l00466"></a>00466 <span class="comment">    }</span>
<a name="l00467"></a>00467 <span class="comment">#endif</span>
<a name="l00468"></a>00468 <span class="comment">    return fmiOK;</span>
<a name="l00469"></a>00469 <span class="comment">}*/</span>
<a name="l00470"></a>00470 
<a name="l00471"></a>00471 <span class="comment">// Zuo: not in co-sim 1.0</span>
<a name="l00472"></a>00472 <span class="comment">/*</span>
<a name="l00473"></a>00473 <span class="comment">fmiStatus fmiGetEventIndicators(fmiComponent c, fmiReal eventIndicators[], size_t ni) {</span>
<a name="l00474"></a>00474 <span class="comment">    int i;</span>
<a name="l00475"></a>00475 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00476"></a>00476 <span class="comment">    if (invalidState(comp, &quot;fmiGetEventIndicators&quot;, not_modelError))</span>
<a name="l00477"></a>00477 <span class="comment">        return fmiError;</span>
<a name="l00478"></a>00478 <span class="comment">    if (invalidNumber(comp, &quot;fmiGetEventIndicators&quot;, &quot;ni&quot;, ni, NUMBER_OF_EVENT_INDICATORS)) </span>
<a name="l00479"></a>00479 <span class="comment">        return fmiError;</span>
<a name="l00480"></a>00480 <span class="comment">#if NUMBER_OF_EVENT_INDICATORS&gt;0</span>
<a name="l00481"></a>00481 <span class="comment">    for (i=0; i&lt;ni; i++) {</span>
<a name="l00482"></a>00482 <span class="comment">        eventIndicators[i] = getEventIndicator(comp, i); // to be implemented by the includer of this file</span>
<a name="l00483"></a>00483 <span class="comment">        if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00484"></a>00484 <span class="comment">            &quot;fmiGetEventIndicators: z%d = %.16g&quot;, i, eventIndicators[i]);</span>
<a name="l00485"></a>00485 <span class="comment">    }</span>
<a name="l00486"></a>00486 <span class="comment">#endif</span>
<a name="l00487"></a>00487 <span class="comment">    return fmiOK;</span>
<a name="l00488"></a>00488 <span class="comment">}*/</span>
<a name="l00489"></a>00489 
<a name="l00490"></a>00490 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00491"></a>00491 <span class="comment">// FMI functions: initialization, event handling, stepping and termination</span>
<a name="l00492"></a>00492 <span class="comment">// ---------------------------------------------------------------------------</span>
<a name="l00493"></a>00493 
<a name="l00494"></a>00494 <span class="comment">//fmiStatus fmiInitialize(fmiComponent c, fmiBoolean toleranceControlled, fmiReal relativeTolerance,</span>
<a name="l00495"></a>00495 <span class="comment">//    fmiEventInfo* eventInfo) {                                                        // Zuo: definition in model-ex V1.0</span>
<a name="l00496"></a><a class="code" href="fmuTemplate_8c.html#a08592dffefecab187d9af9a65e6722f7">00496</a> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> <a class="code" href="fmiFunctions_8h.html#aca2217dcdb0ea4fd8fdfc5bc85cf318c">fmiInitializeSlave</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> tStart,
<a name="l00497"></a>00497                              <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> StopTimeDefined, <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> tStop) {               <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     <a class="code" href="structModelInstance.html">ModelInstance</a>* comp = (<a class="code" href="structModelInstance.html">ModelInstance</a> *)c;
<a name="l00500"></a>00500     <span class="keywordflow">if</span> (<a class="code" href="fmuTemplate_8c.html#ade876a35a21c9cfe2f60281fa2693aa3">invalidState</a>(comp, <span class="stringliteral">&quot;fmiInitializeSlave&quot;</span>, <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364adce5a4ff952b83f189d928064f67cca6">modelInstantiated</a>))
<a name="l00501"></a>00501          <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>;
<a name="l00502"></a>00502     <span class="comment">//if (nullPointer(comp, &quot;fmiInitialize&quot;, &quot;eventInfo&quot;, eventInfo))                               // Zuo: definition in model-ex V1.0</span>
<a name="l00503"></a>00503     <span class="comment">//     return fmiError;                                                                         // Zuo: Fixme need new funciton</span>
<a name="l00504"></a>00504     <span class="comment">//if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00505"></a>00505     <span class="comment">//    &quot;fmiInitialize: toleranceControlled=%d relativeTolerance=%g&quot;,     </span>
<a name="l00506"></a>00506     <span class="comment">//    toleranceControlled, relativeTolerance);                                                  // Zuo: Fixme need new funciton</span>
<a name="l00507"></a>00507     <span class="comment">//eventInfo-&gt;iterationConverged  = fmiTrue;</span>
<a name="l00508"></a>00508     <span class="comment">//eventInfo-&gt;stateValueReferencesChanged = fmiFalse;</span>
<a name="l00509"></a>00509     <span class="comment">//eventInfo-&gt;stateValuesChanged  = fmiFalse;</span>
<a name="l00510"></a>00510     <span class="comment">//eventInfo-&gt;terminateSimulation = fmiFalse;</span>
<a name="l00511"></a>00511     <span class="comment">//eventInfo-&gt;upcomingTimeEvent   = fmiFalse;</span>
<a name="l00512"></a>00512     <span class="comment">//initialize(comp, eventInfo);      // Zuo Fixme: to be implemented by the includer of this file</span>
<a name="l00513"></a>00513     comp-&gt;<a class="code" href="structModelInstance.html#a757a37a832c758af6491bc33f1516ce6">state</a> = <a class="code" href="fmuTemplate_8h.html#a0e4ccdc7d308bb270e3f7dbef7b9b364ac23beafef5933400a358371c8da20c49">modelInitialized</a>;
<a name="l00514"></a>00514     <span class="keywordflow">return</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>;
<a name="l00515"></a>00515 }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 <span class="comment">// Zuo: definition in model-ex V1.0 but not in co-sim V1.0 </span>
<a name="l00518"></a>00518 <span class="comment">/*fmiStatus fmiEventUpdate(fmiComponent c, fmiBoolean intermediateResults, fmiEventInfo* eventInfo) {</span>
<a name="l00519"></a>00519 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00520"></a>00520 <span class="comment">    if (invalidState(comp, &quot;fmiEventUpdate&quot;, modelInitialized))</span>
<a name="l00521"></a>00521 <span class="comment">        return fmiError;</span>
<a name="l00522"></a>00522 <span class="comment">    if (nullPointer(comp, &quot;fmiEventUpdate&quot;, &quot;eventInfo&quot;, eventInfo))</span>
<a name="l00523"></a>00523 <span class="comment">         return fmiError;</span>
<a name="l00524"></a>00524 <span class="comment">    if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00525"></a>00525 <span class="comment">        &quot;fmiEventUpdate: intermediateResults = %d&quot;, intermediateResults);</span>
<a name="l00526"></a>00526 <span class="comment">    eventInfo-&gt;iterationConverged  = fmiTrue;</span>
<a name="l00527"></a>00527 <span class="comment">    eventInfo-&gt;stateValueReferencesChanged = fmiFalse;</span>
<a name="l00528"></a>00528 <span class="comment">    eventInfo-&gt;stateValuesChanged  = fmiFalse;</span>
<a name="l00529"></a>00529 <span class="comment">    eventInfo-&gt;terminateSimulation = fmiFalse;</span>
<a name="l00530"></a>00530 <span class="comment">    eventInfo-&gt;upcomingTimeEvent   = fmiFalse;</span>
<a name="l00531"></a>00531 <span class="comment">    eventUpdate(comp, eventInfo); // to be implemented by the includer of this file</span>
<a name="l00532"></a>00532 <span class="comment">    return fmiOK;</span>
<a name="l00533"></a>00533 <span class="comment">}*/</span>
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="comment">// Zuo: definition in model-ex V1.0 but not in co-sim V1.0 </span>
<a name="l00536"></a>00536 <span class="comment">/*fmiStatus fmiCompletedIntegratorStep(fmiComponent c, fmiBoolean* callEventUpdate){</span>
<a name="l00537"></a>00537 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00538"></a>00538 <span class="comment">    if (invalidState(comp, &quot;fmiCompletedIntegratorStep&quot;, modelInitialized))</span>
<a name="l00539"></a>00539 <span class="comment">         return fmiError;</span>
<a name="l00540"></a>00540 <span class="comment">    if (nullPointer(comp, &quot;fmiCompletedIntegratorStep&quot;, &quot;callEventUpdate&quot;, callEventUpdate))</span>
<a name="l00541"></a>00541 <span class="comment">         return fmiError;</span>
<a name="l00542"></a>00542 <span class="comment">    if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00543"></a>00543 <span class="comment">            &quot;fmiCompletedIntegratorStep&quot;);</span>
<a name="l00544"></a>00544 <span class="comment">    *callEventUpdate = fmiFalse;</span>
<a name="l00545"></a>00545 <span class="comment">    return fmiOK;</span>
<a name="l00546"></a>00546 <span class="comment">}*/</span>
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 <span class="comment">// Zuo: not in co-sim V1.0</span>
<a name="l00549"></a>00549 <span class="comment">/*fmiStatus fmiTerminate(fmiComponent c){</span>
<a name="l00550"></a>00550 <span class="comment">    ModelInstance* comp = (ModelInstance *)c;</span>
<a name="l00551"></a>00551 <span class="comment">    if (invalidState(comp, &quot;fmiTerminate&quot;, modelInitialized))</span>
<a name="l00552"></a>00552 <span class="comment">         return fmiError;</span>
<a name="l00553"></a>00553 <span class="comment">    if (comp-&gt;loggingOn) comp-&gt;functions.logger(c, comp-&gt;instanceName, fmiOK, &quot;log&quot;, </span>
<a name="l00554"></a>00554 <span class="comment">        &quot;fmiTerminate&quot;);</span>
<a name="l00555"></a>00555 <span class="comment">    comp-&gt;state = modelTerminated;</span>
<a name="l00556"></a>00556 <span class="comment">    return fmiOK;</span>
<a name="l00557"></a>00557 <span class="comment">}*/</span>
<a name="l00558"></a>00558 
<a name="l00559"></a>00559 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="fmuTemplate_8c.html">fmuTemplate.c</a>      </li>
      <li class="footer">Generated on Thu Dec 22 2011 11:07:05 for Functional Mockup Interface For EnergyPlus by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.4 </li>
    </ul>
  </div>

</body>
</html>
