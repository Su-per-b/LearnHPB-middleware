<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Functional Mockup Interface For EnergyPlus: main.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Functional Mockup Interface For EnergyPlus</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('demo_2main_8c.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>demo/main.c</h1>  </div>
</div>
<div class="contents">
<a href="demo_2main_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* ------------------------------------------------------------------------- </span>
<a name="l00002"></a>00002 <span class="comment"> * main.c</span>
<a name="l00003"></a>00003 <span class="comment"> * Implements simulation of a single FMU instance using the forward Euler</span>
<a name="l00004"></a>00004 <span class="comment"> * method for numerical integration.</span>
<a name="l00005"></a>00005 <span class="comment"> * Command syntax: see printHelp()</span>
<a name="l00006"></a>00006 <span class="comment"> * Simulates the given FMU from t = 0 .. tEnd with fixed step size h and </span>
<a name="l00007"></a>00007 <span class="comment"> * writes the computed solution to file &#39;result.csv&#39;.</span>
<a name="l00008"></a>00008 <span class="comment"> * The CSV file (comma-separated values) may e.g. be plotted using </span>
<a name="l00009"></a>00009 <span class="comment"> * OpenOffice Calc or Microsoft Excel. </span>
<a name="l00010"></a>00010 <span class="comment"> * This progamm demonstrates basic use of an FMU.</span>
<a name="l00011"></a>00011 <span class="comment"> * Real applications may use advanced numerical solvers instead, means to </span>
<a name="l00012"></a>00012 <span class="comment"> * exactly locate state events in time, graphical plotting utilities, support </span>
<a name="l00013"></a>00013 <span class="comment"> * for coexecution of many FMUs, stepping and debug support, user control</span>
<a name="l00014"></a>00014 <span class="comment"> * of parameter and start values etc. </span>
<a name="l00015"></a>00015 <span class="comment"> * All this is missing here.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * Revision history</span>
<a name="l00018"></a>00018 <span class="comment"> *  07.02.2010 initial version released in FMU SDK 1.0</span>
<a name="l00019"></a>00019 <span class="comment"> *  05.03.2010 bug fix: removed strerror(GetLastError()) from error messages</span>
<a name="l00020"></a>00020 <span class="comment"> *     </span>
<a name="l00021"></a>00021 <span class="comment"> * Free libraries and tools used to implement this simulator:</span>
<a name="l00022"></a>00022 <span class="comment"> *  - eXpat 2.0.1 XML parser, see http://expat.sourceforge.net</span>
<a name="l00023"></a>00023 <span class="comment"> *  - 7z.exe 4.57 zip and unzip tool, see http://www.7-zip.org</span>
<a name="l00024"></a>00024 <span class="comment"> * Copyright 2010 QTronic GmbH. All rights reserved. </span>
<a name="l00025"></a>00025 <span class="comment"> * -------------------------------------------------------------------------</span>
<a name="l00026"></a>00026 <span class="comment"> */</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="demo_2main_8h.html">main.h</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="expat_8h.html">../common/expat.h</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a><a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">00035</a> <span class="preprocessor">#define BUFSIZE 4096</span>
<a name="l00036"></a><a class="code" href="demo_2main_8c.html#a148ed8d9abe259585297e3968fd67a5e">00036</a> <span class="preprocessor"></span><span class="preprocessor">#define UNZIP_CMD &quot;7z x -aoa -o&quot;</span>
<a name="l00037"></a><a class="code" href="demo_2main_8c.html#a3ec6ac973634273e8ffff5a4b6de6c92">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define XML_FILE  &quot;modelDescription.xml&quot;</span>
<a name="l00038"></a><a class="code" href="demo_2main_8c.html#a7a5b5bdfe8aabf53edd67035decce5ae">00038</a> <span class="preprocessor"></span><span class="preprocessor">#define DLL_DIR   &quot;binaries\\win32\\&quot;</span>
<a name="l00039"></a><a class="code" href="demo_2main_8c.html#a920b88f3cbaf43363c442b21f08e007d">00039</a> <span class="preprocessor"></span><span class="preprocessor">#define RESULT_FILE &quot;result.csv&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="comment">// return codes of the 7z command line tool</span>
<a name="l00042"></a><a class="code" href="demo_2main_8c.html#ab536b0dfc866f505f017b605502220d3">00042</a> <span class="preprocessor">#define SEVEN_ZIP_NO_ERROR 0 // success</span>
<a name="l00043"></a><a class="code" href="demo_2main_8c.html#adb67e0cd83a9a865a86f6320977ab117">00043</a> <span class="preprocessor"></span><span class="preprocessor">#define SEVEN_ZIP_WARNING 1  // e.g., one or more files were locked during zip</span>
<a name="l00044"></a><a class="code" href="demo_2main_8c.html#aed34f0c80a106dca921518884fac9341">00044</a> <span class="preprocessor"></span><span class="preprocessor">#define SEVEN_ZIP_ERROR 2</span>
<a name="l00045"></a><a class="code" href="demo_2main_8c.html#a16ebb391b57eb6852ab54cb202f49499">00045</a> <span class="preprocessor"></span><span class="preprocessor">#define SEVEN_ZIP_COMMAND_LINE_ERROR 7</span>
<a name="l00046"></a><a class="code" href="demo_2main_8c.html#aad5a60e8bd84d571cf42bd62b0189b97">00046</a> <span class="preprocessor"></span><span class="preprocessor">#define SEVEN_ZIP_OUT_OF_MEMORY 8</span>
<a name="l00047"></a><a class="code" href="demo_2main_8c.html#a0aaf67ce03f681ed6ba254e9637827a2">00047</a> <span class="preprocessor"></span><span class="preprocessor">#define SEVEN_ZIP_STOPPED_BY_USER 255</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a><a class="code" href="demo_2main_8c.html#abfcc22c10d8a6f031bf0aa64a5f6a22f">00049</a> <span class="keyword">static</span> <a class="code" href="structFMU.html">FMU</a> <a class="code" href="demo_2main_8c.html#abfcc22c10d8a6f031bf0aa64a5f6a22f">fmu</a>; <span class="comment">// the fmu to simulate</span>
<a name="l00050"></a>00050 
<a name="l00051"></a><a class="code" href="demo_2main_8c.html#a1aa7f8ae710dc0ce318ba2049abee88f">00051</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="demo_2main_8c.html#a1aa7f8ae710dc0ce318ba2049abee88f">unzip</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *zipPath, <span class="keyword">const</span> <span class="keywordtype">char</span> *outPath) {
<a name="l00052"></a>00052     <span class="keywordtype">int</span> code;
<a name="l00053"></a>00053     <span class="keywordtype">char</span> cwd[<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>];
<a name="l00054"></a>00054     <span class="keywordtype">char</span> binPath[<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>];
<a name="l00055"></a>00055     <span class="keywordtype">int</span> n = strlen(<a class="code" href="demo_2main_8c.html#a148ed8d9abe259585297e3968fd67a5e">UNZIP_CMD</a>) + strlen(outPath) + 1 +  strlen(zipPath) + 9;
<a name="l00056"></a>00056     <span class="keywordtype">char</span>* cmd = (<span class="keywordtype">char</span>*)calloc(<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>), n);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">// remember current directory</span>
<a name="l00059"></a>00059     <span class="keywordflow">if</span> (!GetCurrentDirectory(<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>, cwd)) {
<a name="l00060"></a>00060         printf (<span class="stringliteral">&quot;error: Could not get current directory\n&quot;</span>);
<a name="l00061"></a>00061         <span class="keywordflow">return</span> 0; <span class="comment">// error</span>
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063         
<a name="l00064"></a>00064     <span class="comment">// change to %FMUSDK_HOME%\bin to find 7z.dll and 7z.exe</span>
<a name="l00065"></a>00065     <span class="keywordflow">if</span> (!GetEnvironmentVariable(<span class="stringliteral">&quot;FMUSDK_HOME&quot;</span>, binPath, <a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>)) {
<a name="l00066"></a>00066         <span class="keywordflow">if</span> (GetLastError() == ERROR_ENVVAR_NOT_FOUND) {
<a name="l00067"></a>00067             printf (<span class="stringliteral">&quot;error: Environment variable FMUSDK_HOME not defined\n&quot;</span>);
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069         <span class="keywordflow">else</span> {
<a name="l00070"></a>00070             printf (<span class="stringliteral">&quot;error: Could not get value of FMUSDK_HOME\n&quot;</span>);
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072         <span class="keywordflow">return</span> 0; <span class="comment">// error       </span>
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074     strcat(binPath, <span class="stringliteral">&quot;\\bin&quot;</span>);
<a name="l00075"></a>00075     <span class="keywordflow">if</span> (!SetCurrentDirectory(binPath)) {
<a name="l00076"></a>00076         printf (<span class="stringliteral">&quot;error: could not change to directory &#39;%s&#39;\n&quot;</span>, binPath); 
<a name="l00077"></a>00077         <span class="keywordflow">return</span> 0; <span class="comment">// error        </span>
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079    
<a name="l00080"></a>00080     <span class="comment">// run the unzip command</span>
<a name="l00081"></a>00081     <span class="comment">// remove &quot;&gt; NUL&quot; to see the unzip protocol</span>
<a name="l00082"></a>00082     sprintf(cmd, <span class="stringliteral">&quot;%s%s \&quot;%s\&quot; &gt; NUL&quot;</span>, <a class="code" href="demo_2main_8c.html#a148ed8d9abe259585297e3968fd67a5e">UNZIP_CMD</a>, outPath, zipPath); 
<a name="l00083"></a>00083     <span class="comment">// printf(&quot;cmd=&#39;%s&#39;\n&quot;, cmd);</span>
<a name="l00084"></a>00084     code = system(cmd);
<a name="l00085"></a>00085     free(cmd);
<a name="l00086"></a>00086     <span class="keywordflow">if</span> (code!=<a class="code" href="demo_2main_8c.html#ab536b0dfc866f505f017b605502220d3">SEVEN_ZIP_NO_ERROR</a>) {
<a name="l00087"></a>00087         <span class="keywordflow">switch</span> (code) {
<a name="l00088"></a>00088             printf(<span class="stringliteral">&quot;7z: &quot;</span>);
<a name="l00089"></a>00089             <span class="keywordflow">case</span> <a class="code" href="demo_2main_8c.html#adb67e0cd83a9a865a86f6320977ab117">SEVEN_ZIP_WARNING</a>:            printf(<span class="stringliteral">&quot;warning\n&quot;</span>); <span class="keywordflow">break</span>;
<a name="l00090"></a>00090             <span class="keywordflow">case</span> <a class="code" href="demo_2main_8c.html#aed34f0c80a106dca921518884fac9341">SEVEN_ZIP_ERROR</a>:              printf(<span class="stringliteral">&quot;error\n&quot;</span>); <span class="keywordflow">break</span>;
<a name="l00091"></a>00091             <span class="keywordflow">case</span> <a class="code" href="demo_2main_8c.html#a16ebb391b57eb6852ab54cb202f49499">SEVEN_ZIP_COMMAND_LINE_ERROR</a>: printf(<span class="stringliteral">&quot;command line error\n&quot;</span>); <span class="keywordflow">break</span>;
<a name="l00092"></a>00092             <span class="keywordflow">case</span> <a class="code" href="demo_2main_8c.html#aad5a60e8bd84d571cf42bd62b0189b97">SEVEN_ZIP_OUT_OF_MEMORY</a>:      printf(<span class="stringliteral">&quot;out of memory\n&quot;</span>); <span class="keywordflow">break</span>;
<a name="l00093"></a>00093             <span class="keywordflow">case</span> <a class="code" href="demo_2main_8c.html#a0aaf67ce03f681ed6ba254e9637827a2">SEVEN_ZIP_STOPPED_BY_USER</a>:    printf(<span class="stringliteral">&quot;stopped by user\n&quot;</span>); <span class="keywordflow">break</span>;
<a name="l00094"></a>00094             <span class="keywordflow">default</span>: printf(<span class="stringliteral">&quot;unknown problem\n&quot;</span>);
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096     }
<a name="l00097"></a>00097     
<a name="l00098"></a>00098     <span class="comment">// restore current directory</span>
<a name="l00099"></a>00099     SetCurrentDirectory(cwd);
<a name="l00100"></a>00100     
<a name="l00101"></a>00101     <span class="keywordflow">return</span> (code==<a class="code" href="demo_2main_8c.html#ab536b0dfc866f505f017b605502220d3">SEVEN_ZIP_NO_ERROR</a> || code==<a class="code" href="demo_2main_8c.html#adb67e0cd83a9a865a86f6320977ab117">SEVEN_ZIP_WARNING</a>) ? 1 : 0;  
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">// fmuFileName is an absolute path, e.g. &quot;C:\test\a.fmu&quot;</span>
<a name="l00105"></a>00105 <span class="comment">// or relative to the current dir, e.g. &quot;..\test\a.fmu&quot;</span>
<a name="l00106"></a><a class="code" href="demo_2main_8c.html#ae5c925502ad3bbb3b2d7095e216c837f">00106</a> <span class="keyword">static</span> <span class="keywordtype">char</span>* <a class="code" href="demo_2main_8c.html#ae5c925502ad3bbb3b2d7095e216c837f">getFmuPath</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmuFileName){
<a name="l00107"></a>00107     OFSTRUCT fileInfo;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="keywordflow">if</span> (HFILE_ERROR==OpenFile(fmuFileName, &amp;fileInfo, OF_EXIST)) {
<a name="l00110"></a>00110         printf (<span class="stringliteral">&quot;error: Could not open FMU &#39;%s&#39;\n&quot;</span>, fmuFileName);
<a name="l00111"></a>00111         <span class="keywordflow">return</span> NULL;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113     <span class="comment">//printf (&quot;full path to FMU: &#39;%s&#39;\n&quot;, fileInfo.szPathName); </span>
<a name="l00114"></a>00114     <span class="keywordflow">return</span> strdup(fileInfo.szPathName);
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a><a class="code" href="demo_2main_8c.html#a55589599a3cdf7aa53d90dfa1f5594b6">00117</a> <span class="keyword">static</span> <span class="keywordtype">char</span>* <a class="code" href="demo_2main_8c.html#a55589599a3cdf7aa53d90dfa1f5594b6">getTmpPath</a>() {
<a name="l00118"></a>00118     <span class="keywordtype">char</span> tmpPath[<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>];
<a name="l00119"></a>00119     <span class="keywordflow">if</span>(! GetTempPath(<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>, tmpPath)) {
<a name="l00120"></a>00120         printf (<span class="stringliteral">&quot;error: Could not find temporary disk space\n&quot;</span>);
<a name="l00121"></a>00121         <span class="keywordflow">return</span> NULL;
<a name="l00122"></a>00122     }
<a name="l00123"></a>00123     strcat(tmpPath, <span class="stringliteral">&quot;fmu\\&quot;</span>);
<a name="l00124"></a>00124     <span class="keywordflow">return</span> strdup(tmpPath);
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a><a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">00127</a> <span class="keyword">static</span> <span class="keywordtype">void</span>* <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(<a class="code" href="structFMU.html">FMU</a> *fmu, <span class="keyword">const</span> <span class="keywordtype">char</span>* functionName){
<a name="l00128"></a>00128     <span class="keywordtype">char</span> <a class="code" href="expat_8h.html#a1b49b495b59f9e73205b69ad1a2965b0">name</a>[<a class="code" href="demo_2main_8c.html#aeca034f67218340ecb2261a22c2f3dcd">BUFSIZE</a>];
<a name="l00129"></a>00129     <span class="keywordtype">void</span>* fp;
<a name="l00130"></a>00130     sprintf(name, <span class="stringliteral">&quot;%s_%s&quot;</span>, <a class="code" href="xml__parser__cosim_8c.html#aef3634637021d01f8ea8d5765455a01b">getModelIdentifier</a>(fmu-&gt;<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>), functionName); <span class="comment">// Zuo: adding the model name in front of funciton name</span>
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     fp = GetProcAddress(fmu-&gt;<a class="code" href="structFMU.html#a82180963188b7fb775aabf7795ac12da">dllHandle</a>, name);
<a name="l00133"></a>00133     <span class="keywordflow">if</span> (!fp) {
<a name="l00134"></a>00134         printf (<span class="stringliteral">&quot;error: Function %s not found in dll\n&quot;</span>, name);        
<a name="l00135"></a>00135     }
<a name="l00136"></a>00136     <span class="keywordflow">return</span> fp;
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 <span class="comment">// Load the given dll and set function pointers in fmu</span>
<a name="l00140"></a>00140 <span class="comment">// Zuo: 1. change the names of the standard FMI functions by adding the modlei identifer</span>
<a name="l00141"></a>00141 <span class="comment">// Zuo: 2. link the new functions with QTronic&#39;s FMU structure</span>
<a name="l00142"></a><a class="code" href="demo_2main_8c.html#a38463a3da5d08ccf0c6032034fb9c173">00142</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="demo_2main_8c.html#a38463a3da5d08ccf0c6032034fb9c173">loadDll</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* dllPath, <a class="code" href="structFMU.html">FMU</a> *fmu) {
<a name="l00143"></a>00143     <a class="code" href="demo_2main_8h.html#ab521aa5010fb1afb801a899a55569e03">HANDLE</a> h = LoadLibrary(dllPath);
<a name="l00144"></a>00144     <span class="keywordflow">if</span> (!h) {
<a name="l00145"></a>00145         printf(<span class="stringliteral">&quot;error: Could not load %s\n&quot;</span>, dllPath);
<a name="l00146"></a>00146         <span class="keywordflow">return</span> 0; <span class="comment">// failure</span>
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148     fmu-&gt;<a class="code" href="structFMU.html#a82180963188b7fb775aabf7795ac12da">dllHandle</a> = h;
<a name="l00149"></a>00149     <span class="comment">//fmu-&gt;getModelTypesPlatform   = (fGetModelTypesPlatform) getAdr(fmu, &quot;fmiGetModelTypesPlatform&quot;);  // Zuo: definition in model-ex V1.0</span>
<a name="l00150"></a>00150     fmu-&gt;<a class="code" href="structFMU.html#a709f8f6e8af1f113fd005631eea6da55">getTypesPlatform</a>   = (<a class="code" href="demo_2main_8h.html#a50cc6ae577d0acdd7c47a34e148aea14">fGetTypesPlatform</a>) <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetTypesPlatform&quot;</span>);                   <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00151"></a>00151 
<a name="l00152"></a>00152     fmu-&gt;<a class="code" href="structFMU.html#acfbbdfe57b91e5686a81b414a68de558">getVersion</a>              = (<a class="code" href="demo_2main_8h.html#a585e0ceac50a6a45bc0885facdfab75b">fGetVersion</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetVersion&quot;</span>);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="comment">//fmu-&gt;instantiateModel        = (fInstantiateModel)   getAdr(fmu, &quot;fmiInstantiateModel&quot;);          // Zuo: definition in model-ex V1.0</span>
<a name="l00155"></a>00155     fmu-&gt;<a class="code" href="structFMU.html#a5ab97d79f03f2a4a40b51804e738e390">instantiateSlave</a>        = (<a class="code" href="demo_2main_8h.html#a9f23cf5b2d525f8ee7250f93d2a22476">fInstantiateSlave</a>)   <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiInstantiateSlave&quot;</span>);            <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     <span class="comment">//fmu-&gt;freeModelInstance       = (fFreeModelInstance)  getAdr(fmu, &quot;fmiFreeModelInstance&quot;);         // Zuo: definition in model-ex V1.0</span>
<a name="l00158"></a>00158     fmu-&gt;<a class="code" href="structFMU.html#a1f63360e5103aa77db8cf9da3d1c201d">freeSlaveInstance</a>       = (<a class="code" href="demo_2main_8h.html#a13148b9200d738461c3f954378858a6c">fFreeSlaveInstance</a>)  <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiFreeSlaveInstance&quot;</span>);           <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     fmu-&gt;<a class="code" href="structFMU.html#aa250608fbea5d8b6e1e13d4b4c6a4274">setDebugLogging</a>         = (<a class="code" href="demo_2main_8h.html#a4e423c744e071e9deefc4c4fbeac3d5d">fSetDebugLogging</a>)    <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiSetDebugLogging&quot;</span>);
<a name="l00161"></a>00161     <span class="comment">//fmu-&gt;setTime                 = (fSetTime)            getAdr(fmu, &quot;fmiSetTime&quot;);                       // Zuo: not in co-sim V1.0</span>
<a name="l00162"></a>00162     <span class="comment">//fmu-&gt;setContinuousStates     = (fSetContinuousStates)getAdr(fmu, &quot;fmiSetContinuousStates&quot;);           // Zuo: not in co-sim V1.0</span>
<a name="l00163"></a>00163     <span class="comment">//fmu-&gt;completedIntegratorStep = (fCompletedIntegratorStep)getAdr(fmu, &quot;fmiCompletedIntegratorStep&quot;);   // Zuo: not in co-sim V1.0</span>
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     fmu-&gt;<a class="code" href="structFMU.html#a8aa58f5bc3297c4d5c053b2e11dae62b">setReal</a>                 = (<a class="code" href="demo_2main_8h.html#a7af4ef23db60e610ebce4e4496f342fd">fSetReal</a>)            <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiSetReal&quot;</span>);
<a name="l00166"></a>00166     fmu-&gt;<a class="code" href="structFMU.html#a4c10c8a4c287ebb6f6b7e1ced3add116">setInteger</a>              = (<a class="code" href="demo_2main_8h.html#a44fd8f3931e3fbafc776e3fd3c97a198">fSetInteger</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiSetInteger&quot;</span>);
<a name="l00167"></a>00167     fmu-&gt;<a class="code" href="structFMU.html#a6966f252a65e09ee7dacaeb741123a99">setBoolean</a>              = (<a class="code" href="demo_2main_8h.html#a46f8c9838c152223f9f5d929288a78e3">fSetBoolean</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiSetBoolean&quot;</span>);
<a name="l00168"></a>00168     fmu-&gt;<a class="code" href="structFMU.html#a7cf06aa56adabb52a81292194d67dbb5">setString</a>               = (<a class="code" href="demo_2main_8h.html#aced3817aea691d703cd4855c27820247">fSetString</a>)          <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiSetString&quot;</span>);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="comment">//fmu-&gt;initialize              = (fInitialize)         getAdr(fmu, &quot;fmiInitialize&quot;);                // Zuo: definition in model-ex V1.0</span>
<a name="l00171"></a>00171     fmu-&gt;<a class="code" href="structFMU.html#a6044130298cf303c1a8b600744c56898">initializeSlave</a>         = (<a class="code" href="demo_2main_8h.html#a8437f093fa14940d9fbaf0e0de90365f">fInitializeSlave</a>)    <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiInitializeSlave&quot;</span>);             <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="comment">//fmu-&gt;getDerivatives          = (fGetDerivatives)     getAdr(fmu, &quot;fmiGetDerivatives&quot;);            // Zuo: not in co-sim V1.0</span>
<a name="l00174"></a>00174     <span class="comment">//fmu-&gt;getEventIndicators      = (fGetEventIndicators) getAdr(fmu, &quot;fmiGetEventIndicators&quot;);        // Zuo: not in co-sim V1.0</span>
<a name="l00175"></a>00175     fmu-&gt;<a class="code" href="structFMU.html#a36550c7f815289d8dea04ed0c6e01e70">getReal</a>                 = (<a class="code" href="demo_2main_8h.html#aadcb3d70b6db25b24481baa773fdc347">fGetReal</a>)            <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetReal&quot;</span>);
<a name="l00176"></a>00176     fmu-&gt;<a class="code" href="structFMU.html#a45a291781f84f79641ad383bdedc1f02">getInteger</a>              = (<a class="code" href="demo_2main_8h.html#a8cbc59239078cd48ec0ed319180ba2db">fGetInteger</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetInteger&quot;</span>);
<a name="l00177"></a>00177     fmu-&gt;<a class="code" href="structFMU.html#a2b1333b2141c2c2bfdd14b31c921f011">getBoolean</a>              = (<a class="code" href="demo_2main_8h.html#a2ea8d54283767caf09081f0b15366ecb">fGetBoolean</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetBoolean&quot;</span>);
<a name="l00178"></a>00178     fmu-&gt;<a class="code" href="structFMU.html#a8136a2e05875ccff548932c6909525eb">getString</a>               = (<a class="code" href="demo_2main_8h.html#ab50cecb1f486595cd6060160b1d313d2">fGetString</a>)          <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiGetString&quot;</span>);
<a name="l00179"></a>00179     <span class="comment">//fmu-&gt;eventUpdate             = (fEventUpdate)        getAdr(fmu, &quot;fmiEventUpdate&quot;);                           // Zuo: not in co-sim V1.0</span>
<a name="l00180"></a>00180     <span class="comment">//fmu-&gt;getContinuousStates     = (fGetContinuousStates)getAdr(fmu, &quot;fmiGetContinuousStates&quot;);                   // Zuo: not in co-sim V1.0</span>
<a name="l00181"></a>00181     <span class="comment">//fmu-&gt;getNominalContinuousStates = (fGetNominalContinuousStates)getAdr(fmu, &quot;fmiGetNominalContinuousStates&quot;);  // Zuo: not in co-sim V1.0</span>
<a name="l00182"></a>00182     <span class="comment">//fmu-&gt;getStateValueReferences = (fGetStateValueReferences)getAdr(fmu, &quot;fmiGetStateValueReferences&quot;);           // Zuo: not in co-sim V1.0</span>
<a name="l00183"></a>00183     <span class="comment">//fmu-&gt;terminate               = (fTerminate)          getAdr(fmu, &quot;fmiTerminate&quot;);                             // Zuo: definitioin in model-ex V1.0</span>
<a name="l00184"></a>00184     fmu-&gt;<a class="code" href="structFMU.html#aed7bffd7a6a33108e34874438db16fd6">doStep</a>                     = (<a class="code" href="demo_2main_8h.html#aea67ad8461bdeadbd1f8c9365aa6cd0f">fDoStep</a>)         <a class="code" href="demo_2main_8c.html#a35564733626bab4282c67b166767d177">getAdr</a>(fmu, <span class="stringliteral">&quot;fmiDoStep&quot;</span>);                       <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <span class="keywordflow">return</span> 1; <span class="comment">// success  </span>
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a><a class="code" href="demo_2main_8c.html#a912a7ec9028eae1bcd70bd78f4ee3653">00189</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="demo_2main_8c.html#a912a7ec9028eae1bcd70bd78f4ee3653">doubleToCommaString</a>(<span class="keywordtype">char</span>* buffer, <span class="keywordtype">double</span> <a class="code" href="fmuTemplate_8h.html#ace512a56d1c5f7e08cdeb670d7ec2a37">r</a>){
<a name="l00190"></a>00190     <span class="keywordtype">char</span>* comma;
<a name="l00191"></a>00191     sprintf(buffer, <span class="stringliteral">&quot;%.16g&quot;</span>, r);
<a name="l00192"></a>00192     comma = strchr(buffer, <span class="charliteral">&#39;.&#39;</span>);
<a name="l00193"></a>00193     <span class="keywordflow">if</span> (comma) *comma = <span class="charliteral">&#39;,&#39;</span>;
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">// output time and all non-alias variables in CSV format</span>
<a name="l00197"></a>00197 <span class="comment">// if separator is &#39;,&#39;, columns are separated by &#39;,&#39; and &#39;.&#39; is used for floating-point numbers.</span>
<a name="l00198"></a>00198 <span class="comment">// otherwise, the given separator (e.g. &#39;;&#39; or &#39;\t&#39;) is to separate columns, and &#39;,&#39; is used for </span>
<a name="l00199"></a>00199 <span class="comment">// floating-point numbers.</span>
<a name="l00200"></a><a class="code" href="demo_2main_8c.html#a426743b9c0f10d3888166a058c126bc5">00200</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="demo_2main_8c.html#a426743b9c0f10d3888166a058c126bc5">outputRow</a>(<a class="code" href="structFMU.html">FMU</a> *fmu, <a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <span class="keywordtype">double</span> time, FILE* file, <span class="keywordtype">char</span> separator, <span class="keywordtype">boolean</span> header) {
<a name="l00201"></a>00201     <span class="keywordtype">int</span> k;
<a name="l00202"></a>00202     <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> <a class="code" href="fmuTemplate_8h.html#ace512a56d1c5f7e08cdeb670d7ec2a37">r</a>;
<a name="l00203"></a>00203     <a class="code" href="common_2fmiModelTypes_8h.html#aa25f3f3cbdc012475221ef377f84958c">fmiInteger</a> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00204"></a>00204     <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> <a class="code" href="fmuTemplate_8h.html#adf0b3fc9ba0bb3ed250cb7ea19af7d39">b</a>;
<a name="l00205"></a>00205     <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> <a class="code" href="expat_8h.html#a755339d27872b13735c2cab829e47157">s</a>;
<a name="l00206"></a>00206     <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr;               
<a name="l00207"></a>00207     <a class="code" href="structScalarVariable.html">ScalarVariable</a>** vars = fmu-&gt;<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>-&gt;<a class="code" href="structModelDescription.html#a06f6c51301bd9921b391a7b7584b945e">modelVariables</a>;
<a name="l00208"></a>00208     <span class="keywordtype">char</span> buffer[32];
<a name="l00209"></a>00209     
<a name="l00210"></a>00210     <span class="comment">// print first column</span>
<a name="l00211"></a>00211     <span class="keywordflow">if</span> (header) 
<a name="l00212"></a>00212         fprintf(file, <span class="stringliteral">&quot;time&quot;</span>); 
<a name="l00213"></a>00213     <span class="keywordflow">else</span> {
<a name="l00214"></a>00214         <span class="keywordflow">if</span> (separator==<span class="charliteral">&#39;,&#39;</span>) 
<a name="l00215"></a>00215             fprintf(file, <span class="stringliteral">&quot;%.4f&quot;</span>, time);                <span class="comment">// Zuo: change to better format</span>
<a name="l00216"></a>00216         <span class="keywordflow">else</span> {
<a name="l00217"></a>00217             <span class="comment">// separator is e.g. &#39;;&#39; or &#39;\t&#39;</span>
<a name="l00218"></a>00218             <a class="code" href="demo_2main_8c.html#a912a7ec9028eae1bcd70bd78f4ee3653">doubleToCommaString</a>(buffer, time);
<a name="l00219"></a>00219             fprintf(file, <span class="stringliteral">&quot;%s&quot;</span>, buffer);       
<a name="l00220"></a>00220         }
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222     
<a name="l00223"></a>00223     <span class="comment">// print all other columns</span>
<a name="l00224"></a>00224     <span class="keywordflow">for</span> (k=0; vars[k]; k++) {
<a name="l00225"></a>00225         <a class="code" href="structScalarVariable.html">ScalarVariable</a>* sv = vars[k];
<a name="l00226"></a>00226         <span class="keywordflow">if</span> (<a class="code" href="xml__parser__cosim_8c.html#ad6d56a92ea398f84c24ae5328a0bcebd" title="Get alias.">getAlias</a>(sv)!=<a class="code" href="xml__parser__cosim_8h.html#aea7ea6e61f6b28ce9df951528de712baa718ec103eaae3fcb5dab6d9076dd7e4b">enu_noAlias</a>) <span class="keywordflow">continue</span>;
<a name="l00227"></a>00227         <span class="keywordflow">if</span> (header) {
<a name="l00228"></a>00228             <span class="comment">// output names only</span>
<a name="l00229"></a>00229             fprintf(file, <span class="stringliteral">&quot;%c%s&quot;</span>, separator, <a class="code" href="xml__parser__cosim_8c.html#ac5d9dc6a672aef4c044285da7b26f5a9" title="Get name.">getName</a>(sv));
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231         <span class="keywordflow">else</span> {
<a name="l00232"></a>00232             <span class="comment">// output values</span>
<a name="l00233"></a>00233             vr = <a class="code" href="xml__parser__cosim_8c.html#ade04f5555b0436f91e98211ba3bcb9e2" title="Get value reference.">getValueReference</a>(sv);
<a name="l00234"></a>00234             <span class="keywordflow">switch</span> (sv-&gt;<a class="code" href="structScalarVariable.html#a3563abf1de77f1e99c86851aefaa7650">typeSpec</a>-&gt;<a class="code" href="structElement.html#a7b29ec1313f99517acb89211871fdd34">type</a>){
<a name="l00235"></a>00235                 <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fabb70f90bc7f0e801e505879c40002c9e">elm_Real</a>:
<a name="l00236"></a>00236                     fmu-&gt;<a class="code" href="structFMU.html#a36550c7f815289d8dea04ed0c6e01e70">getReal</a>(c, &amp;vr, 1, &amp;r);
<a name="l00237"></a>00237                     <span class="keywordflow">if</span> (separator==<span class="charliteral">&#39;,&#39;</span>) 
<a name="l00238"></a>00238                         fprintf(file, <span class="stringliteral">&quot;,%.4f&quot;</span>, r);              <span class="comment">// Zuo: change to better format</span>
<a name="l00239"></a>00239                     <span class="keywordflow">else</span> {
<a name="l00240"></a>00240                         <span class="comment">// separator is e.g. &#39;;&#39; or &#39;\t&#39;</span>
<a name="l00241"></a>00241                         <a class="code" href="demo_2main_8c.html#a912a7ec9028eae1bcd70bd78f4ee3653">doubleToCommaString</a>(buffer, r);
<a name="l00242"></a>00242                         fprintf(file, <span class="stringliteral">&quot;%c%s&quot;</span>, separator, buffer);       
<a name="l00243"></a>00243                     }
<a name="l00244"></a>00244                     <span class="keywordflow">break</span>;
<a name="l00245"></a>00245                 <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa31fb1361c495778fa9e495771fcaa94c">elm_Integer</a>:
<a name="l00246"></a>00246                     fmu-&gt;<a class="code" href="structFMU.html#a45a291781f84f79641ad383bdedc1f02">getInteger</a>(c, &amp;vr, 1, &amp;i);
<a name="l00247"></a>00247                     fprintf(file, <span class="stringliteral">&quot;%c%d&quot;</span>, separator, i);
<a name="l00248"></a>00248                     <span class="keywordflow">break</span>;
<a name="l00249"></a>00249                 <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa493527b21665f01720a5b77c7cc78368">elm_Boolean</a>:
<a name="l00250"></a>00250                     fmu-&gt;<a class="code" href="structFMU.html#a2b1333b2141c2c2bfdd14b31c921f011">getBoolean</a>(c, &amp;vr, 1, &amp;b);
<a name="l00251"></a>00251                     fprintf(file, <span class="stringliteral">&quot;%c%d&quot;</span>, separator, b);
<a name="l00252"></a>00252                     <span class="keywordflow">break</span>;
<a name="l00253"></a>00253                 <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa68516efd31d0e86b985b8d691622307a">elm_String</a>:
<a name="l00254"></a>00254                     fmu-&gt;<a class="code" href="structFMU.html#a8136a2e05875ccff548932c6909525eb">getString</a>(c, &amp;vr, 1, &amp;s);
<a name="l00255"></a>00255                     fprintf(file, <span class="stringliteral">&quot;%c%s&quot;</span>, separator, s);
<a name="l00256"></a>00256                     <span class="keywordflow">break</span>;
<a name="l00257"></a>00257             }
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259     } <span class="comment">// for</span>
<a name="l00260"></a>00260     
<a name="l00261"></a>00261     <span class="comment">// terminate this row</span>
<a name="l00262"></a>00262     fprintf(file, <span class="stringliteral">&quot;\n&quot;</span>); 
<a name="l00263"></a>00263 }
<a name="l00264"></a>00264 
<a name="l00265"></a><a class="code" href="demo_2main_8c.html#ac0819fd07fd6f3f2aa5fb2a99b6234dc">00265</a> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="demo_2main_8c.html#ac0819fd07fd6f3f2aa5fb2a99b6234dc">fmiStatusToString</a>(<a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> status){
<a name="l00266"></a>00266     <span class="keywordflow">switch</span> (status){
<a name="l00267"></a>00267         <span class="keywordflow">case</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47abc58b7c93027e4749ff828639841a408">fmiOK</a>:      <span class="keywordflow">return</span> <span class="stringliteral">&quot;ok&quot;</span>;
<a name="l00268"></a>00268         <span class="keywordflow">case</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47aba27e6f8de07b51b59b2e849e529dd64">fmiWarning</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;warning&quot;</span>;
<a name="l00269"></a>00269         <span class="keywordflow">case</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a02bb3502ec110e4657852b88b1549b4d">fmiDiscard</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;discard&quot;</span>;
<a name="l00270"></a>00270         <span class="keywordflow">case</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a5b23f77dbb61bfe57f250abd03b1e54d">fmiError</a>:   <span class="keywordflow">return</span> <span class="stringliteral">&quot;error&quot;</span>;
<a name="l00271"></a>00271         <span class="comment">//case fmiFatal:   return &quot;fatal&quot;;      // Zuo definition in model-ex V1.0</span>
<a name="l00272"></a>00272         <span class="keywordflow">case</span> <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47a116b2742cf9af1f931716b67e830343e">fmiPending</a>:   <span class="keywordflow">return</span> <span class="stringliteral">&quot;pending&quot;</span>;    <span class="comment">// Zuo definition in co-sim V1.0</span>
<a name="l00273"></a>00273         <span class="keywordflow">default</span>:         <span class="keywordflow">return</span> <span class="stringliteral">&quot;?&quot;</span>;
<a name="l00274"></a>00274     }
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="comment">// search a fmu for the given variable</span>
<a name="l00278"></a>00278 <span class="comment">// return NULL if not found or vr = fmiUndefinedValueReference</span>
<a name="l00279"></a><a class="code" href="demo_2main_8c.html#a66b6c972694948c8cf8391fd0e9e85b8">00279</a> <span class="keyword">static</span> <a class="code" href="structScalarVariable.html">ScalarVariable</a>* <a class="code" href="demo_2main_8c.html#a66b6c972694948c8cf8391fd0e9e85b8">getSV</a>(<a class="code" href="structFMU.html">FMU</a>* fmu, <span class="keywordtype">char</span> type, <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr) {
<a name="l00280"></a>00280     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>;
<a name="l00281"></a>00281     <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668f">Elm</a> tp;
<a name="l00282"></a>00282     <a class="code" href="structScalarVariable.html">ScalarVariable</a>** vars = fmu-&gt;<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>-&gt;<a class="code" href="structModelDescription.html#a06f6c51301bd9921b391a7b7584b945e">modelVariables</a>;
<a name="l00283"></a>00283     <span class="keywordflow">if</span> (vr==<a class="code" href="common_2fmiModelTypes_8h.html#a11874965620c8d77395f5401de5903b5">fmiUndefinedValueReference</a>) <span class="keywordflow">return</span> NULL;
<a name="l00284"></a>00284     <span class="keywordflow">switch</span> (type) {
<a name="l00285"></a>00285         <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>: tp = <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fabb70f90bc7f0e801e505879c40002c9e">elm_Real</a>;    <span class="keywordflow">break</span>;
<a name="l00286"></a>00286         <span class="keywordflow">case</span> <span class="charliteral">&#39;i&#39;</span>: tp = <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa31fb1361c495778fa9e495771fcaa94c">elm_Integer</a>; <span class="keywordflow">break</span>;
<a name="l00287"></a>00287         <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>: tp = <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa493527b21665f01720a5b77c7cc78368">elm_Boolean</a>; <span class="keywordflow">break</span>;
<a name="l00288"></a>00288         <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>: tp = <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa68516efd31d0e86b985b8d691622307a">elm_String</a>;  <span class="keywordflow">break</span>;                
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290     <span class="keywordflow">for</span> (i=0; vars[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]; i++) {
<a name="l00291"></a>00291         <a class="code" href="structScalarVariable.html">ScalarVariable</a>* sv = vars[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>];
<a name="l00292"></a>00292         <span class="keywordflow">if</span> (vr==<a class="code" href="xml__parser__cosim_8c.html#ade04f5555b0436f91e98211ba3bcb9e2" title="Get value reference.">getValueReference</a>(sv) &amp;&amp; tp==sv-&gt;<a class="code" href="structScalarVariable.html#a3563abf1de77f1e99c86851aefaa7650">typeSpec</a>-&gt;<a class="code" href="structElement.html#a7b29ec1313f99517acb89211871fdd34">type</a>) 
<a name="l00293"></a>00293             <span class="keywordflow">return</span> sv;
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295     <span class="keywordflow">return</span> NULL;
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 <span class="comment">// replace e.g. #r1365# by variable name and ## by # in message</span>
<a name="l00299"></a>00299 <span class="comment">// copies the result to buffer</span>
<a name="l00300"></a><a class="code" href="demo_2main_8c.html#a524362246b3185b3bd1ee5eb77a0e213">00300</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="demo_2main_8c.html#a524362246b3185b3bd1ee5eb77a0e213">replaceRefsInMessage</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* msg, <span class="keywordtype">char</span>* buffer, <span class="keywordtype">int</span> nBuffer, <a class="code" href="structFMU.html">FMU</a>* fmu){
<a name="l00301"></a>00301     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>=0; <span class="comment">// position in msg</span>
<a name="l00302"></a>00302     <span class="keywordtype">int</span> k=0; <span class="comment">// position in buffer</span>
<a name="l00303"></a>00303     <span class="keywordtype">int</span> n;
<a name="l00304"></a>00304     <span class="keywordtype">char</span> c = msg[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>];
<a name="l00305"></a>00305     <span class="keywordflow">while</span> (c!=<span class="charliteral">&#39;\0&#39;</span> &amp;&amp; k &lt; nBuffer) {
<a name="l00306"></a>00306         <span class="keywordflow">if</span> (c!=<span class="charliteral">&#39;#&#39;</span>) {
<a name="l00307"></a>00307             buffer[k++]=c;
<a name="l00308"></a>00308             i++;
<a name="l00309"></a>00309             c = msg[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>];
<a name="l00310"></a>00310         }
<a name="l00311"></a>00311         <span class="keywordflow">else</span> {
<a name="l00312"></a>00312             <span class="keywordtype">char</span>* end = strchr(msg+i+1, <span class="charliteral">&#39;#&#39;</span>);
<a name="l00313"></a>00313             <span class="keywordflow">if</span> (!end) {
<a name="l00314"></a>00314                 printf(<span class="stringliteral">&quot;unmatched &#39;#&#39; in &#39;%s&#39;\n&quot;</span>, msg);
<a name="l00315"></a>00315                 buffer[k++]=<span class="charliteral">&#39;#&#39;</span>;
<a name="l00316"></a>00316                 <span class="keywordflow">break</span>;
<a name="l00317"></a>00317             }
<a name="l00318"></a>00318             n = end - (msg+<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>);
<a name="l00319"></a>00319             <span class="keywordflow">if</span> (n==1) {
<a name="l00320"></a>00320                 <span class="comment">// ## detected, output #</span>
<a name="l00321"></a>00321                 buffer[k++]=<span class="charliteral">&#39;#&#39;</span>;
<a name="l00322"></a>00322                 i += 2;
<a name="l00323"></a>00323                 c = msg[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>];
<a name="l00324"></a>00324             }
<a name="l00325"></a>00325             <span class="keywordflow">else</span> {
<a name="l00326"></a>00326                 <span class="keywordtype">char</span> type = msg[i+1]; <span class="comment">// one of ribs</span>
<a name="l00327"></a>00327                 <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr;
<a name="l00328"></a>00328                 <span class="keywordtype">int</span> nvr = sscanf(msg+i+2, <span class="stringliteral">&quot;%u&quot;</span>, &amp;vr);
<a name="l00329"></a>00329                 <span class="keywordflow">if</span> (nvr==1) {
<a name="l00330"></a>00330                     <span class="comment">// vr of type detected, e.g. #r12#</span>
<a name="l00331"></a>00331                     <a class="code" href="structScalarVariable.html">ScalarVariable</a>* sv = <a class="code" href="demo_2main_8c.html#a66b6c972694948c8cf8391fd0e9e85b8">getSV</a>(fmu, type, vr);
<a name="l00332"></a>00332                     <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="expat_8h.html#a1b49b495b59f9e73205b69ad1a2965b0">name</a> = sv ? <a class="code" href="xml__parser__cosim_8c.html#ac5d9dc6a672aef4c044285da7b26f5a9" title="Get name.">getName</a>(sv) : <span class="stringliteral">&quot;?&quot;</span>;
<a name="l00333"></a>00333                     sprintf(buffer+k, <span class="stringliteral">&quot;%s&quot;</span>, name);
<a name="l00334"></a>00334                     k += strlen(name);
<a name="l00335"></a>00335                     i += (n+1);
<a name="l00336"></a>00336                     c = msg[<a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>]; 
<a name="l00337"></a>00337                 }
<a name="l00338"></a>00338                 <span class="keywordflow">else</span> {
<a name="l00339"></a>00339                     <span class="comment">// could not parse the number</span>
<a name="l00340"></a>00340                     printf(<span class="stringliteral">&quot;illegal value reference at position %d in &#39;%s&#39;\n&quot;</span>, i+2, msg);
<a name="l00341"></a>00341                     buffer[k++]=<span class="charliteral">&#39;#&#39;</span>;
<a name="l00342"></a>00342                     <span class="keywordflow">break</span>;
<a name="l00343"></a>00343                 }
<a name="l00344"></a>00344             }
<a name="l00345"></a>00345         }
<a name="l00346"></a>00346     } <span class="comment">// while</span>
<a name="l00347"></a>00347     buffer[k] = <span class="charliteral">&#39;\0&#39;</span>;
<a name="l00348"></a>00348 }
<a name="l00349"></a>00349 
<a name="l00350"></a><a class="code" href="demo_2main_8c.html#a17e333794ae761cd55ec6fd6fc0f1bac">00350</a> <span class="preprocessor">#define MAX_MSG_SIZE 1000</span>
<a name="l00351"></a><a class="code" href="demo_2main_8c.html#a9e78dd3ae3cc7c1bf240155eb6c13114">00351</a> <span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="demo_2main_8c.html#a9e78dd3ae3cc7c1bf240155eb6c13114">fmuLogger</a>(<a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c, <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> instanceName, <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> status,
<a name="l00352"></a>00352                <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> category, <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> message, ...) {
<a name="l00353"></a>00353     <span class="keywordtype">char</span> msg[<a class="code" href="demo_2main_8c.html#a17e333794ae761cd55ec6fd6fc0f1bac">MAX_MSG_SIZE</a>];
<a name="l00354"></a>00354     <span class="keywordtype">char</span>* <a class="code" href="fmuTemplate_8h.html#a95bec48eda795b155427d6c2fab6f3eb">copy</a>;
<a name="l00355"></a>00355     va_list argp;
<a name="l00356"></a>00356 
<a name="l00357"></a>00357     <span class="comment">// replace C format strings</span>
<a name="l00358"></a>00358     va_start(argp, message);
<a name="l00359"></a>00359     vsprintf(msg, message, argp);
<a name="l00360"></a>00360 
<a name="l00361"></a>00361     <span class="comment">// replace e.g. ## and #r12#  </span>
<a name="l00362"></a>00362     copy = strdup(msg);
<a name="l00363"></a>00363     <a class="code" href="demo_2main_8c.html#a524362246b3185b3bd1ee5eb77a0e213">replaceRefsInMessage</a>(copy, msg, <a class="code" href="demo_2main_8c.html#a17e333794ae761cd55ec6fd6fc0f1bac">MAX_MSG_SIZE</a>, &amp;fmu);
<a name="l00364"></a>00364     free(copy);
<a name="l00365"></a>00365     
<a name="l00366"></a>00366     <span class="comment">// print the final message</span>
<a name="l00367"></a>00367     <span class="keywordflow">if</span> (!instanceName) instanceName = <span class="stringliteral">&quot;?&quot;</span>;
<a name="l00368"></a>00368     <span class="keywordflow">if</span> (!category) category = <span class="stringliteral">&quot;?&quot;</span>;
<a name="l00369"></a>00369     printf(<span class="stringliteral">&quot;%s %s (%s): %s\n&quot;</span>, <a class="code" href="demo_2main_8c.html#ac0819fd07fd6f3f2aa5fb2a99b6234dc">fmiStatusToString</a>(status), instanceName, category, msg);
<a name="l00370"></a>00370 }
<a name="l00371"></a>00371 
<a name="l00372"></a><a class="code" href="demo_2main_8c.html#a47f91788e39f5b8cd0e55c08426100ef">00372</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="demo_2main_8c.html#a47f91788e39f5b8cd0e55c08426100ef">error</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* message){
<a name="l00373"></a>00373     printf(<span class="stringliteral">&quot;%s\n&quot;</span>, message);
<a name="l00374"></a>00374     <span class="keywordflow">return</span> 0;
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 <span class="comment">// simulate the given FMU using the forward euler method.</span>
<a name="l00379"></a>00379 <span class="comment">// time events are processed by reducing step size to exactly hit tNext.</span>
<a name="l00380"></a>00380 <span class="comment">// state events are checked and fired only at the end of an Euler step. </span>
<a name="l00381"></a>00381 <span class="comment">// the simulator may therefore miss state events and fires state events typically too late.</span>
<a name="l00382"></a><a class="code" href="demo_2main_8c.html#a5d6125f412e566f88d2b3359ec4ef792">00382</a> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="demo_2main_8c.html#a5d6125f412e566f88d2b3359ec4ef792">simulate</a>(<a class="code" href="structFMU.html">FMU</a>* fmu, <span class="keywordtype">double</span> tEnd, <span class="keywordtype">double</span> h, <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> loggingOn, <span class="keywordtype">char</span> separator) {
<a name="l00383"></a>00383         
<a name="l00384"></a>00384     <span class="keywordtype">int</span> <a class="code" href="fmuTemplate_8h.html#ad51f78a2c68c740b5b1d4fa9bda8500f">i</a>, n;
<a name="l00385"></a>00385     <span class="comment">//double dt, tPre;              // Zuo: no use</span>
<a name="l00386"></a>00386     <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> timeEvent, stateEvent, stepEvent;
<a name="l00387"></a>00387     <span class="keywordtype">double</span> time;  
<a name="l00388"></a>00388 
<a name="l00389"></a>00389     <span class="comment">// Zuo: the following varibles are not used</span>
<a name="l00390"></a>00390     <span class="comment">//int nx;                          // number of state variables</span>
<a name="l00391"></a>00391     <span class="comment">//int nz;                        // number of state event indicators                </span>
<a name="l00392"></a>00392     <span class="comment">//int nz = 0;                      // number of state event indicators                  // Zuo: no state event in co-sim V1.0</span>
<a name="l00393"></a>00393     <span class="comment">//double *x;                       // continuous states</span>
<a name="l00394"></a>00394     <span class="comment">//double *xdot;                    // the crresponding derivatives in same order</span>
<a name="l00395"></a>00395     <span class="comment">//double *z = NULL;                // state event indicators                            // Zuo: no state event in co-sim</span>
<a name="l00396"></a>00396     <span class="comment">//double *prez = NULL;             // previous values of state event indicators         // Zuo: no state event in co-sim</span>
<a name="l00397"></a>00397     <span class="comment">//fmiEventInfo eventInfo;          // updated by calls to initialize and eventUpdate    // Zuo: no state event in co-sim</span>
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <a class="code" href="structModelDescription.html">ModelDescription</a>* md;            <span class="comment">// handle to the parsed XML file        </span>
<a name="l00400"></a>00400     <span class="keyword">const</span> <span class="keywordtype">char</span>* guid;                <span class="comment">// global unique id of the fmu</span>
<a name="l00401"></a>00401     <a class="code" href="structfmiCallbackFunctions.html">fmiCallbackFunctions</a> callbacks;  <span class="comment">// called by the model during simulation</span>
<a name="l00402"></a>00402     <a class="code" href="common_2fmiModelTypes_8h.html#a1366654759c8a8554dbc30b433dfa082">fmiComponent</a> c;                  <span class="comment">// instance of the fmu </span>
<a name="l00403"></a>00403     <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> fmiFlag;               <span class="comment">// return code of the fmu functions</span>
<a name="l00404"></a>00404     <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> t0 = 0;                  <span class="comment">// start time</span>
<a name="l00405"></a>00405     <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> toleranceControlled = <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>;
<a name="l00406"></a>00406     <span class="keywordtype">int</span> nSteps = 0;
<a name="l00407"></a>00407     <span class="comment">//int nTimeEvents = 0;</span>
<a name="l00408"></a>00408     <span class="comment">//int nStepEvents = 0;</span>
<a name="l00409"></a>00409     <span class="comment">//int nStateEvents = 0;</span>
<a name="l00410"></a>00410     FILE* file;
<a name="l00411"></a>00411 
<a name="l00412"></a>00412     <a class="code" href="common_2fmiModelTypes_8h.html#a391754b90ab44cfcc77cd56acebeb657">fmiValueReference</a> vr;           <span class="comment">// Zuo: add it to get value reference for variables</span>
<a name="l00413"></a>00413     <a class="code" href="structScalarVariable.html">ScalarVariable</a>** vars = fmu-&gt;<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>-&gt;<a class="code" href="structModelDescription.html#a06f6c51301bd9921b391a7b7584b945e">modelVariables</a>;      <span class="comment">// Zuo: add it to get variables</span>
<a name="l00414"></a>00414     <span class="keywordtype">int</span> k;                          <span class="comment">// Zuo: add a counter for variables</span>
<a name="l00415"></a>00415     <a class="code" href="common_2fmiModelTypes_8h.html#af2752ab4d1cc9e3e45776205e548e053">fmiReal</a> rx, ry;                 <span class="comment">// Zuo: add real variables for input and output</span>
<a name="l00416"></a>00416     <a class="code" href="common_2fmiModelTypes_8h.html#aa25f3f3cbdc012475221ef377f84958c">fmiInteger</a> ix, iy;              <span class="comment">// Zuo: add integer variables for input and output</span>
<a name="l00417"></a>00417     <a class="code" href="common_2fmiModelTypes_8h.html#ae77735155c1e8ae72bacb888ddb0d77d">fmiBoolean</a> bx, by;              <span class="comment">// Zuo: add boolean variables for input and output</span>
<a name="l00418"></a>00418     <a class="code" href="common_2fmiModelTypes_8h.html#a18646afb794286a4dac9a76721d83253">fmiString</a> sx, sy;               <span class="comment">// Zuo: add string variables for input and output</span>
<a name="l00419"></a>00419     <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47">fmiStatus</a> status;               <span class="comment">// Zuo: add stauus for fmi</span>
<a name="l00420"></a>00420 
<a name="l00421"></a>00421     <span class="comment">//printf(&quot;Start simulate!\n&quot;);              // Zuo</span>
<a name="l00422"></a>00422     <span class="comment">// instantiate the fmu</span>
<a name="l00423"></a>00423     md = fmu-&gt;<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>;
<a name="l00424"></a>00424     guid = <a class="code" href="xml__parser__cosim_8c.html#a4173c22c77f0b3fd0a756c939f018010" title="Low-level functions for inspecting the model description.">getString</a>(md, <a class="code" href="xml__parser__cosim_8h.html#a59159c2e4de0af530912e1e58c84bacfa9066cd95bca58814dcf8f57f555a98c5">att_guid</a>);
<a name="l00425"></a>00425     <span class="comment">//  printf(&quot;Got GUID = %s!\n&quot;, guid);       // Zuo</span>
<a name="l00426"></a>00426     callbacks.<a class="code" href="structfmiCallbackFunctions.html#aaeb10a034501d84fb5060606bde1e72f">logger</a> = <a class="code" href="demo_2main_8c.html#a9e78dd3ae3cc7c1bf240155eb6c13114">fmuLogger</a>;
<a name="l00427"></a>00427     callbacks.<a class="code" href="structfmiCallbackFunctions.html#a4eef008ee9b76ca12ef68ae30c55245a">allocateMemory</a> = calloc;
<a name="l00428"></a>00428     callbacks.<a class="code" href="structfmiCallbackFunctions.html#a2f94c79583eafe2e96baf965bcb4727a">freeMemory</a> = free;
<a name="l00429"></a>00429     <span class="comment">//  printf(&quot;Got callbacks!\n&quot;);                 // Zuo</span>
<a name="l00430"></a>00430     <span class="comment">//  printf(&quot;Model Identifer is %s\n&quot;, getModelIdentifier(md));</span>
<a name="l00431"></a>00431     <span class="comment">//c = fmu-&gt;instantiateModel(getModelIdentifier(md), guid, callbacks, loggingOn);    // Zuo: definition in model-ex V1.0</span>
<a name="l00432"></a>00432     c = fmu-&gt;<a class="code" href="structFMU.html#a5ab97d79f03f2a4a40b51804e738e390">instantiateSlave</a>(<a class="code" href="xml__parser__cosim_8c.html#aef3634637021d01f8ea8d5765455a01b">getModelIdentifier</a>(md), guid, <span class="stringliteral">&quot;Model1&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, 10, <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>, <a class="code" href="common_2fmiModelTypes_8h.html#a82631d8d88db8e9a7d35373ac85f4d0f">fmiFalse</a>, callbacks, loggingOn);    <span class="comment">// Zuo: definition in co-sim V1.0</span>
<a name="l00433"></a>00433         <span class="comment">//printf(&quot;Instantiated Models!\n&quot;);     // Zuo: model-ex</span>
<a name="l00434"></a>00434         <span class="comment">//printf(&quot;Instantiated Slaves!\n&quot;);     // Zuo: co-sim</span>
<a name="l00435"></a>00435     <span class="keywordflow">if</span> (!c) <span class="keywordflow">return</span> <a class="code" href="demo_2main_8c.html#a47f91788e39f5b8cd0e55c08426100ef">error</a>(<span class="stringliteral">&quot;could not instantiate model&quot;</span>);
<a name="l00436"></a>00436     
<a name="l00437"></a>00437     <span class="comment">// allocate memory      </span>
<a name="l00438"></a>00438     <span class="comment">//printf(&quot;start to allocate memory!\n&quot;);</span>
<a name="l00439"></a>00439     <span class="comment">//nx = getNumberOfStates(md);</span>
<a name="l00440"></a>00440     <span class="comment">//printf(&quot;Got number of states!\n&quot;);</span>
<a name="l00441"></a>00441     <span class="comment">//nz = getNumberOfEventIndicators(md);      // Zuo: not in co-sim V1.0</span>
<a name="l00442"></a>00442     <span class="comment">//printf(&quot;Got number of envent!\n&quot;);</span>
<a name="l00443"></a>00443     <span class="comment">//x    = (double *) calloc(nx, sizeof(double));</span>
<a name="l00444"></a>00444     <span class="comment">//xdot = (double *) calloc(nx, sizeof(double));</span>
<a name="l00445"></a>00445     
<a name="l00446"></a>00446     <span class="comment">// Zuo: no event in co-sim V1.0</span>
<a name="l00447"></a>00447     <span class="comment">/*if (nz&gt;0) {</span>
<a name="l00448"></a>00448 <span class="comment">        z    =  (double *) calloc(nz, sizeof(double));</span>
<a name="l00449"></a>00449 <span class="comment">        prez =  (double *) calloc(nz, sizeof(double));</span>
<a name="l00450"></a>00450 <span class="comment">    }*/</span>
<a name="l00451"></a>00451 
<a name="l00452"></a>00452     <span class="comment">//if (!x || !xdot || nz&gt;0 &amp;&amp; (!z || !prez)) return error(&quot;out of memory&quot;);  </span>
<a name="l00453"></a>00453     <span class="comment">//if (!x || !xdot) return error(&quot;out of memory&quot;);               // Zuo: no event in co-sim V1.0</span>
<a name="l00454"></a>00454     <span class="comment">//  printf(&quot;allocated memory!\n&quot;);</span>
<a name="l00455"></a>00455 
<a name="l00456"></a>00456     <span class="comment">// open result file</span>
<a name="l00457"></a>00457     <span class="keywordflow">if</span> (!(file=fopen(<a class="code" href="demo_2main_8c.html#a920b88f3cbaf43363c442b21f08e007d">RESULT_FILE</a>, <span class="stringliteral">&quot;w&quot;</span>))) {
<a name="l00458"></a>00458         printf(<span class="stringliteral">&quot;could not write %s because:\n&quot;</span>, <a class="code" href="demo_2main_8c.html#a920b88f3cbaf43363c442b21f08e007d">RESULT_FILE</a>);
<a name="l00459"></a>00459         printf(<span class="stringliteral">&quot;    %s\n&quot;</span>, strerror(errno));
<a name="l00460"></a>00460         <span class="keywordflow">return</span> 0; <span class="comment">// failure</span>
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462     printf(<span class="stringliteral">&quot;Opened results file!\n&quot;</span>);    
<a name="l00463"></a>00463 
<a name="l00464"></a>00464     <span class="comment">// set the start time and initialize</span>
<a name="l00465"></a>00465     time = t0;
<a name="l00466"></a>00466     <span class="comment">//fmiFlag =  fmu-&gt;setTime(c, t0);                                   // Zuo: not in co-sim V1.0</span>
<a name="l00467"></a>00467     <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not set time&quot;);     </span>
<a name="l00468"></a>00468 
<a name="l00469"></a>00469     printf(<span class="stringliteral">&quot;start to initialize fmu!\n&quot;</span>);   <span class="comment">// Zuo </span>
<a name="l00470"></a>00470     <span class="comment">//fmiFlag =  fmu-&gt;initialize(c, toleranceControlled, t0, &amp;eventInfo);   // Zuo: definition in model-ex V1.0 </span>
<a name="l00471"></a>00471     fmiFlag =  fmu-&gt;<a class="code" href="structFMU.html#a6044130298cf303c1a8b600744c56898">initializeSlave</a>(c, t0, <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>, tEnd);      <span class="comment">// Zuo: defintion in co-sim V1.0</span>
<a name="l00472"></a>00472     <span class="comment">//printf(&quot;Initialized fmu!\n&quot;);</span>
<a name="l00473"></a>00473     <span class="keywordflow">if</span> (fmiFlag &gt; <a class="code" href="fmiFunctions_8h.html#a87d5b10a693a50e88c6c5a3b91733f47aba27e6f8de07b51b59b2e849e529dd64">fmiWarning</a>)  <a class="code" href="demo_2main_8c.html#a47f91788e39f5b8cd0e55c08426100ef">error</a>(<span class="stringliteral">&quot;could not initialize model&quot;</span>);
<a name="l00474"></a>00474     
<a name="l00475"></a>00475     <span class="comment">// Zuo: no event in co-sim V1.0</span>
<a name="l00476"></a>00476     <span class="comment">/*if (eventInfo.terminateSimulation) {</span>
<a name="l00477"></a>00477 <span class="comment">        printf(&quot;model requested termination at init&quot;);</span>
<a name="l00478"></a>00478 <span class="comment">        tEnd = time;</span>
<a name="l00479"></a>00479 <span class="comment">    }*/</span>
<a name="l00480"></a>00480   
<a name="l00481"></a>00481     <span class="comment">// output solution for time t0 </span>
<a name="l00482"></a>00482     <a class="code" href="demo_2main_8c.html#a426743b9c0f10d3888166a058c126bc5">outputRow</a>(fmu, c, t0, file, separator, TRUE);  <span class="comment">// output column names</span>
<a name="l00483"></a>00483     <a class="code" href="demo_2main_8c.html#a426743b9c0f10d3888166a058c126bc5">outputRow</a>(fmu, c, t0, file, separator, FALSE); <span class="comment">// Zuo: output initla value of fmu </span>
<a name="l00484"></a>00484 
<a name="l00485"></a>00485     <span class="comment">//printf(&quot;Enter in simulation loop\n&quot;);     // Zuo</span>
<a name="l00486"></a>00486     <span class="comment">// enter the simulation loop</span>
<a name="l00487"></a>00487     <span class="keywordflow">while</span> (time &lt; tEnd) {
<a name="l00488"></a>00488      <span class="comment">// get current state and derivatives</span>
<a name="l00489"></a>00489      <span class="comment">//fmiFlag = fmu-&gt;getContinuousStates(c, x, nx);        // Zuo: not in co-sim V1.0</span>
<a name="l00490"></a>00490      <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not retrieve states&quot;);</span>
<a name="l00491"></a>00491      <span class="comment">//fmiFlag = fmu-&gt;getDerivatives(c, xdot, nx);          // Zuo: not in co-sim V1.0</span>
<a name="l00492"></a>00492      <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not retrieve derivatives&quot;);</span>
<a name="l00493"></a>00493      <span class="comment">//printf(&quot;Got current state and derivatives\n&quot;);       </span>
<a name="l00494"></a>00494 
<a name="l00495"></a>00495 
<a name="l00496"></a>00496 
<a name="l00497"></a>00497      <span class="comment">// Zuo: no event in co-sim V1.0</span>
<a name="l00498"></a>00498      <span class="comment">//timeEvent = eventInfo.upcomingTimeEvent &amp;&amp; eventInfo.nextEventTime &lt; time;     </span>
<a name="l00499"></a>00499      <span class="comment">//if (timeEvent) time = eventInfo.nextEventTime;</span>
<a name="l00500"></a>00500 
<a name="l00501"></a>00501      <span class="comment">//dt = time - tPre; </span>
<a name="l00502"></a>00502      <span class="comment">// fmiFlag = fmu-&gt;setTime(c, time);                            // Zuo: not in co-sim V1.0</span>
<a name="l00503"></a>00503      <span class="comment">// if (fmiFlag &gt; fmiWarning) error(&quot;could not set time&quot;);      </span>
<a name="l00504"></a>00504      
<a name="l00505"></a>00505 
<a name="l00506"></a>00506      <span class="comment">// perform one step</span>
<a name="l00507"></a>00507      <span class="comment">//for (i=0; i&lt;nx; i++) x[i] += dt*xdot[i]; // forward Euler method</span>
<a name="l00508"></a>00508      <span class="comment">//fmiFlag = fmu-&gt;setContinuousStates(c, x, nx);                    // Zuo: not in V1.0</span>
<a name="l00509"></a>00509      <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not set states&quot;);  </span>
<a name="l00510"></a>00510      <span class="keywordflow">if</span> (loggingOn) printf(<span class="stringliteral">&quot;Step %d to t=%.4f\n&quot;</span>, nSteps, time);        <span class="comment">// Zuo: change to better format</span>
<a name="l00511"></a>00511     
<a name="l00512"></a>00512 
<a name="l00513"></a>00513     <span class="comment">// Zuo: Add code to get values of output variables  </span>
<a name="l00514"></a>00514     <span class="keywordflow">for</span> (k=0; vars[k]; k++) {
<a name="l00515"></a>00515         <a class="code" href="structScalarVariable.html">ScalarVariable</a>* sv = vars[k];
<a name="l00516"></a>00516         <span class="comment">//printf(&quot;k=%d\n&quot;, k);</span>
<a name="l00517"></a>00517         <span class="keywordflow">if</span> (<a class="code" href="xml__parser__cosim_8c.html#ad6d56a92ea398f84c24ae5328a0bcebd" title="Get alias.">getAlias</a>(sv)!=<a class="code" href="xml__parser__cosim_8h.html#aea7ea6e61f6b28ce9df951528de712baa718ec103eaae3fcb5dab6d9076dd7e4b">enu_noAlias</a>) <span class="keywordflow">continue</span>;
<a name="l00518"></a>00518         <span class="keywordflow">if</span> (<a class="code" href="xml__parser__cosim_8c.html#a55b615252e4dc50369cdf368c526cd38" title="Get causality.">getCausality</a>(sv) != <a class="code" href="xml__parser__cosim_8h.html#aea7ea6e61f6b28ce9df951528de712baaa231247b37391aface4728a824beeaf1">enu_output</a>) <span class="keywordflow">continue</span>; <span class="comment">// Zuo: only get output variable</span>
<a name="l00519"></a>00519 
<a name="l00520"></a>00520         vr = <a class="code" href="xml__parser__cosim_8c.html#ade04f5555b0436f91e98211ba3bcb9e2" title="Get value reference.">getValueReference</a>(sv);
<a name="l00521"></a>00521         
<a name="l00522"></a>00522         <span class="keywordflow">switch</span> (sv-&gt;<a class="code" href="structScalarVariable.html#a3563abf1de77f1e99c86851aefaa7650">typeSpec</a>-&gt;<a class="code" href="structElement.html#a7b29ec1313f99517acb89211871fdd34">type</a>){
<a name="l00523"></a>00523             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fabb70f90bc7f0e801e505879c40002c9e">elm_Real</a>:
<a name="l00524"></a>00524                 fmu-&gt;<a class="code" href="structFMU.html#a36550c7f815289d8dea04ed0c6e01e70">getReal</a>(c, &amp;vr, 1, &amp;ry); 
<a name="l00525"></a>00525                 rx = ry + 0.1;  <span class="comment">// Zuo: operations to vairbales done by master program</span>
<a name="l00526"></a>00526                 <span class="keywordflow">break</span>;
<a name="l00527"></a>00527             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa31fb1361c495778fa9e495771fcaa94c">elm_Integer</a>:
<a name="l00528"></a>00528                 fmu-&gt;<a class="code" href="structFMU.html#a45a291781f84f79641ad383bdedc1f02">getInteger</a>(c, &amp;vr, 1, &amp;iy);  
<a name="l00529"></a>00529                 <span class="keywordflow">break</span>;
<a name="l00530"></a>00530             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa493527b21665f01720a5b77c7cc78368">elm_Boolean</a>:
<a name="l00531"></a>00531                 fmu-&gt;<a class="code" href="structFMU.html#a2b1333b2141c2c2bfdd14b31c921f011">getBoolean</a>(c, &amp;vr, 1, &amp;by);
<a name="l00532"></a>00532                 <span class="keywordflow">break</span>;
<a name="l00533"></a>00533             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa68516efd31d0e86b985b8d691622307a">elm_String</a>:
<a name="l00534"></a>00534                 fmu-&gt;<a class="code" href="structFMU.html#a8136a2e05875ccff548932c6909525eb">getString</a>(c, &amp;vr, 1, &amp;sy);
<a name="l00535"></a>00535                 <span class="keywordflow">break</span>;
<a name="l00536"></a>00536            }
<a name="l00537"></a>00537       } <span class="comment">// Zuo: End of added for-loop</span>
<a name="l00538"></a>00538     
<a name="l00539"></a>00539      <span class="comment">// Zuo: Add code to set variables</span>
<a name="l00540"></a>00540      <span class="keywordflow">for</span> (k=0; vars[k]; k++) {
<a name="l00541"></a>00541         <a class="code" href="structScalarVariable.html">ScalarVariable</a>* sv = vars[k];
<a name="l00542"></a>00542         <span class="keywordflow">if</span> (<a class="code" href="xml__parser__cosim_8c.html#ad6d56a92ea398f84c24ae5328a0bcebd" title="Get alias.">getAlias</a>(sv)!=<a class="code" href="xml__parser__cosim_8h.html#aea7ea6e61f6b28ce9df951528de712baa718ec103eaae3fcb5dab6d9076dd7e4b">enu_noAlias</a>) <span class="keywordflow">continue</span>;
<a name="l00543"></a>00543         <span class="keywordflow">if</span> (<a class="code" href="xml__parser__cosim_8c.html#a55b615252e4dc50369cdf368c526cd38" title="Get causality.">getCausality</a>(sv) != <a class="code" href="xml__parser__cosim_8h.html#aea7ea6e61f6b28ce9df951528de712baa4399159e75de569961fcded50c47a55f">enu_input</a>) <span class="keywordflow">continue</span>; <span class="comment">// Zuo: only set input variable</span>
<a name="l00544"></a>00544         vr = <a class="code" href="xml__parser__cosim_8c.html#ade04f5555b0436f91e98211ba3bcb9e2" title="Get value reference.">getValueReference</a>(sv);
<a name="l00545"></a>00545         <span class="keywordflow">switch</span> (sv-&gt;<a class="code" href="structScalarVariable.html#a3563abf1de77f1e99c86851aefaa7650">typeSpec</a>-&gt;<a class="code" href="structElement.html#a7b29ec1313f99517acb89211871fdd34">type</a>){
<a name="l00546"></a>00546             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fabb70f90bc7f0e801e505879c40002c9e">elm_Real</a>:
<a name="l00547"></a>00547                 fmu-&gt;<a class="code" href="structFMU.html#a8aa58f5bc3297c4d5c053b2e11dae62b">setReal</a>(c, &amp;vr, 1, &amp;rx);               
<a name="l00548"></a>00548                 <span class="keywordflow">break</span>;
<a name="l00549"></a>00549             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa31fb1361c495778fa9e495771fcaa94c">elm_Integer</a>:
<a name="l00550"></a>00550                 fmu-&gt;<a class="code" href="structFMU.html#a4c10c8a4c287ebb6f6b7e1ced3add116">setInteger</a>(c, &amp;vr, 1, &amp;ix);  
<a name="l00551"></a>00551                 <span class="keywordflow">break</span>;
<a name="l00552"></a>00552             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa493527b21665f01720a5b77c7cc78368">elm_Boolean</a>:
<a name="l00553"></a>00553                 fmu-&gt;<a class="code" href="structFMU.html#a6966f252a65e09ee7dacaeb741123a99">setBoolean</a>(c, &amp;vr, 1, &amp;bx);
<a name="l00554"></a>00554                 <span class="keywordflow">break</span>;
<a name="l00555"></a>00555             <span class="keywordflow">case</span> <a class="code" href="xml__parser__cosim_8h.html#a62c25c295217ec85ef07f131f15f668fa68516efd31d0e86b985b8d691622307a">elm_String</a>:
<a name="l00556"></a>00556                 fmu-&gt;<a class="code" href="structFMU.html#a7cf06aa56adabb52a81292194d67dbb5">setString</a>(c, &amp;vr, 1, &amp;sx);
<a name="l00557"></a>00557                 <span class="keywordflow">break</span>;
<a name="l00558"></a>00558         }        
<a name="l00559"></a>00559     } <span class="comment">// Zuo: End of added for-loop</span>
<a name="l00560"></a>00560     
<a name="l00561"></a>00561     
<a name="l00562"></a>00562     status = fmu-&gt;<a class="code" href="structFMU.html#aed7bffd7a6a33108e34874438db16fd6">doStep</a>(c, time, h, <a class="code" href="common_2fmiModelTypes_8h.html#a052632dbaeecbdda8ada563432e55547">fmiTrue</a>);  <span class="comment">// Zuo: advance to next time step</span>
<a name="l00563"></a>00563     <span class="comment">// terminate this row</span>
<a name="l00564"></a>00564     fprintf(file, <span class="stringliteral">&quot;\n&quot;</span>); 
<a name="l00565"></a>00565 
<a name="l00566"></a>00566 
<a name="l00567"></a>00567      
<a name="l00568"></a>00568      <span class="comment">// Check for step event, e.g. dynamic state selection</span>
<a name="l00569"></a>00569      <span class="comment">//fmiFlag = fmu-&gt;completedIntegratorStep(c, &amp;stepEvent);                       // Zuo: not in co-sim V1.0 </span>
<a name="l00570"></a>00570      <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not complete intgrator step&quot;);  </span>
<a name="l00571"></a>00571 
<a name="l00572"></a>00572      <span class="comment">// Zuo: events is not supported by co-sim V1.0</span>
<a name="l00573"></a>00573      <span class="comment">// Check for state event</span>
<a name="l00574"></a>00574      <span class="comment">//for (i=0; i&lt;nz; i++) prez[i] = z[i]; </span>
<a name="l00575"></a>00575      <span class="comment">//fmiFlag = fmu-&gt;getEventIndicators(c, z, nz);         </span>
<a name="l00576"></a>00576      <span class="comment">//if (fmiFlag &gt; fmiWarning) return error(&quot;could not retrieve event indicators&quot;);</span>
<a name="l00577"></a>00577      <span class="comment">//stateEvent = FALSE;</span>
<a name="l00578"></a>00578      <span class="comment">//for (i=0; i&lt;nz; i++) </span>
<a name="l00579"></a>00579      <span class="comment">//    stateEvent = stateEvent || (prez[i] * z[i] &lt; 0);  </span>
<a name="l00580"></a>00580      
<a name="l00581"></a>00581      <span class="comment">// Zuo: events is not supported by co-sim V1.0</span>
<a name="l00582"></a>00582      <span class="comment">// handle events</span>
<a name="l00583"></a>00583      <span class="comment">/*if (timeEvent || stateEvent || stepEvent) {</span>
<a name="l00584"></a>00584 <span class="comment">        </span>
<a name="l00585"></a>00585 <span class="comment">        if (timeEvent) {</span>
<a name="l00586"></a>00586 <span class="comment">            nTimeEvents++;</span>
<a name="l00587"></a>00587 <span class="comment">            if (loggingOn) printf(&quot;time event at t=%.16g\n&quot;, time);</span>
<a name="l00588"></a>00588 <span class="comment">        }</span>
<a name="l00589"></a>00589 <span class="comment">        if (stateEvent) {</span>
<a name="l00590"></a>00590 <span class="comment">            nStateEvents++;</span>
<a name="l00591"></a>00591 <span class="comment">            if (loggingOn) for (i=0; i&lt;nz; i++)</span>
<a name="l00592"></a>00592 <span class="comment">                printf(&quot;state event %s z[%d] at t=%.16g\n&quot;, </span>
<a name="l00593"></a>00593 <span class="comment">                        (prez[i]&gt;0 &amp;&amp; z[i]&lt;0) ? &quot;-\\-&quot; : &quot;-/-&quot;, i, time);</span>
<a name="l00594"></a>00594 <span class="comment">        }</span>
<a name="l00595"></a>00595 <span class="comment">        if (stepEvent) {</span>
<a name="l00596"></a>00596 <span class="comment">            nStepEvents++;</span>
<a name="l00597"></a>00597 <span class="comment">            if (loggingOn) printf(&quot;step event at t=%.16g\n&quot;, time);</span>
<a name="l00598"></a>00598 <span class="comment">        }</span>
<a name="l00599"></a>00599 <span class="comment">            </span>
<a name="l00600"></a>00600 <span class="comment">        // event iteration in one step, ignoring intermediate results</span>
<a name="l00601"></a>00601 <span class="comment">        //fmiFlag = fmu-&gt;eventUpdate(c, fmiFalse, &amp;eventInfo);</span>
<a name="l00602"></a>00602 <span class="comment">        //if (fmiFlag &gt; fmiWarning) return error(&quot;could not perform event update&quot;);</span>
<a name="l00603"></a>00603 <span class="comment">        </span>
<a name="l00604"></a>00604 <span class="comment">        // terminate simulation, if requested by the model</span>
<a name="l00605"></a>00605 <span class="comment">        if (eventInfo.terminateSimulation) {</span>
<a name="l00606"></a>00606 <span class="comment">            printf(&quot;model requested termination at t=%.16g\n&quot;, time);</span>
<a name="l00607"></a>00607 <span class="comment">            break; // success</span>
<a name="l00608"></a>00608 <span class="comment">        }</span>
<a name="l00609"></a>00609 <span class="comment"></span>
<a name="l00610"></a>00610 <span class="comment">        // check for change of value of states</span>
<a name="l00611"></a>00611 <span class="comment">        if (eventInfo.stateValuesChanged &amp;&amp; loggingOn) {</span>
<a name="l00612"></a>00612 <span class="comment">            printf(&quot;state values changed at t=%.16g\n&quot;, time);</span>
<a name="l00613"></a>00613 <span class="comment">        }</span>
<a name="l00614"></a>00614 <span class="comment">        </span>
<a name="l00615"></a>00615 <span class="comment">        // check for selection of new state variables</span>
<a name="l00616"></a>00616 <span class="comment">        if (eventInfo.stateValueReferencesChanged &amp;&amp; loggingOn) {</span>
<a name="l00617"></a>00617 <span class="comment">            printf(&quot;new state variables selected at t=%.16g\n&quot;, time);</span>
<a name="l00618"></a>00618 <span class="comment">        }</span>
<a name="l00619"></a>00619 <span class="comment">       </span>
<a name="l00620"></a>00620 <span class="comment">     } // if event</span>
<a name="l00621"></a>00621 <span class="comment">     */</span>
<a name="l00622"></a>00622      time = min(time+h, tEnd);
<a name="l00623"></a>00623      <a class="code" href="demo_2main_8c.html#a426743b9c0f10d3888166a058c126bc5">outputRow</a>(fmu, c, time, file, separator, FALSE); <span class="comment">// output values for this step</span>
<a name="l00624"></a>00624      nSteps++;
<a name="l00625"></a>00625      <span class="comment">// advance time</span>
<a name="l00626"></a>00626      <span class="comment">//tPre = time;          </span>
<a name="l00627"></a>00627   } <span class="comment">// while  </span>
<a name="l00628"></a>00628 
<a name="l00629"></a>00629   <span class="comment">// cleanup</span>
<a name="l00630"></a>00630   fclose(file);
<a name="l00631"></a>00631   <span class="comment">//if (x!=NULL) free(x);</span>
<a name="l00632"></a>00632   <span class="comment">//if (xdot!= NULL) free(xdot);</span>
<a name="l00633"></a>00633   <span class="comment">//if (z!= NULL) free(z);</span>
<a name="l00634"></a>00634   <span class="comment">//if (prez!= NULL) free(prez);</span>
<a name="l00635"></a>00635 
<a name="l00636"></a>00636   <span class="comment">// print simulation summary </span>
<a name="l00637"></a>00637   <span class="keywordflow">if</span> (loggingOn) printf(<span class="stringliteral">&quot;Step %d to t=%.4f\n&quot;</span>, nSteps, time);       <span class="comment">// Zuo: change to better format</span>
<a name="l00638"></a>00638   printf(<span class="stringliteral">&quot;Simulation from %g to %g terminated successful\n&quot;</span>, t0, tEnd);
<a name="l00639"></a>00639   printf(<span class="stringliteral">&quot;  steps ............ %d\n&quot;</span>, nSteps);
<a name="l00640"></a>00640   printf(<span class="stringliteral">&quot;  fixed step size .. %g\n&quot;</span>, h);
<a name="l00641"></a>00641   <span class="comment">//printf(&quot;  time events ...... %d\n&quot;, nTimeEvents);   // Zuo: no events in co-sim V1.0</span>
<a name="l00642"></a>00642   <span class="comment">//printf(&quot;  state events ..... %d\n&quot;, nStateEvents);</span>
<a name="l00643"></a>00643   <span class="comment">//printf(&quot;  step events ...... %d\n&quot;, nStepEvents);</span>
<a name="l00644"></a>00644 
<a name="l00645"></a>00645   <span class="keywordflow">return</span> 1; <span class="comment">// success</span>
<a name="l00646"></a>00646 }
<a name="l00647"></a>00647 
<a name="l00648"></a><a class="code" href="demo_2main_8c.html#a9480b650b2d4d1b76ffa249e46ad293d">00648</a> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="demo_2main_8c.html#a9480b650b2d4d1b76ffa249e46ad293d">printHelp</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmusim) {
<a name="l00649"></a>00649     printf(<span class="stringliteral">&quot;command syntax: %s &lt;model.fmu&gt; &lt;tEnd&gt; &lt;h&gt; &lt;loggingOn&gt; &lt;csv separator&gt;\n&quot;</span>, fmusim);
<a name="l00650"></a>00650     printf(<span class="stringliteral">&quot;   &lt;model.fmu&gt; .... path to FMU, relative to current dir or absolute, required\n&quot;</span>);
<a name="l00651"></a>00651     printf(<span class="stringliteral">&quot;   &lt;tEnd&gt; ......... end  time of simulation, optional, defaults to 1.0 sec\n&quot;</span>);
<a name="l00652"></a>00652     printf(<span class="stringliteral">&quot;   &lt;h&gt; ............ step size of simulation, optional, defaults to 0.1 sec\n&quot;</span>);
<a name="l00653"></a>00653     printf(<span class="stringliteral">&quot;   &lt;loggingOn&gt; .... 1 to activate logging,   optional, defaults to 0\n&quot;</span>);
<a name="l00654"></a>00654     printf(<span class="stringliteral">&quot;   &lt;csv separator&gt;. column separator char in csv file, optional, defaults to &#39;;&#39;\n&quot;</span>);
<a name="l00655"></a>00655 }
<a name="l00656"></a>00656 
<a name="l00657"></a><a class="code" href="demo_2main_8c.html#a0ddf1224851353fc92bfbff6f499fa97">00657</a> <span class="keywordtype">int</span> <a class="code" href="demo_2main_8c.html#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[]) {
<a name="l00658"></a>00658     <span class="keyword">const</span> <span class="keywordtype">char</span>* fmuFileName;
<a name="l00659"></a>00659     <span class="keywordtype">char</span>* fmuPath;
<a name="l00660"></a>00660     <span class="keywordtype">char</span>* tmpPath;
<a name="l00661"></a>00661     <span class="keywordtype">char</span>* xmlPath;
<a name="l00662"></a>00662     <span class="keywordtype">char</span>* dllPath;
<a name="l00663"></a>00663     
<a name="l00664"></a>00664     <span class="comment">// define default argument values</span>
<a name="l00665"></a>00665     <span class="keywordtype">double</span> tEnd = 1.0;
<a name="l00666"></a>00666     <span class="keywordtype">double</span> h=0.1;
<a name="l00667"></a>00667     <span class="keywordtype">int</span> loggingOn = 0;
<a name="l00668"></a>00668     <span class="comment">//char csv_separator = &#39;;&#39;;</span>
<a name="l00669"></a>00669     <span class="keywordtype">char</span> csv_separator = <span class="charliteral">&#39;,&#39;</span>;  <span class="comment">// Zuo change the separator to , </span>
<a name="l00670"></a>00670 
<a name="l00671"></a>00671     <span class="comment">// parse command line arguments</span>
<a name="l00672"></a>00672     <span class="keywordflow">if</span> (argc&gt;1) {
<a name="l00673"></a>00673         fmuFileName = argv[1];
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675     <span class="keywordflow">else</span> {
<a name="l00676"></a>00676         printf(<span class="stringliteral">&quot;error: no fmu file\n&quot;</span>);
<a name="l00677"></a>00677         <a class="code" href="demo_2main_8c.html#a9480b650b2d4d1b76ffa249e46ad293d">printHelp</a>(argv[0]);
<a name="l00678"></a>00678         exit(EXIT_FAILURE);
<a name="l00679"></a>00679     }
<a name="l00680"></a>00680     <span class="keywordflow">if</span> (argc&gt;2) {
<a name="l00681"></a>00681         <span class="keywordflow">if</span> (sscanf(argv[2],<span class="stringliteral">&quot;%lf&quot;</span>, &amp;tEnd) != 1) {
<a name="l00682"></a>00682             printf(<span class="stringliteral">&quot;error: The given end time (%s) is not a number\n&quot;</span>, argv[2]);
<a name="l00683"></a>00683             exit(EXIT_FAILURE);
<a name="l00684"></a>00684         }
<a name="l00685"></a>00685     }
<a name="l00686"></a>00686     <span class="keywordflow">if</span> (argc&gt;3) {
<a name="l00687"></a>00687         <span class="keywordflow">if</span> (sscanf(argv[3],<span class="stringliteral">&quot;%lf&quot;</span>, &amp;h) != 1) {
<a name="l00688"></a>00688             printf(<span class="stringliteral">&quot;error: The given stepsize (%s) is not a number\n&quot;</span>, argv[3]);
<a name="l00689"></a>00689             exit(EXIT_FAILURE);
<a name="l00690"></a>00690         }
<a name="l00691"></a>00691     }
<a name="l00692"></a>00692     <span class="keywordflow">if</span> (argc&gt;4) {
<a name="l00693"></a>00693         <span class="keywordflow">if</span> (sscanf(argv[4],<span class="stringliteral">&quot;%d&quot;</span>, &amp;loggingOn) != 1 || loggingOn&lt;0 || loggingOn&gt;1) {
<a name="l00694"></a>00694             printf(<span class="stringliteral">&quot;error: The given logging flag (%s) is not boolean\n&quot;</span>, argv[4]);
<a name="l00695"></a>00695             exit(EXIT_FAILURE);
<a name="l00696"></a>00696         }
<a name="l00697"></a>00697     }
<a name="l00698"></a>00698     <span class="keywordflow">if</span> (argc&gt;5) {
<a name="l00699"></a>00699         <span class="keywordflow">if</span> (strlen(argv[5]) != 1) {
<a name="l00700"></a>00700             printf(<span class="stringliteral">&quot;error: The given CSV separator char (%s) is not valid\n&quot;</span>, argv[5]);
<a name="l00701"></a>00701             exit(EXIT_FAILURE);
<a name="l00702"></a>00702         }
<a name="l00703"></a>00703         csv_separator = argv[5][0];
<a name="l00704"></a>00704     }
<a name="l00705"></a>00705     <span class="keywordflow">if</span> (argc&gt;6) {
<a name="l00706"></a>00706         printf(<span class="stringliteral">&quot;warning: Ignoring %d additional arguments: %s ...\n&quot;</span>, argc-6, argv[6]);
<a name="l00707"></a>00707         <a class="code" href="demo_2main_8c.html#a9480b650b2d4d1b76ffa249e46ad293d">printHelp</a>(argv[0]);
<a name="l00708"></a>00708     }
<a name="l00709"></a>00709 
<a name="l00710"></a>00710     <span class="comment">// get absolute path to FMU, NULL if not found</span>
<a name="l00711"></a>00711     fmuPath = <a class="code" href="demo_2main_8c.html#ae5c925502ad3bbb3b2d7095e216c837f">getFmuPath</a>(fmuFileName);
<a name="l00712"></a>00712     <span class="keywordflow">if</span> (!fmuPath) exit(EXIT_FAILURE);
<a name="l00713"></a>00713 
<a name="l00714"></a>00714     <span class="comment">// unzip the FMU to the tmpPath directory</span>
<a name="l00715"></a>00715     tmpPath = <a class="code" href="demo_2main_8c.html#a55589599a3cdf7aa53d90dfa1f5594b6">getTmpPath</a>();
<a name="l00716"></a>00716     <span class="keywordflow">if</span> (!<a class="code" href="demo_2main_8c.html#a1aa7f8ae710dc0ce318ba2049abee88f">unzip</a>(fmuPath, tmpPath)) exit(EXIT_FAILURE);
<a name="l00717"></a>00717 
<a name="l00718"></a>00718     <span class="comment">// parse tmpPath\modelDescription.xml</span>
<a name="l00719"></a>00719     xmlPath = calloc(<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>), strlen(tmpPath) + strlen(<a class="code" href="demo_2main_8c.html#a3ec6ac973634273e8ffff5a4b6de6c92">XML_FILE</a>) + 1);
<a name="l00720"></a>00720 
<a name="l00721"></a>00721     sprintf(xmlPath, <span class="stringliteral">&quot;%s%s&quot;</span>, tmpPath, <a class="code" href="demo_2main_8c.html#a3ec6ac973634273e8ffff5a4b6de6c92">XML_FILE</a>);
<a name="l00722"></a>00722     fmu.<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a> = <a class="code" href="xml__parser__cosim_8c.html#a9a5414d298c36bfedc74bbbd99f9809d" title="Parse the fmu.">parse</a>(xmlPath); <span class="comment">// Zuo: Parse only parses the model description and store in structure fmu.modelDescription</span>
<a name="l00723"></a>00723     free(xmlPath);
<a name="l00724"></a>00724     <span class="keywordflow">if</span> (!fmu.<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>) exit(EXIT_FAILURE);
<a name="l00725"></a>00725 
<a name="l00726"></a>00726     <span class="comment">// load the FMU dll</span>
<a name="l00727"></a>00727     <span class="comment">//printf(&quot;start to load .dll.\n&quot;); // Zuo</span>
<a name="l00728"></a>00728     dllPath = calloc(<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>), strlen(tmpPath) + strlen(<a class="code" href="demo_2main_8c.html#a7a5b5bdfe8aabf53edd67035decce5ae">DLL_DIR</a>) 
<a name="l00729"></a>00729             + strlen( <a class="code" href="xml__parser__cosim_8c.html#aef3634637021d01f8ea8d5765455a01b">getModelIdentifier</a>(fmu.<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>)) +  strlen(<span class="stringliteral">&quot;.dll&quot;</span>) + 1); <span class="comment">// Zuo: Allocate the memory for dllPath</span>
<a name="l00730"></a>00730     sprintf(dllPath,<span class="stringliteral">&quot;%s%s%s.dll&quot;</span>, tmpPath, <a class="code" href="demo_2main_8c.html#a7a5b5bdfe8aabf53edd67035decce5ae">DLL_DIR</a>, <a class="code" href="xml__parser__cosim_8c.html#aef3634637021d01f8ea8d5765455a01b">getModelIdentifier</a>(fmu.<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>)); 
<a name="l00731"></a>00731     <span class="keywordflow">if</span> (!<a class="code" href="demo_2main_8c.html#a38463a3da5d08ccf0c6032034fb9c173">loadDll</a>(dllPath, &amp;fmu)) exit(EXIT_FAILURE); 
<a name="l00732"></a>00732     free(dllPath);
<a name="l00733"></a>00733     free(fmuPath);
<a name="l00734"></a>00734     free(tmpPath);
<a name="l00735"></a>00735 
<a name="l00736"></a>00736     <span class="comment">// run the simulation</span>
<a name="l00737"></a>00737     printf(<span class="stringliteral">&quot;FMU Simulator: run &#39;%s&#39; from t=0..%g with step size h=%g, loggingOn=%d, csv separator=&#39;%c&#39;\n&quot;</span>, 
<a name="l00738"></a>00738             fmuFileName, tEnd, h, loggingOn, csv_separator);
<a name="l00739"></a>00739     <a class="code" href="demo_2main_8c.html#a5d6125f412e566f88d2b3359ec4ef792">simulate</a>(&amp;fmu, tEnd, h, loggingOn, csv_separator);
<a name="l00740"></a>00740     printf(<span class="stringliteral">&quot;CSV file &#39;%s&#39; written&quot;</span>, <a class="code" href="demo_2main_8c.html#a920b88f3cbaf43363c442b21f08e007d">RESULT_FILE</a>);
<a name="l00741"></a>00741 
<a name="l00742"></a>00742     <span class="comment">// release FMU </span>
<a name="l00743"></a>00743     FreeLibrary(fmu.<a class="code" href="structFMU.html#a82180963188b7fb775aabf7795ac12da">dllHandle</a>);
<a name="l00744"></a>00744     <a class="code" href="xml__parser__cosim_8c.html#aaebcecf323c362bc8d9fe1765a0586dd" title="Free element which may contain list of elements.">freeElement</a>(fmu.<a class="code" href="structFMU.html#af33bbe718a59945560e804db3ce2b32b">modelDescription</a>);
<a name="l00745"></a>00745     <span class="keywordflow">return</span> EXIT_SUCCESS;
<a name="l00746"></a>00746 }
<a name="l00747"></a>00747 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="demo_2main_8c.html">main.c</a>      </li>
      <li class="footer">Generated on Tue Oct 11 2011 11:20:02 for Functional Mockup Interface For EnergyPlus by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>

</body>
</html>
