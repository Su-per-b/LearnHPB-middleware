; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\SRI\straylight_repo\visualStudioWorkspace\zlib-1.2.6\inflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflate@@9@9 DW 010H				; `inflate'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
CONST	ENDS
PUBLIC	_inflateResetKeep@4
; Function compile flags: /Odtp /ZI
; File e:\sri\straylight_repo\visualstudioworkspace\zlib-1.2.6\inflate.c
;	COMDAT _inflateResetKeep@4
_TEXT	SEGMENT
tv86 = -72						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateResetKeep@4 PROC				; COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 106  :     struct inflate_state FAR *state;
; 107  : 
; 108  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@inflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@inflateRes
$LN2@inflateRes:
	mov	eax, -2					; fffffffeH
	jmp	$LN4@inflateRes
$LN3@inflateRes:

; 109  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 110  :     strm->total_in = strm->total_out = state->total = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], 0

; 111  :     strm->msg = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 112  :     if (state->wrap)        /* to support ill-conceived Java test suite */

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@inflateRes

; 113  :         strm->adler = state->wrap & 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], ecx
$LN1@inflateRes:

; 114  :     state->mode = HEAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0

; 115  :     state->last = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 0

; 116  :     state->havedict = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+12], 0

; 117  :     state->dmax = 32768U;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+20], 32768		; 00008000H

; 118  :     state->head = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+32], 0

; 119  :     state->hold = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+56], 0

; 120  :     state->bits = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+60], 0

; 121  :     state->lencode = state->distcode = state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx+108], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR [edx+76], eax

; 122  :     state->sane = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7104], 1

; 123  :     state->back = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], -1

; 124  :     Tracev((stderr, "inflate: reset\n"));
; 125  :     return Z_OK;

	xor	eax, eax
$LN4@inflateRes:

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateResetKeep@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateReset@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateReset@4
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateReset@4 PROC					; COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 131  :     struct inflate_state FAR *state;
; 132  : 
; 133  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@inflateRes@2
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@inflateRes@2
$LN1@inflateRes@2:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@inflateRes@2
$LN2@inflateRes@2:

; 134  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 135  :     state->wsize = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+40], 0

; 136  :     state->whave = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 137  :     state->wnext = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0

; 138  :     return inflateResetKeep(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateResetKeep@4
$LN3@inflateRes@2:

; 139  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateReset@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateReset2@8
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateReset2@8
_TEXT	SEGMENT
_state$ = -8						; size = 4
_wrap$ = -4						; size = 4
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_inflateReset2@8 PROC					; COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 145  :     int wrap;
; 146  :     struct inflate_state FAR *state;
; 147  : 
; 148  :     /* get the state */
; 149  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN7@inflateRes@3
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN8@inflateRes@3
$LN7@inflateRes@3:
	mov	eax, -2					; fffffffeH
	jmp	$LN9@inflateRes@3
$LN8@inflateRes@3:

; 150  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 151  : 
; 152  :     /* extract wrap request from windowBits parameter */
; 153  :     if (windowBits < 0) {

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN6@inflateRes@3

; 154  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 155  :         windowBits = -windowBits;

	mov	eax, DWORD PTR _windowBits$[ebp]
	neg	eax
	mov	DWORD PTR _windowBits$[ebp], eax

; 156  :     }
; 157  :     else {

	jmp	SHORT $LN5@inflateRes@3
$LN6@inflateRes@3:

; 158  :         wrap = (windowBits >> 4) + 1;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sar	eax, 4
	add	eax, 1
	mov	DWORD PTR _wrap$[ebp], eax

; 159  : #ifdef GUNZIP
; 160  :         if (windowBits < 48)

	cmp	DWORD PTR _windowBits$[ebp], 48		; 00000030H
	jge	SHORT $LN5@inflateRes@3

; 161  :             windowBits &= 15;

	mov	eax, DWORD PTR _windowBits$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _windowBits$[ebp], eax
$LN5@inflateRes@3:

; 162  : #endif
; 163  :     }
; 164  : 
; 165  :     /* set number of window bits, free window if different */
; 166  :     if (windowBits && (windowBits < 8 || windowBits > 15))

	cmp	DWORD PTR _windowBits$[ebp], 0
	je	SHORT $LN3@inflateRes@3
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN2@inflateRes@3
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN3@inflateRes@3
$LN2@inflateRes@3:

; 167  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN9@inflateRes@3
$LN3@inflateRes@3:

; 168  :     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN1@inflateRes@3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	ecx, DWORD PTR _windowBits$[ebp]
	je	SHORT $LN1@inflateRes@3

; 169  :         ZFREE(strm, state->window);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 170  :         state->window = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN1@inflateRes@3:

; 171  :     }
; 172  : 
; 173  :     /* update state and reset the rest of it */
; 174  :     state->wrap = wrap;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 175  :     state->wbits = (unsigned)windowBits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 176  :     return inflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateReset@4
$LN9@inflateRes@3:

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_inflateReset2@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_05BOAHNBIE@1?42?46?$AA@			; `string'
PUBLIC	_inflateInit2_@16
EXTRN	_zcfree:PROC
EXTRN	_zcalloc:PROC
;	COMDAT ??_C@_05BOAHNBIE@1?42?46?$AA@
CONST	SEGMENT
??_C@_05BOAHNBIE@1?42?46?$AA@ DB '1.2.6', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _inflateInit2_@16
_TEXT	SEGMENT
_state$ = -8						; size = 4
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_inflateInit2_@16 PROC					; COMDAT

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 185  :     int ret;
; 186  :     struct inflate_state FAR *state;
; 187  : 
; 188  :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
; 189  :         stream_size != (int)(sizeof(z_stream)))

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN6@inflateIni
	mov	eax, DWORD PTR _version$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR ??_C@_05BOAHNBIE@1?42?46?$AA@
	cmp	ecx, edx
	jne	SHORT $LN6@inflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN7@inflateIni
$LN6@inflateIni:

; 190  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN8@inflateIni
$LN7@inflateIni:

; 191  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN5@inflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN8@inflateIni
$LN5@inflateIni:

; 192  :     strm->msg = Z_NULL;                 /* in case we return an error */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 193  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN4@inflateIni

; 194  : #ifdef Z_SOLO
; 195  :         return Z_STREAM_ERROR;
; 196  : #else
; 197  :         strm->zalloc = zcalloc;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _zcalloc

; 198  :         strm->opaque = (voidpf)0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN4@inflateIni:

; 199  : #endif
; 200  :     }
; 201  :     if (strm->zfree == (free_func)0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN3@inflateIni

; 202  : #ifdef Z_SOLO
; 203  :         return Z_STREAM_ERROR;
; 204  : #else
; 205  :         strm->zfree = zcfree;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _zcfree
$LN3@inflateIni:

; 206  : #endif
; 207  :     state = (struct inflate_state FAR *)
; 208  :             ZALLOC(strm, 1, sizeof(struct inflate_state));

	push	7116					; 00001bccH
	push	1
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _state$[ebp], eax

; 209  :     if (state == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@inflateIni
	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN8@inflateIni
$LN2@inflateIni:

; 210  :     Tracev((stderr, "inflate: allocated\n"));
; 211  :     strm->state = (struct internal_state FAR *)state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 212  :     state->window = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], 0

; 213  :     ret = inflateReset2(strm, windowBits);

	mov	eax, DWORD PTR _windowBits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_inflateReset2@8
	mov	DWORD PTR _ret$[ebp], eax

; 214  :     if (ret != Z_OK) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@inflateIni

; 215  :         ZFREE(strm, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8

; 216  :         strm->state = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN1@inflateIni:

; 217  :     }
; 218  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN8@inflateIni:

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_inflateInit2_@16 ENDP
_TEXT	ENDS
PUBLIC	_inflateInit_@12
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateInit_@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_version$ = 12						; size = 4
_stream_size$ = 16					; size = 4
_inflateInit_@12 PROC					; COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 226  :     return inflateInit2_(strm, DEF_WBITS, version, stream_size);

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	15					; 0000000fH
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_inflateInit2_@16

; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflateInit_@12 ENDP
_TEXT	ENDS
PUBLIC	_inflatePrime@12
; Function compile flags: /Odtp /ZI
;	COMDAT _inflatePrime@12
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_inflatePrime@12 PROC					; COMDAT

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 234  :     struct inflate_state FAR *state;
; 235  : 
; 236  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN4@inflatePri
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@inflatePri
$LN4@inflatePri:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN6@inflatePri
$LN5@inflatePri:

; 237  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 238  :     if (bits < 0) {

	cmp	DWORD PTR _bits$[ebp], 0
	jge	SHORT $LN3@inflatePri

; 239  :         state->hold = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+56], 0

; 240  :         state->bits = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+60], 0

; 241  :         return Z_OK;

	xor	eax, eax
	jmp	SHORT $LN6@inflatePri
$LN3@inflatePri:

; 242  :     }
; 243  :     if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jg	SHORT $LN1@inflatePri
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, 32					; 00000020H
	jbe	SHORT $LN2@inflatePri
$LN1@inflatePri:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN6@inflatePri
$LN2@inflatePri:

; 244  :     value &= (1L << bits) - 1;

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], eax

; 245  :     state->hold += value << state->bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	shl	edx, cl
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 246  :     state->bits += bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 247  :     return Z_OK;

	xor	eax, eax
$LN6@inflatePri:

; 248  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflatePrime@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@ ; `string'
PUBLIC	??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@	; `string'
PUBLIC	??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@ ; `string'
PUBLIC	??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@	; `string'
PUBLIC	??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@ ; `string'
PUBLIC	??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@ ; `string'
PUBLIC	_inflate@8
EXTRN	_inflate_fast:PROC
EXTRN	_inflate_table:PROC
EXTRN	_memcpy:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
;	COMDAT ??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@
CONST	SEGMENT
??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@ DB 'incorrect length che'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@
CONST	SEGMENT
??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@ DB 'incorrect data check', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ DB 'invalid '
	DB	'code -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@ DB 'header crc mismatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@ DB 'unknown header fl'
	DB	'ags set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@
CONST	SEGMENT
??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@ DB 'invalid window size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@
CONST	SEGMENT
??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@ DB 'unknown compress'
	DB	'ion method', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@
CONST	SEGMENT
??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@ DB 'incorrect header che'
	DB	'ck', 00H					; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT _inflate@8
_TEXT	SEGMENT
tv1321 = -132						; size = 4
tv1309 = -132						; size = 4
tv1234 = -132						; size = 4
tv1220 = -132						; size = 4
tv552 = -132						; size = 4
tv523 = -132						; size = 4
tv511 = -132						; size = 4
tv485 = -132						; size = 4
tv350 = -132						; size = 4
tv178 = -132						; size = 4
tv80 = -132						; size = 4
_hbuf$ = -64						; size = 4
_ret$ = -60						; size = 4
_len$ = -56						; size = 4
_last$ = -52						; size = 4
_here$ = -48						; size = 4
_from$ = -44						; size = 4
_copy$ = -40						; size = 4
_out$ = -36						; size = 4
_in$ = -32						; size = 4
_bits$ = -28						; size = 4
_hold$ = -24						; size = 4
_left$ = -20						; size = 4
_have$ = -16						; size = 4
_put$ = -12						; size = 4
_next$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_inflate@8 PROC						; COMDAT

; 612  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi

; 613  :     struct inflate_state FAR *state;
; 614  :     unsigned char FAR *next;    /* next input */
; 615  :     unsigned char FAR *put;     /* next output */
; 616  :     unsigned have, left;        /* available input and output */
; 617  :     unsigned long hold;         /* bit buffer */
; 618  :     unsigned bits;              /* bits in bit buffer */
; 619  :     unsigned in, out;           /* save starting available input and output */
; 620  :     unsigned copy;              /* number of stored or match bytes to copy */
; 621  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 622  :     code here;                  /* current decoding table entry */
; 623  :     code last;                  /* parent table entry */
; 624  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 625  :     int ret;                    /* return code */
; 626  : #ifdef GUNZIP
; 627  :     unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
; 628  : #endif
; 629  :     static const unsigned short order[19] = /* permutation of code lengths */
; 630  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 631  : 
; 632  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
; 633  :         (strm->next_in == Z_NULL && strm->avail_in != 0))

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN498@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN498@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN498@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN499@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN499@inflate
$LN498@inflate:

; 634  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN500@inflate
$LN499@inflate:

; 635  : 
; 636  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 637  :     if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN496@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN496@inflate:

; 638  :     LOAD();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _have$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _hold$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN496@inflate

; 639  :     in = have;

	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 640  :     out = left;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 641  :     ret = Z_OK;

	mov	DWORD PTR _ret$[ebp], 0
$LN493@inflate:

; 642  :     for (;;)
; 643  :         switch (state->mode) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv80[ebp], ecx
	cmp	DWORD PTR tv80[ebp], 30			; 0000001eH
	ja	$LN12@inflate
	mov	edx, DWORD PTR tv80[ebp]
	jmp	DWORD PTR $LN512@inflate[edx*4]
$LN489@inflate:

; 644  :         case HEAD:
; 645  :             if (state->wrap == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN484@inflate

; 646  :                 state->mode = TYPEDO;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH

; 647  :                 break;

	jmp	$LN490@inflate
$LN484@inflate:

; 648  :             }
; 649  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN486@inflate
$LN482@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN479@inflate
	jmp	$inf_leave$80508
$LN479@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN482@inflate
	jmp	SHORT $LN484@inflate
$LN486@inflate:
	xor	eax, eax
	jne	SHORT $LN484@inflate

; 650  : #ifdef GUNZIP
; 651  :             if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN478@inflate
	cmp	DWORD PTR _hold$[ebp], 35615		; 00008b1fH
	jne	SHORT $LN478@inflate

; 652  :                 state->check = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN477@inflate:

; 653  :                 CRC2(state->check, hold);

	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	BYTE PTR _hbuf$[ebp+1], al
	push	2
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
	xor	eax, eax
	jne	SHORT $LN477@inflate
$LN474@inflate:

; 654  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN474@inflate

; 655  :                 state->mode = FLAGS;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 1

; 656  :                 break;

	jmp	$LN490@inflate
$LN478@inflate:

; 657  :             }
; 658  :             state->flags = 0;           /* expect zlib header */

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+16], 0

; 659  :             if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN471@inflate

; 660  :                 state->head->done = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+48], -1
$LN471@inflate:

; 661  :             if (!(state->wrap & 1) ||   /* check if zlib header allowed */
; 662  : #else
; 663  :             if (
; 664  : #endif
; 665  :                 ((BITS(8) << 8) + (hold >> 8)) % 31) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN469@inflate
	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 8
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 8
	add	eax, ecx
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	test	edx, edx
	je	SHORT $LN470@inflate
$LN469@inflate:

; 666  :                 strm->msg = (char *)"incorrect header check";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@

; 667  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 668  :                 break;

	jmp	$LN490@inflate
$LN470@inflate:

; 669  :             }
; 670  :             if (BITS(4) != Z_DEFLATED) {

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 15					; 0000000fH
	cmp	eax, 8
	je	SHORT $LN467@inflate

; 671  :                 strm->msg = (char *)"unknown compression method";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@

; 672  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 673  :                 break;

	jmp	$LN490@inflate
$LN467@inflate:

; 674  :             }
; 675  :             DROPBITS(4);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 4
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 4
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN467@inflate

; 676  :             len = BITS(4) + 8;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 15					; 0000000fH
	add	eax, 8
	mov	DWORD PTR _len$[ebp], eax

; 677  :             if (state->wbits == 0)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN464@inflate

; 678  :                 state->wbits = len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN463@inflate
$LN464@inflate:

; 679  :             else if (len > state->wbits) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jbe	SHORT $LN463@inflate

; 680  :                 strm->msg = (char *)"invalid window size";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@

; 681  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 682  :                 break;

	jmp	$LN490@inflate
$LN463@inflate:

; 683  :             }
; 684  :             state->dmax = 1U << len;

	mov	eax, 1
	mov	ecx, DWORD PTR _len$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 685  :             Tracev((stderr, "inflate:   zlib header ok\n"));
; 686  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv178[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv178[ebp]
	mov	DWORD PTR [edx+48], eax

; 687  :             state->mode = hold & 0x200 ? DICTID : TYPE;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 512				; 00000200H
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax
$LN461@inflate:

; 688  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN461@inflate

; 689  :             break;

	jmp	$LN490@inflate
$LN454@inflate:

; 690  : #ifdef GUNZIP
; 691  :         case FLAGS:
; 692  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN456@inflate
$LN452@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN449@inflate
	jmp	$inf_leave$80508
$LN449@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN452@inflate
	jmp	SHORT $LN454@inflate
$LN456@inflate:
	xor	eax, eax
	jne	SHORT $LN454@inflate

; 693  :             state->flags = (int)(hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 694  :             if ((state->flags & 0xff) != Z_DEFLATED) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 8
	je	SHORT $LN448@inflate

; 695  :                 strm->msg = (char *)"unknown compression method";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@

; 696  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 697  :                 break;

	jmp	$LN490@inflate
$LN448@inflate:

; 698  :             }
; 699  :             if (state->flags & 0xe000) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 57344				; 0000e000H
	je	SHORT $LN447@inflate

; 700  :                 strm->msg = (char *)"unknown header flags set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@

; 701  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 702  :                 break;

	jmp	$LN490@inflate
$LN447@inflate:

; 703  :             }
; 704  :             if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN446@inflate

; 705  :                 state->head->text = (int)((hold >> 8) & 1);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx], eax
$LN446@inflate:

; 706  :             if (state->flags & 0x0200) CRC2(state->check, hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN441@inflate
$LN444@inflate:
	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	BYTE PTR _hbuf$[ebp+1], al
	push	2
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
	xor	eax, eax
	jne	SHORT $LN444@inflate
$LN441@inflate:

; 707  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN441@inflate

; 708  :             state->mode = TIME;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 2
$LN434@inflate:

; 709  :         case TIME:
; 710  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN436@inflate
$LN432@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN429@inflate
	jmp	$inf_leave$80508
$LN429@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN432@inflate
	jmp	SHORT $LN434@inflate
$LN436@inflate:
	xor	eax, eax
	jne	SHORT $LN434@inflate

; 711  :             if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN428@inflate

; 712  :                 state->head->time = hold;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN428@inflate:

; 713  :             if (state->flags & 0x0200) CRC4(state->check, hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN423@inflate
$LN426@inflate:
	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	BYTE PTR _hbuf$[ebp+1], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _hbuf$[ebp+2], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _hbuf$[ebp+3], al
	push	4
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
	xor	eax, eax
	jne	SHORT $LN426@inflate
$LN423@inflate:

; 714  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN423@inflate

; 715  :             state->mode = OS;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 3
$LN416@inflate:

; 716  :         case OS:
; 717  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN418@inflate
$LN414@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN411@inflate
	jmp	$inf_leave$80508
$LN411@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN414@inflate
	jmp	SHORT $LN416@inflate
$LN418@inflate:
	xor	eax, eax
	jne	SHORT $LN416@inflate

; 718  :             if (state->head != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN410@inflate

; 719  :                 state->head->xflags = (int)(hold & 0xff);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+8], eax

; 720  :                 state->head->os = (int)(hold >> 8);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+12], eax
$LN410@inflate:

; 721  :             }
; 722  :             if (state->flags & 0x0200) CRC2(state->check, hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN405@inflate
$LN408@inflate:
	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	BYTE PTR _hbuf$[ebp+1], al
	push	2
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
	xor	eax, eax
	jne	SHORT $LN408@inflate
$LN405@inflate:

; 723  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN405@inflate

; 724  :             state->mode = EXLEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 4
$LN402@inflate:

; 725  :         case EXLEN:
; 726  :             if (state->flags & 0x0400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1024				; 00000400H
	je	$LN401@inflate
$LN397@inflate:

; 727  :                 NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN399@inflate
$LN395@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN392@inflate
	jmp	$inf_leave$80508
$LN392@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN395@inflate
	jmp	SHORT $LN397@inflate
$LN399@inflate:
	xor	eax, eax
	jne	SHORT $LN397@inflate

; 728  :                 state->length = (unsigned)(hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 729  :                 if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN391@inflate

; 730  :                     state->head->extra_len = (unsigned)hold;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN391@inflate:

; 731  :                 if (state->flags & 0x0200) CRC2(state->check, hold);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN386@inflate
$LN389@inflate:
	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp], al
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	BYTE PTR _hbuf$[ebp+1], al
	push	2
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
	xor	eax, eax
	jne	SHORT $LN389@inflate
$LN386@inflate:

; 732  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN386@inflate

; 733  :             }
; 734  :             else if (state->head != Z_NULL)

	jmp	SHORT $LN383@inflate
$LN401@inflate:
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN383@inflate

; 735  :                 state->head->extra = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+16], 0
$LN383@inflate:

; 736  :             state->mode = EXTRA;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 5
$LN381@inflate:

; 737  :         case EXTRA:
; 738  :             if (state->flags & 0x0400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1024				; 00000400H
	je	$LN380@inflate

; 739  :                 copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx

; 740  :                 if (copy > have) copy = have;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	SHORT $LN379@inflate
	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN379@inflate:

; 741  :                 if (copy) {

	cmp	DWORD PTR _copy$[ebp], 0
	je	$LN378@inflate

; 742  :                     if (state->head != Z_NULL &&
; 743  :                         state->head->extra != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN377@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN377@inflate

; 744  :                         len = state->head->extra_len - state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _len$[ebp], eax

; 745  :                         zmemcpy(state->head->extra + len, next,
; 746  :                                 len + copy > state->head->extra_max ?
; 747  :                                 state->head->extra_max - len : copy);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+24]
	jbe	SHORT $LN502@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv350[ebp], edx
	jmp	SHORT $LN503@inflate
$LN502@inflate:
	mov	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR tv350[ebp], eax
$LN503@inflate:
	mov	ecx, DWORD PTR tv350[ebp]
	push	ecx
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN377@inflate:

; 748  :                     }
; 749  :                     if (state->flags & 0x0200)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN376@inflate

; 750  :                         state->check = crc32(state->check, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN376@inflate:

; 751  :                     have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 752  :                     next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 753  :                     state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx
$LN378@inflate:

; 754  :                 }
; 755  :                 if (state->length) goto inf_leave;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN380@inflate
	jmp	$inf_leave$80508
$LN380@inflate:

; 756  :             }
; 757  :             state->length = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], 0

; 758  :             state->mode = NAME;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 6
$LN374@inflate:

; 759  :         case NAME:
; 760  :             if (state->flags & 0x0800) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 2048				; 00000800H
	je	$LN373@inflate

; 761  :                 if (have == 0) goto inf_leave;

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN372@inflate
	jmp	$inf_leave$80508
$LN372@inflate:

; 762  :                 copy = 0;

	mov	DWORD PTR _copy$[ebp], 0
$LN371@inflate:

; 763  :                 do {
; 764  :                     len = (unsigned)(next[copy++]);

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _copy$[ebp]
	add	edx, 1
	mov	DWORD PTR _copy$[ebp], edx

; 765  :                     if (state->head != Z_NULL &&
; 766  :                             state->head->name != Z_NULL &&
; 767  :                             state->length < state->head->name_max)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN370@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN370@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	eax, DWORD PTR [ecx+32]
	jae	SHORT $LN370@inflate

; 768  :                         state->head->name[state->length++] = len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], edx
$LN370@inflate:

; 769  :                 } while (len && copy < have);

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN369@inflate
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jb	SHORT $LN371@inflate
$LN369@inflate:

; 770  :                 if (state->flags & 0x0200)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN366@inflate

; 771  :                     state->check = crc32(state->check, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN366@inflate:

; 772  :                 have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 773  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 774  :                 if (len) goto inf_leave;

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN365@inflate
	jmp	$inf_leave$80508
$LN365@inflate:

; 775  :             }
; 776  :             else if (state->head != Z_NULL)

	jmp	SHORT $LN364@inflate
$LN373@inflate:
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN364@inflate

; 777  :                 state->head->name = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+28], 0
$LN364@inflate:

; 778  :             state->length = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], 0

; 779  :             state->mode = COMMENT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 7
$LN362@inflate:

; 780  :         case COMMENT:
; 781  :             if (state->flags & 0x1000) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 4096				; 00001000H
	je	$LN361@inflate

; 782  :                 if (have == 0) goto inf_leave;

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN360@inflate
	jmp	$inf_leave$80508
$LN360@inflate:

; 783  :                 copy = 0;

	mov	DWORD PTR _copy$[ebp], 0
$LN359@inflate:

; 784  :                 do {
; 785  :                     len = (unsigned)(next[copy++]);

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _copy$[ebp]
	add	edx, 1
	mov	DWORD PTR _copy$[ebp], edx

; 786  :                     if (state->head != Z_NULL &&
; 787  :                             state->head->comment != Z_NULL &&
; 788  :                             state->length < state->head->comm_max)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN358@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN358@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	eax, DWORD PTR [ecx+40]
	jae	SHORT $LN358@inflate

; 789  :                         state->head->comment[state->length++] = len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], edx
$LN358@inflate:

; 790  :                 } while (len && copy < have);

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN357@inflate
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jb	SHORT $LN359@inflate
$LN357@inflate:

; 791  :                 if (state->flags & 0x0200)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	SHORT $LN354@inflate

; 792  :                     state->check = crc32(state->check, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN354@inflate:

; 793  :                 have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 794  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 795  :                 if (len) goto inf_leave;

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN353@inflate
	jmp	$inf_leave$80508
$LN353@inflate:

; 796  :             }
; 797  :             else if (state->head != Z_NULL)

	jmp	SHORT $LN352@inflate
$LN361@inflate:
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN352@inflate

; 798  :                 state->head->comment = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+36], 0
$LN352@inflate:

; 799  :             state->mode = HCRC;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 8
$LN350@inflate:

; 800  :         case HCRC:
; 801  :             if (state->flags & 0x0200) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 512				; 00000200H
	je	$LN349@inflate
$LN345@inflate:

; 802  :                 NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN347@inflate
$LN343@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN340@inflate
	jmp	$inf_leave$80508
$LN340@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN343@inflate
	jmp	SHORT $LN345@inflate
$LN347@inflate:
	xor	eax, eax
	jne	SHORT $LN345@inflate

; 803  :                 if (hold != (state->check & 0xffff)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 65535				; 0000ffffH
	cmp	DWORD PTR _hold$[ebp], ecx
	je	SHORT $LN338@inflate

; 804  :                     strm->msg = (char *)"header crc mismatch";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@

; 805  :                     state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 806  :                     break;

	jmp	$LN490@inflate
$LN338@inflate:

; 807  :                 }
; 808  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN338@inflate
$LN349@inflate:

; 809  :             }
; 810  :             if (state->head != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN335@inflate

; 811  :                 state->head->hcrc = (int)((state->flags >> 9) & 1);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sar	ecx, 9
	and	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+44], ecx

; 812  :                 state->head->done = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+48], 1
$LN335@inflate:

; 813  :             }
; 814  :             strm->adler = state->check = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv485[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv485[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv485[ebp]
	mov	DWORD PTR [edx+48], eax

; 815  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 816  :             break;

	jmp	$LN490@inflate
$LN330@inflate:

; 817  : #endif
; 818  :         case DICTID:
; 819  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN332@inflate
$LN328@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN325@inflate
	jmp	$inf_leave$80508
$LN325@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN328@inflate
	jmp	SHORT $LN330@inflate
$LN332@inflate:
	xor	eax, eax
	jne	SHORT $LN330@inflate

; 820  :             strm->adler = state->check = REVERSE(hold);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 8
	and	ecx, 65280				; 0000ff00H
	add	eax, ecx
	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 65280				; 0000ff00H
	shl	edx, 8
	add	eax, edx
	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR tv511[ebp], eax
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv511[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv511[ebp]
	mov	DWORD PTR [ecx+48], edx
$LN324@inflate:

; 821  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN324@inflate

; 822  :             state->mode = DICT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$LN321@inflate:

; 823  :         case DICT:
; 824  :             if (state->havedict == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN320@inflate
$LN319@inflate:

; 825  :                 RESTORE();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax+60], ecx
	xor	eax, eax
	jne	SHORT $LN319@inflate

; 826  :                 return Z_NEED_DICT;

	mov	eax, 2
	jmp	$LN500@inflate
$LN320@inflate:

; 827  :             }
; 828  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv523[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv523[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv523[ebp]
	mov	DWORD PTR [edx+48], eax

; 829  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
$LN316@inflate:

; 830  :         case TYPE:
; 831  :             if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN314@inflate
	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN313@inflate
$LN314@inflate:
	jmp	$inf_leave$80508
$LN313@inflate:

; 832  :         case TYPEDO:
; 833  :             if (state->last) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN305@inflate
$LN311@inflate:

; 834  :                 BYTEBITS();

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN311@inflate

; 835  :                 state->mode = CHECK;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 26			; 0000001aH

; 836  :                 break;

	jmp	$LN490@inflate
$LN305@inflate:

; 837  :             }
; 838  :             NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN307@inflate
$LN303@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN300@inflate
	jmp	$inf_leave$80508
$LN300@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN303@inflate
	jmp	SHORT $LN305@inflate
$LN307@inflate:
	xor	eax, eax
	jne	SHORT $LN305@inflate

; 839  :             state->last = BITS(1);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN299@inflate:

; 840  :             DROPBITS(1);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 1
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN299@inflate

; 841  :             switch (BITS(2)) {

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 3
	mov	DWORD PTR tv552[ebp], eax
	cmp	DWORD PTR tv552[ebp], 3
	ja	SHORT $LN286@inflate
	mov	ecx, DWORD PTR tv552[ebp]
	jmp	DWORD PTR $LN513@inflate[ecx*4]
$LN294@inflate:

; 842  :             case 0:                             /* stored block */
; 843  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 844  :                         state->last ? " (last)" : ""));
; 845  :                 state->mode = STORED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 13			; 0000000dH

; 846  :                 break;

	jmp	SHORT $LN286@inflate
$LN293@inflate:

; 847  :             case 1:                             /* fixed block */
; 848  :                 fixedtables(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_fixedtables
	add	esp, 4

; 849  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 850  :                         state->last ? " (last)" : ""));
; 851  :                 state->mode = LEN_;             /* decode codes */

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H

; 852  :                 if (flush == Z_TREES) {

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN292@inflate
$LN291@inflate:

; 853  :                     DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN291@inflate

; 854  :                     goto inf_leave;

	jmp	$inf_leave$80508
$LN292@inflate:

; 855  :                 }
; 856  :                 break;

	jmp	SHORT $LN286@inflate
$LN288@inflate:

; 857  :             case 2:                             /* dynamic block */
; 858  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 859  :                         state->last ? " (last)" : ""));
; 860  :                 state->mode = TABLE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H

; 861  :                 break;

	jmp	SHORT $LN286@inflate
$LN287@inflate:

; 862  :             case 3:
; 863  :                 strm->msg = (char *)"invalid block type";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 864  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH
$LN286@inflate:

; 865  :             }
; 866  :             DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN286@inflate

; 867  :             break;

	jmp	$LN490@inflate
$LN282@inflate:

; 868  :         case STORED:
; 869  :             BYTEBITS();                         /* go to byte boundary */

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN282@inflate
$LN276@inflate:

; 870  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN278@inflate
$LN274@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN271@inflate
	jmp	$inf_leave$80508
$LN271@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN274@inflate
	jmp	SHORT $LN276@inflate
$LN278@inflate:
	xor	eax, eax
	jne	SHORT $LN276@inflate

; 871  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 16					; 00000010H
	xor	ecx, 65535				; 0000ffffH
	cmp	eax, ecx
	je	SHORT $LN270@inflate

; 872  :                 strm->msg = (char *)"invalid stored block lengths";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 873  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 874  :                 break;

	jmp	$LN490@inflate
$LN270@inflate:

; 875  :             }
; 876  :             state->length = (unsigned)hold & 0xffff;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], eax
$LN269@inflate:

; 877  :             Tracev((stderr, "inflate:       stored length %u\n",
; 878  :                     state->length));
; 879  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN269@inflate

; 880  :             state->mode = COPY_;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 14			; 0000000eH

; 881  :             if (flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN265@inflate
	jmp	$inf_leave$80508
$LN265@inflate:

; 882  :         case COPY_:
; 883  :             state->mode = COPY;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN264@inflate:

; 884  :         case COPY:
; 885  :             copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx

; 886  :             if (copy) {

	cmp	DWORD PTR _copy$[ebp], 0
	je	SHORT $LN263@inflate

; 887  :                 if (copy > have) copy = have;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	SHORT $LN262@inflate
	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN262@inflate:

; 888  :                 if (copy > left) copy = left;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jbe	SHORT $LN261@inflate
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN261@inflate:

; 889  :                 if (copy == 0) goto inf_leave;

	cmp	DWORD PTR _copy$[ebp], 0
	jne	SHORT $LN260@inflate
	jmp	$inf_leave$80508
$LN260@inflate:

; 890  :                 zmemcpy(put, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _put$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 891  :                 have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 892  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 893  :                 left -= copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 894  :                 put += copy;

	mov	eax, DWORD PTR _put$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _put$[ebp], eax

; 895  :                 state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 896  :                 break;

	jmp	$LN490@inflate
$LN263@inflate:

; 897  :             }
; 898  :             Tracev((stderr, "inflate:       stored end\n"));
; 899  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 900  :             break;

	jmp	$LN490@inflate
$LN255@inflate:

; 901  :         case TABLE:
; 902  :             NEEDBITS(14);

	cmp	DWORD PTR _bits$[ebp], 14		; 0000000eH
	jae	SHORT $LN257@inflate
$LN253@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN250@inflate
	jmp	$inf_leave$80508
$LN250@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN253@inflate
	jmp	SHORT $LN255@inflate
$LN257@inflate:
	xor	eax, eax
	jne	SHORT $LN255@inflate

; 903  :             state->nlen = BITS(5) + 257;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, 257				; 00000101H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN249@inflate:

; 904  :             DROPBITS(5);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 5
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 5
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN249@inflate

; 905  :             state->ndist = BITS(5) + 1;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+100], eax
$LN246@inflate:

; 906  :             DROPBITS(5);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 5
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 5
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN246@inflate

; 907  :             state->ncode = BITS(4) + 4;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 15					; 0000000fH
	add	eax, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+92], eax
$LN243@inflate:

; 908  :             DROPBITS(4);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 4
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 4
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN243@inflate

; 909  : #ifndef PKZIP_BUG_WORKAROUND
; 910  :             if (state->nlen > 286 || state->ndist > 30) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+96], 286			; 0000011eH
	ja	SHORT $LN239@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+100], 30			; 0000001eH
	jbe	SHORT $LN240@inflate
$LN239@inflate:

; 911  :                 strm->msg = (char *)"too many length or distance symbols";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 912  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 913  :                 break;

	jmp	$LN490@inflate
$LN240@inflate:

; 914  :             }
; 915  : #endif
; 916  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 917  :             state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], 0

; 918  :             state->mode = LENLENS;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 17			; 00000011H
$LN237@inflate:

; 919  :         case LENLENS:
; 920  :             while (state->have < state->ncode) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+104]
	cmp	edx, DWORD PTR [ecx+92]
	jae	$LN223@inflate
$LN232@inflate:

; 921  :                 NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN234@inflate
$LN230@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN227@inflate
	jmp	$inf_leave$80508
$LN227@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN230@inflate
	jmp	SHORT $LN232@inflate
$LN234@inflate:
	xor	eax, eax
	jne	SHORT $LN232@inflate

; 922  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	movzx	ecx, WORD PTR ?order@?1??inflate@@9@9[edx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+104], ecx
$LN226@inflate:

; 923  :                 DROPBITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 3
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 3
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN226@inflate

; 924  :             }

	jmp	$LN237@inflate
$LN223@inflate:

; 925  :             while (state->have < 19)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 19			; 00000013H
	jae	SHORT $LN222@inflate

; 926  :                 state->lens[order[state->have++]] = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	movzx	edx, WORD PTR ?order@?1??inflate@@9@9[ecx*2]
	xor	eax, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	WORD PTR [ecx+edx*2+112], ax
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+104]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+104], eax
	jmp	SHORT $LN223@inflate
$LN222@inflate:

; 927  :             state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 928  :             state->lencode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+76], edx

; 929  :             state->lenbits = 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 7

; 930  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),
; 931  :                                 &(state->lenbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	push	0
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 932  :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN221@inflate

; 933  :                 strm->msg = (char *)"invalid code lengths set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 934  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 935  :                 break;

	jmp	$LN490@inflate
$LN221@inflate:

; 936  :             }
; 937  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 938  :             state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], 0

; 939  :             state->mode = CODELENS;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN219@inflate:

; 940  :         case CODELENS:
; 941  :             while (state->have < state->nlen + state->ndist) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], ecx
	jae	$LN218@inflate
$LN217@inflate:

; 942  :                 for (;;) {
; 943  :                     here = state->lencode[BITS(state->lenbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+84]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _here$[ebp], edx

; 944  :                     if ((unsigned)(here.bits) <= bits) break;

	movzx	eax, BYTE PTR _here$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN214@inflate
	jmp	SHORT $LN216@inflate
$LN214@inflate:

; 945  :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN211@inflate
	jmp	$inf_leave$80508
$LN211@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN214@inflate

; 946  :                 }

	jmp	SHORT $LN217@inflate
$LN216@inflate:

; 947  :                 if (here.val < 16) {

	movzx	eax, WORD PTR _here$[ebp+2]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN210@inflate
$LN209@inflate:

; 948  :                     DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN209@inflate

; 949  :                     state->lens[state->have++] = here.val;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ax, WORD PTR _here$[ebp+2]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], edx

; 950  :                 }
; 951  :                 else {

	jmp	$LN206@inflate
$LN210@inflate:

; 952  :                     if (here.val == 16) {

	movzx	eax, WORD PTR _here$[ebp+2]
	cmp	eax, 16					; 00000010H
	jne	$LN205@inflate
$LN201@inflate:

; 953  :                         NEEDBITS(here.bits + 2);

	movzx	eax, BYTE PTR _here$[ebp+1]
	add	eax, 2
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN203@inflate
$LN199@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN196@inflate
	jmp	$inf_leave$80508
$LN196@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN199@inflate
	jmp	SHORT $LN201@inflate
$LN203@inflate:
	xor	eax, eax
	jne	SHORT $LN201@inflate
$LN195@inflate:

; 954  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN195@inflate

; 955  :                         if (state->have == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	SHORT $LN192@inflate

; 956  :                             strm->msg = (char *)"invalid bit length repeat";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 957  :                             state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 958  :                             break;

	jmp	$LN218@inflate
$LN192@inflate:

; 959  :                         }
; 960  :                         len = state->lens[state->have - 1];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+110]
	mov	DWORD PTR _len$[ebp], eax

; 961  :                         copy = 3 + BITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 3
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
$LN191@inflate:

; 962  :                         DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN191@inflate

; 963  :                     }
; 964  :                     else if (here.val == 17) {

	jmp	$LN188@inflate
$LN205@inflate:
	movzx	eax, WORD PTR _here$[ebp+2]
	cmp	eax, 17					; 00000011H
	jne	$LN167@inflate
$LN183@inflate:

; 965  :                         NEEDBITS(here.bits + 3);

	movzx	eax, BYTE PTR _here$[ebp+1]
	add	eax, 3
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN185@inflate
$LN181@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN178@inflate
	jmp	$inf_leave$80508
$LN178@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN181@inflate
	jmp	SHORT $LN183@inflate
$LN185@inflate:
	xor	eax, eax
	jne	SHORT $LN183@inflate
$LN177@inflate:

; 966  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN177@inflate

; 967  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 968  :                         copy = 3 + BITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 7
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
$LN174@inflate:

; 969  :                         DROPBITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 3
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 3
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN174@inflate

; 970  :                     }
; 971  :                     else {

	jmp	$LN188@inflate
$LN167@inflate:

; 972  :                         NEEDBITS(here.bits + 7);

	movzx	eax, BYTE PTR _here$[ebp+1]
	add	eax, 7
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN169@inflate
$LN165@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN162@inflate
	jmp	$inf_leave$80508
$LN162@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN165@inflate
	jmp	SHORT $LN167@inflate
$LN169@inflate:
	xor	eax, eax
	jne	SHORT $LN167@inflate
$LN161@inflate:

; 973  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN161@inflate

; 974  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 975  :                         copy = 11 + BITS(7);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 127				; 0000007fH
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _copy$[ebp], eax
$LN158@inflate:

; 976  :                         DROPBITS(7);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 7
	mov	DWORD PTR _hold$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 7
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN158@inflate
$LN188@inflate:

; 977  :                     }
; 978  :                     if (state->have + copy > state->nlen + state->ndist) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	edx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [edx+100]
	cmp	ecx, eax
	jbe	SHORT $LN154@inflate

; 979  :                         strm->msg = (char *)"invalid bit length repeat";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 980  :                         state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 981  :                         break;

	jmp	SHORT $LN218@inflate
$LN154@inflate:

; 982  :                     }
; 983  :                     while (copy--)

	mov	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _copy$[ebp], ecx
	test	eax, eax
	je	SHORT $LN206@inflate

; 984  :                         state->lens[state->have++] = (unsigned short)len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ax, WORD PTR _len$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], edx
	jmp	SHORT $LN154@inflate
$LN206@inflate:

; 985  :                 }
; 986  :             }

	jmp	$LN219@inflate
$LN218@inflate:

; 987  : 
; 988  :             /* handle error breaks in while */
; 989  :             if (state->mode == BAD) break;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 29			; 0000001dH
	jne	SHORT $LN152@inflate
	jmp	$LN490@inflate
$LN152@inflate:

; 990  : 
; 991  :             /* check for end-of-block code (better have one) */
; 992  :             if (state->lens[256] == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN151@inflate

; 993  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 994  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 995  :                 break;

	jmp	$LN490@inflate
$LN151@inflate:

; 996  :             }
; 997  : 
; 998  :             /* build code tables -- note: do not change the lenbits or distbits
; 999  :                values here (9 and 6) without reading the comments in inftrees.h
; 1000 :                concerning the ENOUGH constants, which depend on those values */
; 1001 :             state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 1002 :             state->lencode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+76], edx

; 1003 :             state->lenbits = 9;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 9

; 1004 :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
; 1005 :                                 &(state->lenbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	push	1
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 1006 :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN150@inflate

; 1007 :                 strm->msg = (char *)"invalid literal/lengths set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@

; 1008 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1009 :                 break;

	jmp	$LN490@inflate
$LN150@inflate:

; 1010 :             }
; 1011 :             state->distcode = (code const FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+80], edx

; 1012 :             state->distbits = 6;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 6

; 1013 :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
; 1014 :                             &(state->next), &(state->distbits), state->work);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 752				; 000002f0H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+112]
	push	edx
	push	2
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 1015 :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN149@inflate

; 1016 :                 strm->msg = (char *)"invalid distances set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 1017 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1018 :                 break;

	jmp	$LN490@inflate
$LN149@inflate:

; 1019 :             }
; 1020 :             Tracev((stderr, "inflate:       codes ok\n"));
; 1021 :             state->mode = LEN_;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H

; 1022 :             if (flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN147@inflate
	jmp	$inf_leave$80508
$LN147@inflate:

; 1023 :         case LEN_:
; 1024 :             state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN146@inflate:

; 1025 :         case LEN:
; 1026 :             if (have >= 6 && left >= 258) {

	cmp	DWORD PTR _have$[ebp], 6
	jb	$LN145@inflate
	cmp	DWORD PTR _left$[ebp], 258		; 00000102H
	jb	$LN145@inflate
$LN144@inflate:

; 1027 :                 RESTORE();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax+60], ecx
	xor	eax, eax
	jne	SHORT $LN144@inflate

; 1028 :                 inflate_fast(strm, out);

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_inflate_fast
	add	esp, 8
$LN141@inflate:

; 1029 :                 LOAD();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _put$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _left$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _have$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _hold$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN141@inflate

; 1030 :                 if (state->mode == TYPE)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN138@inflate

; 1031 :                     state->back = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], -1
$LN138@inflate:

; 1032 :                 break;

	jmp	$LN490@inflate
$LN145@inflate:

; 1033 :             }
; 1034 :             state->back = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], 0
$LN137@inflate:

; 1035 :             for (;;) {
; 1036 :                 here = state->lencode[BITS(state->lenbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+84]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _here$[ebp], edx

; 1037 :                 if ((unsigned)(here.bits) <= bits) break;

	movzx	eax, BYTE PTR _here$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN134@inflate
	jmp	SHORT $LN136@inflate
$LN134@inflate:

; 1038 :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN131@inflate
	jmp	$inf_leave$80508
$LN131@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN134@inflate

; 1039 :             }

	jmp	SHORT $LN137@inflate
$LN136@inflate:

; 1040 :             if (here.op && (here.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _here$[ebp]
	test	eax, eax
	je	$LN119@inflate
	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 240				; 000000f0H
	jne	$LN119@inflate

; 1041 :                 last = here;

	mov	eax, DWORD PTR _here$[ebp]
	mov	DWORD PTR _last$[ebp], eax
$LN129@inflate:

; 1042 :                 for (;;) {
; 1043 :                     here = state->lencode[last.val +
; 1044 :                             (BITS(last.bits + last.op) >> last.bits)];

	movzx	eax, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _last$[ebp]
	add	ecx, edx
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _here$[ebp], eax

; 1045 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

	movzx	eax, BYTE PTR _last$[ebp+1]
	movzx	ecx, BYTE PTR _here$[ebp+1]
	add	eax, ecx
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN126@inflate
	jmp	SHORT $LN122@inflate
$LN126@inflate:

; 1046 :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN123@inflate
	jmp	$inf_leave$80508
$LN123@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN126@inflate

; 1047 :                 }

	jmp	SHORT $LN129@inflate
$LN122@inflate:

; 1048 :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN122@inflate

; 1049 :                 state->back += last.bits;

	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7108]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7108], eax
$LN119@inflate:

; 1050 :             }
; 1051 :             DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN119@inflate

; 1052 :             state->back += here.bits;

	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7108]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7108], eax

; 1053 :             state->length = (unsigned)here.val;

	movzx	eax, WORD PTR _here$[ebp+2]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 1054 :             if ((int)(here.op) == 0) {

	movzx	eax, BYTE PTR _here$[ebp]
	test	eax, eax
	jne	SHORT $LN116@inflate

; 1055 :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 1056 :                         "inflate:         literal '%c'\n" :
; 1057 :                         "inflate:         literal 0x%02x\n", here.val));
; 1058 :                 state->mode = LIT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 25			; 00000019H

; 1059 :                 break;

	jmp	$LN490@inflate
$LN116@inflate:

; 1060 :             }
; 1061 :             if (here.op & 32) {

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN115@inflate

; 1062 :                 Tracevv((stderr, "inflate:         end of block\n"));
; 1063 :                 state->back = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], -1

; 1064 :                 state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 1065 :                 break;

	jmp	$LN490@inflate
$LN115@inflate:

; 1066 :             }
; 1067 :             if (here.op & 64) {

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN114@inflate

; 1068 :                 strm->msg = (char *)"invalid literal/length code";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 1069 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1070 :                 break;

	jmp	$LN490@inflate
$LN114@inflate:

; 1071 :             }
; 1072 :             state->extra = (unsigned)(here.op) & 15;

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1073 :             state->mode = LENEXT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 21			; 00000015H
$LN113@inflate:

; 1074 :         case LENEXT:
; 1075 :             if (state->extra) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN112@inflate
$LN108@inflate:

; 1076 :                 NEEDBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jae	SHORT $LN110@inflate
$LN106@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN103@inflate
	jmp	$inf_leave$80508
$LN103@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN106@inflate
	jmp	SHORT $LN108@inflate
$LN110@inflate:
	xor	eax, eax
	jne	SHORT $LN108@inflate

; 1077 :                 state->length += BITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], edx
$LN102@inflate:

; 1078 :                 DROPBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN102@inflate

; 1079 :                 state->back += state->extra;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+7108]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], ecx
$LN112@inflate:

; 1080 :             }
; 1081 :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 1082 :             state->was = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+7112], edx

; 1083 :             state->mode = DIST;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 22			; 00000016H
$LN98@inflate:

; 1084 :         case DIST:
; 1085 :             for (;;) {
; 1086 :                 here = state->distcode[BITS(state->distbits)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _here$[ebp], edx

; 1087 :                 if ((unsigned)(here.bits) <= bits) break;

	movzx	eax, BYTE PTR _here$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN95@inflate
	jmp	SHORT $LN97@inflate
$LN95@inflate:

; 1088 :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN92@inflate
	jmp	$inf_leave$80508
$LN92@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN95@inflate

; 1089 :             }

	jmp	SHORT $LN98@inflate
$LN97@inflate:

; 1090 :             if ((here.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 240				; 000000f0H
	jne	$LN80@inflate

; 1091 :                 last = here;

	mov	eax, DWORD PTR _here$[ebp]
	mov	DWORD PTR _last$[ebp], eax
$LN90@inflate:

; 1092 :                 for (;;) {
; 1093 :                     here = state->distcode[last.val +
; 1094 :                             (BITS(last.bits + last.op) >> last.bits)];

	movzx	eax, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _last$[ebp]
	add	ecx, edx
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _here$[ebp], eax

; 1095 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

	movzx	eax, BYTE PTR _last$[ebp+1]
	movzx	ecx, BYTE PTR _here$[ebp+1]
	add	eax, ecx
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN87@inflate
	jmp	SHORT $LN83@inflate
$LN87@inflate:

; 1096 :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN84@inflate
	jmp	$inf_leave$80508
$LN84@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN87@inflate

; 1097 :                 }

	jmp	SHORT $LN90@inflate
$LN83@inflate:

; 1098 :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN83@inflate

; 1099 :                 state->back += last.bits;

	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7108]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7108], eax
$LN80@inflate:

; 1100 :             }
; 1101 :             DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN80@inflate

; 1102 :             state->back += here.bits;

	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7108]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7108], eax

; 1103 :             if (here.op & 64) {

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN77@inflate

; 1104 :                 strm->msg = (char *)"invalid distance code";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 1105 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1106 :                 break;

	jmp	$LN490@inflate
$LN77@inflate:

; 1107 :             }
; 1108 :             state->offset = (unsigned)here.val;

	movzx	eax, WORD PTR _here$[ebp+2]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1109 :             state->extra = (unsigned)(here.op) & 15;

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1110 :             state->mode = DISTEXT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 23			; 00000017H
$LN76@inflate:

; 1111 :         case DISTEXT:
; 1112 :             if (state->extra) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN75@inflate
$LN71@inflate:

; 1113 :                 NEEDBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jae	SHORT $LN73@inflate
$LN69@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN66@inflate
	jmp	$inf_leave$80508
$LN66@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN69@inflate
	jmp	SHORT $LN71@inflate
$LN73@inflate:
	xor	eax, eax
	jne	SHORT $LN71@inflate

; 1114 :                 state->offset += BITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], edx
$LN65@inflate:

; 1115 :                 DROPBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN65@inflate

; 1116 :                 state->back += state->extra;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+7108]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], ecx
$LN75@inflate:

; 1117 :             }
; 1118 : #ifdef INFLATE_STRICT
; 1119 :             if (state->offset > state->dmax) {
; 1120 :                 strm->msg = (char *)"invalid distance too far back";
; 1121 :                 state->mode = BAD;
; 1122 :                 break;
; 1123 :             }
; 1124 : #endif
; 1125 :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 1126 :             state->mode = MATCH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 24			; 00000018H
$LN62@inflate:

; 1127 :         case MATCH:
; 1128 :             if (left == 0) goto inf_leave;

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN61@inflate
	jmp	$inf_leave$80508
$LN61@inflate:

; 1129 :             copy = out - left;

	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax

; 1130 :             if (state->offset > copy) {         /* copy from window */

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	cmp	ecx, DWORD PTR _copy$[ebp]
	jbe	$LN60@inflate

; 1131 :                 copy = state->offset - copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _copy$[ebp], ecx

; 1132 :                 if (copy > state->whave) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN59@inflate

; 1133 :                     if (state->sane) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+7104], 0
	je	SHORT $LN59@inflate

; 1134 :                         strm->msg = (char *)"invalid distance too far back";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 1135 :                         state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1136 :                         break;

	jmp	$LN490@inflate
$LN59@inflate:

; 1137 :                     }
; 1138 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1139 :                     Trace((stderr, "inflate.c too far\n"));
; 1140 :                     copy -= state->whave;
; 1141 :                     if (copy > state->length) copy = state->length;
; 1142 :                     if (copy > left) copy = left;
; 1143 :                     left -= copy;
; 1144 :                     state->length -= copy;
; 1145 :                     do {
; 1146 :                         *put++ = 0;
; 1147 :                     } while (--copy);
; 1148 :                     if (state->length == 0) state->mode = LEN;
; 1149 :                     break;
; 1150 : #endif
; 1151 :                 }
; 1152 :                 if (copy > state->wnext) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jbe	SHORT $LN57@inflate

; 1153 :                     copy -= state->wnext;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _copy$[ebp], ecx

; 1154 :                     from = state->window + (state->wsize - copy);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _from$[ebp], ecx

; 1155 :                 }
; 1156 :                 else

	jmp	SHORT $LN56@inflate
$LN57@inflate:

; 1157 :                     from = state->window + (state->wnext - copy);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _from$[ebp], ecx
$LN56@inflate:

; 1158 :                 if (copy > state->length) copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jbe	SHORT $LN55@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx
$LN55@inflate:

; 1159 :             }
; 1160 :             else {                              /* copy from output */

	jmp	SHORT $LN54@inflate
$LN60@inflate:

; 1161 :                 from = put - state->offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sub	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _from$[ebp], ecx

; 1162 :                 copy = state->length;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _copy$[ebp], ecx
$LN54@inflate:

; 1163 :             }
; 1164 :             if (copy > left) copy = left;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jbe	SHORT $LN53@inflate
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
$LN53@inflate:

; 1165 :             left -= copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 1166 :             state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx
$LN52@inflate:

; 1167 :             do {
; 1168 :                 *put++ = *from++;

	mov	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _put$[ebp]
	add	eax, 1
	mov	DWORD PTR _put$[ebp], eax
	mov	ecx, DWORD PTR _from$[ebp]
	add	ecx, 1
	mov	DWORD PTR _from$[ebp], ecx

; 1169 :             } while (--copy);

	mov	eax, DWORD PTR _copy$[ebp]
	sub	eax, 1
	mov	DWORD PTR _copy$[ebp], eax
	jne	SHORT $LN52@inflate

; 1170 :             if (state->length == 0) state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN49@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN49@inflate:

; 1171 :             break;

	jmp	$LN490@inflate
$LN48@inflate:

; 1172 :         case LIT:
; 1173 :             if (left == 0) goto inf_leave;

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN47@inflate
	jmp	$inf_leave$80508
$LN47@inflate:

; 1174 :             *put++ = (unsigned char)(state->length);

	mov	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _put$[ebp]
	add	eax, 1
	mov	DWORD PTR _put$[ebp], eax

; 1175 :             left--;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, 1
	mov	DWORD PTR _left$[ebp], eax

; 1176 :             state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H

; 1177 :             break;

	jmp	$LN490@inflate
$LN46@inflate:

; 1178 :         case CHECK:
; 1179 :             if (state->wrap) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN45@inflate
$LN41@inflate:

; 1180 :                 NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN43@inflate
$LN39@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN36@inflate
	jmp	$inf_leave$80508
$LN36@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN39@inflate
	jmp	SHORT $LN41@inflate
$LN43@inflate:
	xor	eax, eax
	jne	SHORT $LN41@inflate

; 1181 :                 out -= left;

	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 1182 :                 strm->total_out += out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1183 :                 state->total += out;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1184 :                 if (out)

	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN35@inflate

; 1185 :                     strm->adler = state->check =
; 1186 :                         UPDATE(state->check, put - out, out);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN504@inflate
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _put$[ebp]
	sub	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_crc32@12
	mov	DWORD PTR tv1220[ebp], eax
	jmp	SHORT $LN505@inflate
$LN504@inflate:
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _put$[ebp]
	sub	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_adler32@12
	mov	DWORD PTR tv1220[ebp], eax
$LN505@inflate:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv1220[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv1220[ebp]
	mov	DWORD PTR [edx+48], eax
$LN35@inflate:

; 1187 :                 out = left;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 1188 :                 if ((
; 1189 : #ifdef GUNZIP
; 1190 :                      state->flags ? hold :
; 1191 : #endif
; 1192 :                      REVERSE(hold)) != state->check) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN506@inflate
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR tv1234[ebp], ecx
	jmp	SHORT $LN507@inflate
$LN506@inflate:
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	and	eax, 65280				; 0000ff00H
	add	edx, eax
	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 65280				; 0000ff00H
	shl	ecx, 8
	add	edx, ecx
	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 24					; 00000018H
	add	edx, eax
	mov	DWORD PTR tv1234[ebp], edx
$LN507@inflate:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv1234[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN33@inflate

; 1193 :                     strm->msg = (char *)"incorrect data check";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@

; 1194 :                     state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1195 :                     break;

	jmp	$LN490@inflate
$LN33@inflate:

; 1196 :                 }
; 1197 :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN33@inflate
$LN45@inflate:

; 1198 :                 Tracev((stderr, "inflate:   check matches trailer\n"));
; 1199 :             }
; 1200 : #ifdef GUNZIP
; 1201 :             state->mode = LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
$LN30@inflate:

; 1202 :         case LENGTH:
; 1203 :             if (state->wrap && state->flags) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN29@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN29@inflate
$LN25@inflate:

; 1204 :                 NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN27@inflate
$LN23@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN20@inflate
	jmp	$inf_leave$80508
$LN20@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 8
	mov	DWORD PTR _bits$[ebp], eax
	xor	eax, eax
	jne	SHORT $LN23@inflate
	jmp	SHORT $LN25@inflate
$LN27@inflate:
	xor	eax, eax
	jne	SHORT $LN25@inflate

; 1205 :                 if (hold != (state->total & 0xffffffffUL)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	je	SHORT $LN18@inflate

; 1206 :                     strm->msg = (char *)"incorrect length check";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@

; 1207 :                     state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 29			; 0000001dH

; 1208 :                     break;

	jmp	SHORT $LN490@inflate
$LN18@inflate:

; 1209 :                 }
; 1210 :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN18@inflate
$LN29@inflate:

; 1211 :                 Tracev((stderr, "inflate:   length matches trailer\n"));
; 1212 :             }
; 1213 : #endif
; 1214 :             state->mode = DONE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 28			; 0000001cH
$LN15@inflate:

; 1215 :         case DONE:
; 1216 :             ret = Z_STREAM_END;

	mov	DWORD PTR _ret$[ebp], 1

; 1217 :             goto inf_leave;

	jmp	SHORT $inf_leave$80508
$LN14@inflate:

; 1218 :         case BAD:
; 1219 :             ret = Z_DATA_ERROR;

	mov	DWORD PTR _ret$[ebp], -3		; fffffffdH

; 1220 :             goto inf_leave;

	jmp	SHORT $inf_leave$80508
$LN13@inflate:

; 1221 :         case MEM:
; 1222 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN500@inflate
$LN12@inflate:

; 1223 :         case SYNC:
; 1224 :         default:
; 1225 :             return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN500@inflate
$LN490@inflate:

; 1226 :         }

	jmp	$LN493@inflate
$inf_leave$80508:

; 1227 : 
; 1228 :     /*
; 1229 :        Return from inflate(), updating the total counts and the check value.
; 1230 :        If there was no progress during the inflate() call, return a buffer
; 1231 :        error.  Call updatewindow() to create and/or update the window state.
; 1232 :        Note: a memory error from inflate() is non-recoverable.
; 1233 :      */
; 1234 :   inf_leave:
; 1235 :     RESTORE();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax+60], ecx
	xor	eax, eax
	jne	SHORT $inf_leave$80508

; 1236 :     if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
; 1237 :             (state->mode < CHECK || flush != Z_FINISH)))

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN7@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	je	SHORT $LN8@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 29			; 0000001dH
	jge	SHORT $LN8@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 26			; 0000001aH
	jl	SHORT $LN7@inflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN8@inflate
$LN7@inflate:

; 1238 :         if (updatewindow(strm, out)) {

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_updatewindow
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@inflate

; 1239 :             state->mode = MEM;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH

; 1240 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN500@inflate
$LN8@inflate:

; 1241 :         }
; 1242 :     in -= strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _in$[ebp], ecx

; 1243 :     out -= strm->avail_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _out$[ebp], ecx

; 1244 :     strm->total_in += in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1245 :     strm->total_out += out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1246 :     state->total += out;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1247 :     if (state->wrap && out)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@inflate
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN4@inflate

; 1248 :         strm->adler = state->check =
; 1249 :             UPDATE(state->check, strm->next_out - out, out);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN508@inflate
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_crc32@12
	mov	DWORD PTR tv1309[ebp], eax
	jmp	SHORT $LN509@inflate
$LN508@inflate:
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_adler32@12
	mov	DWORD PTR tv1309[ebp], eax
$LN509@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv1309[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv1309[ebp]
	mov	DWORD PTR [ecx+48], edx
$LN4@inflate:

; 1250 :     strm->data_type = state->bits + (state->last ? 64 : 0) +
; 1251 :                       (state->mode == TYPE ? 128 : 0) +
; 1252 :                       (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 19			; 00000013H
	je	SHORT $LN510@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx], 14			; 0000000eH
	je	SHORT $LN510@inflate
	mov	DWORD PTR tv1321[ebp], 0
	jmp	SHORT $LN511@inflate
$LN510@inflate:
	mov	DWORD PTR tv1321[ebp], 256		; 00000100H
$LN511@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	neg	eax
	sbb	eax, eax
	and	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, eax
	mov	eax, DWORD PTR _state$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 11			; 0000000bH
	setne	cl
	sub	ecx, 1
	and	ecx, 128				; 00000080H
	add	edx, DWORD PTR tv1321[ebp]
	add	ecx, edx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 1253 :     if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)

	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN1@inflate
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN2@inflate
$LN1@inflate:
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN3@inflate
$LN2@inflate:
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@inflate

; 1254 :         ret = Z_BUF_ERROR;

	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
$LN3@inflate:

; 1255 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN500@inflate:

; 1256 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN512@inflate:
	DD	$LN489@inflate
	DD	$LN454@inflate
	DD	$LN434@inflate
	DD	$LN416@inflate
	DD	$LN402@inflate
	DD	$LN381@inflate
	DD	$LN374@inflate
	DD	$LN362@inflate
	DD	$LN350@inflate
	DD	$LN330@inflate
	DD	$LN321@inflate
	DD	$LN316@inflate
	DD	$LN313@inflate
	DD	$LN282@inflate
	DD	$LN265@inflate
	DD	$LN264@inflate
	DD	$LN255@inflate
	DD	$LN237@inflate
	DD	$LN219@inflate
	DD	$LN147@inflate
	DD	$LN146@inflate
	DD	$LN113@inflate
	DD	$LN98@inflate
	DD	$LN76@inflate
	DD	$LN62@inflate
	DD	$LN48@inflate
	DD	$LN46@inflate
	DD	$LN30@inflate
	DD	$LN15@inflate
	DD	$LN14@inflate
	DD	$LN13@inflate
$LN513@inflate:
	DD	$LN294@inflate
	DD	$LN293@inflate
	DD	$LN288@inflate
	DD	$LN287@inflate
_inflate@8 ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _fixedtables
_TEXT	SEGMENT
_state$ = 8						; size = 4
_fixedtables PROC					; COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 263  : #ifdef BUILDFIXED
; 264  :     static int virgin = 1;
; 265  :     static code *lenfix, *distfix;
; 266  :     static code fixed[544];
; 267  : 
; 268  :     /* build fixed huffman tables if first call (may not be thread safe) */
; 269  :     if (virgin) {
; 270  :         unsigned sym, bits;
; 271  :         static code *next;
; 272  : 
; 273  :         /* literal/length table */
; 274  :         sym = 0;
; 275  :         while (sym < 144) state->lens[sym++] = 8;
; 276  :         while (sym < 256) state->lens[sym++] = 9;
; 277  :         while (sym < 280) state->lens[sym++] = 7;
; 278  :         while (sym < 288) state->lens[sym++] = 8;
; 279  :         next = fixed;
; 280  :         lenfix = next;
; 281  :         bits = 9;
; 282  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 283  : 
; 284  :         /* distance table */
; 285  :         sym = 0;
; 286  :         while (sym < 32) state->lens[sym++] = 5;
; 287  :         distfix = next;
; 288  :         bits = 5;
; 289  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 290  : 
; 291  :         /* do this just once */
; 292  :         virgin = 0;
; 293  :     }
; 294  : #else /* !BUILDFIXED */
; 295  : #   include "inffixed.h"
; 296  : #endif /* BUILDFIXED */
; 297  :     state->lencode = lenfix;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+76], OFFSET ?lenfix@?1??fixedtables@@9@9

; 298  :     state->lenbits = 9;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 9

; 299  :     state->distcode = distfix;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], OFFSET ?distfix@?1??fixedtables@@9@9

; 300  :     state->distbits = 5;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 5

; 301  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fixedtables ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _updatewindow
_TEXT	SEGMENT
_dist$ = -12						; size = 4
_copy$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_out$ = 12						; size = 4
_updatewindow PROC					; COMDAT

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 382  :     struct inflate_state FAR *state;
; 383  :     unsigned copy, dist;
; 384  : 
; 385  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 386  : 
; 387  :     /* if it hasn't been done already, allocate space for the window */
; 388  :     if (state->window == Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN10@updatewind

; 389  :         state->window = (unsigned char FAR *)
; 390  :                         ZALLOC(strm, 1U << state->wbits,
; 391  :                                sizeof(unsigned char));

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+36]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 392  :         if (state->window == Z_NULL) return 1;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN10@updatewind
	mov	eax, 1
	jmp	$LN11@updatewind
$LN10@updatewind:

; 393  :     }
; 394  : 
; 395  :     /* if window not in use yet, initialize */
; 396  :     if (state->wsize == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN8@updatewind

; 397  :         state->wsize = 1U << state->wbits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+36]
	shl	edx, cl
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+40], edx

; 398  :         state->wnext = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0

; 399  :         state->whave = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN8@updatewind:

; 400  :     }
; 401  : 
; 402  :     /* copy state->wsize or less output bytes into the circular window */
; 403  :     copy = out - strm->avail_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _copy$[ebp], ecx

; 404  :     if (copy >= state->wsize) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jb	SHORT $LN7@updatewind

; 405  :         zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 406  :         state->wnext = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0

; 407  :         state->whave = state->wsize;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+44], edx

; 408  :     }
; 409  :     else {

	jmp	$LN6@updatewind
$LN7@updatewind:

; 410  :         dist = state->wsize - state->wnext;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+40]
	sub	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _dist$[ebp], edx

; 411  :         if (dist > copy) dist = copy;

	mov	eax, DWORD PTR _dist$[ebp]
	cmp	eax, DWORD PTR _copy$[ebp]
	jbe	SHORT $LN5@updatewind
	mov	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _dist$[ebp], eax
$LN5@updatewind:

; 412  :         zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);

	mov	eax, DWORD PTR _dist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+48]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 413  :         copy -= dist;

	mov	eax, DWORD PTR _copy$[ebp]
	sub	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _copy$[ebp], eax

; 414  :         if (copy) {

	je	SHORT $LN4@updatewind

; 415  :             zmemcpy(state->window, strm->next_out - copy, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 416  :             state->wnext = copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 417  :             state->whave = state->wsize;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+44], edx

; 418  :         }
; 419  :         else {

	jmp	SHORT $LN6@updatewind
$LN4@updatewind:

; 420  :             state->wnext += dist;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 421  :             if (state->wnext == state->wsize) state->wnext = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN2@updatewind
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@updatewind:

; 422  :             if (state->whave < state->wsize) state->whave += dist;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+40]
	jae	SHORT $LN6@updatewind
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], ecx
$LN6@updatewind:

; 423  :         }
; 424  :     }
; 425  :     return 0;

	xor	eax, eax
$LN11@updatewind:

; 426  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_updatewindow ENDP
_TEXT	ENDS
PUBLIC	_inflateEnd@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateEnd@4
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateEnd@4 PROC					; COMDAT

; 1260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1261 :     struct inflate_state FAR *state;
; 1262 :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@inflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@inflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN3@inflateEnd
$LN2@inflateEnd:

; 1263 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@inflateEnd
$LN3@inflateEnd:

; 1264 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1265 :     if (state->window != Z_NULL) ZFREE(strm, state->window);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN1@inflateEnd
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
$LN1@inflateEnd:

; 1266 :     ZFREE(strm, strm->state);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 1267 :     strm->state = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1268 :     Tracev((stderr, "inflate: end\n"));
; 1269 :     return Z_OK;

	xor	eax, eax
$LN4@inflateEnd:

; 1270 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateEnd@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateSetDictionary@12
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateSetDictionary@12
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_avail$ = -16						; size = 4
_next$ = -12						; size = 4
_id$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_inflateSetDictionary@12 PROC				; COMDAT

; 1276 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1277 :     struct inflate_state FAR *state;
; 1278 :     unsigned long id;
; 1279 :     unsigned char *next;
; 1280 :     unsigned avail;
; 1281 :     int ret;
; 1282 : 
; 1283 :     /* check state */
; 1284 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN5@inflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@inflateSet
$LN5@inflateSet:
	mov	eax, -2					; fffffffeH
	jmp	$LN7@inflateSet
$LN6@inflateSet:

; 1285 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1286 :     if (state->wrap != 0 && state->mode != DICT)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@inflateSet
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	je	SHORT $LN4@inflateSet

; 1287 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN7@inflateSet
$LN4@inflateSet:

; 1288 : 
; 1289 :     /* check for correct dictionary id */
; 1290 :     if (state->mode == DICT) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jne	SHORT $LN3@inflateSet

; 1291 :         id = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR _id$[ebp], eax

; 1292 :         id = adler32(id, dictionary, dictLength);

	mov	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	_adler32@12
	mov	DWORD PTR _id$[ebp], eax

; 1293 :         if (id != state->check)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN3@inflateSet

; 1294 :             return Z_DATA_ERROR;

	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN7@inflateSet
$LN3@inflateSet:

; 1295 :     }
; 1296 : 
; 1297 :     /* copy dictionary to window using updatewindow(), which will amend the
; 1298 :        existing dictionary if appropriate */
; 1299 :     next = strm->next_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _next$[ebp], ecx

; 1300 :     avail = strm->avail_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _avail$[ebp], ecx

; 1301 :     strm->next_out = (Bytef *)dictionary + dictLength;

	mov	eax, DWORD PTR _dictionary$[ebp]
	add	eax, DWORD PTR _dictLength$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1302 :     strm->avail_out = 0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1303 :     ret = updatewindow(strm, dictLength);

	mov	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_updatewindow
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1304 :     strm->avail_out = avail;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _avail$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1305 :     strm->next_out = next;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1306 :     if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@inflateSet

; 1307 :         state->mode = MEM;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH

; 1308 :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN7@inflateSet
$LN1@inflateSet:

; 1309 :     }
; 1310 :     state->havedict = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+12], 1

; 1311 :     Tracev((stderr, "inflate:   dictionary set\n"));
; 1312 :     return Z_OK;

	xor	eax, eax
$LN7@inflateSet:

; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflateSetDictionary@12 ENDP
_TEXT	ENDS
PUBLIC	_inflateGetHeader@8
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateGetHeader@8
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_inflateGetHeader@8 PROC				; COMDAT

; 1318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1319 :     struct inflate_state FAR *state;
; 1320 : 
; 1321 :     /* check state */
; 1322 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN2@inflateGet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@inflateGet
$LN2@inflateGet:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@inflateGet
$LN3@inflateGet:

; 1323 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1324 :     if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	jne	SHORT $LN1@inflateGet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN4@inflateGet
$LN1@inflateGet:

; 1325 : 
; 1326 :     /* save header structure */
; 1327 :     state->head = head;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1328 :     head->done = 0;

	mov	eax, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1329 :     return Z_OK;

	xor	eax, eax
$LN4@inflateGet:

; 1330 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_inflateGetHeader@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateSync@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateSync@4
_TEXT	SEGMENT
_state$ = -20						; size = 4
_buf$ = -16						; size = 4
_out$ = -12						; size = 4
_in$ = -8						; size = 4
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateSync@4 PROC					; COMDAT

; 1368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1369 :     unsigned len;               /* number of bytes to look at or looked at */
; 1370 :     unsigned long in, out;      /* temporary to save total_in and total_out */
; 1371 :     unsigned char buf[4];       /* to restore bit buffer to byte string */
; 1372 :     struct inflate_state FAR *state;
; 1373 : 
; 1374 :     /* check parameters */
; 1375 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@inflateSyn
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@inflateSyn
$LN6@inflateSyn:
	mov	eax, -2					; fffffffeH
	jmp	$LN8@inflateSyn
$LN7@inflateSyn:

; 1376 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1377 :     if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@inflateSyn
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+60], 8
	jae	SHORT $LN5@inflateSyn
	mov	eax, -5					; fffffffbH
	jmp	$LN8@inflateSyn
$LN5@inflateSyn:

; 1378 : 
; 1379 :     /* if first time, start search in bit buffer */
; 1380 :     if (state->mode != SYNC) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 31			; 0000001fH
	je	$LN4@inflateSyn

; 1381 :         state->mode = SYNC;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 31			; 0000001fH

; 1382 :         state->hold <<= state->bits & 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+56]
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1383 :         state->bits -= state->bits & 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+60]
	sub	eax, ecx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 1384 :         len = 0;

	mov	DWORD PTR _len$[ebp], 0
$LN3@inflateSyn:

; 1385 :         while (state->bits >= 8) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+60], 8
	jb	SHORT $LN2@inflateSyn

; 1386 :             buf[len++] = (unsigned char)(state->hold);

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+56]
	mov	BYTE PTR _buf$[ebp+eax], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax

; 1387 :             state->hold >>= 8;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shr	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+56], ecx

; 1388 :             state->bits -= 8;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1389 :         }

	jmp	SHORT $LN3@inflateSyn
$LN2@inflateSyn:

; 1390 :         state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1391 :         syncsearch(&(state->have), buf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	call	_syncsearch
	add	esp, 12					; 0000000cH
$LN4@inflateSyn:

; 1392 :     }
; 1393 : 
; 1394 :     /* search available input */
; 1395 :     len = syncsearch(&(state->have), strm->next_in, strm->avail_in);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 104				; 00000068H
	push	ecx
	call	_syncsearch
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _len$[ebp], eax

; 1396 :     strm->avail_in -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1397 :     strm->next_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx], ecx

; 1398 :     strm->total_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1399 : 
; 1400 :     /* return no joy or set up to restart inflate() on a new block */
; 1401 :     if (state->have != 4) return Z_DATA_ERROR;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 4
	je	SHORT $LN1@inflateSyn
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN8@inflateSyn
$LN1@inflateSyn:

; 1402 :     in = strm->total_in;  out = strm->total_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _in$[ebp], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _out$[ebp], ecx

; 1403 :     inflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateReset@4

; 1404 :     strm->total_in = in;  strm->total_out = out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 1405 :     state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 1406 :     return Z_OK;

	xor	eax, eax
$LN8@inflateSyn:

; 1407 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateSync@4 ENDP
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT _syncsearch
_TEXT	SEGMENT
_next$ = -8						; size = 4
_got$ = -4						; size = 4
_have$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_syncsearch PROC					; COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1348 :     unsigned got;
; 1349 :     unsigned next;
; 1350 : 
; 1351 :     got = *have;

	mov	eax, DWORD PTR _have$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _got$[ebp], ecx

; 1352 :     next = 0;

	mov	DWORD PTR _next$[ebp], 0
$LN6@syncsearch:

; 1353 :     while (next < len && got < 4) {

	mov	eax, DWORD PTR _next$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN5@syncsearch
	cmp	DWORD PTR _got$[ebp], 4
	jae	SHORT $LN5@syncsearch

; 1354 :         if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _got$[ebp], 2
	sbb	edx, edx
	and	edx, -255				; ffffff01H
	add	edx, 255				; 000000ffH
	cmp	ecx, edx
	jne	SHORT $LN4@syncsearch

; 1355 :             got++;

	mov	eax, DWORD PTR _got$[ebp]
	add	eax, 1
	mov	DWORD PTR _got$[ebp], eax
	jmp	SHORT $LN3@syncsearch
$LN4@syncsearch:

; 1356 :         else if (buf[next])

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@syncsearch

; 1357 :             got = 0;

	mov	DWORD PTR _got$[ebp], 0

; 1358 :         else

	jmp	SHORT $LN3@syncsearch
$LN2@syncsearch:

; 1359 :             got = 4 - got;

	mov	eax, 4
	sub	eax, DWORD PTR _got$[ebp]
	mov	DWORD PTR _got$[ebp], eax
$LN3@syncsearch:

; 1360 :         next++;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax

; 1361 :     }

	jmp	SHORT $LN6@syncsearch
$LN5@syncsearch:

; 1362 :     *have = got;

	mov	eax, DWORD PTR _have$[ebp]
	mov	ecx, DWORD PTR _got$[ebp]
	mov	DWORD PTR [eax], ecx

; 1363 :     return next;

	mov	eax, DWORD PTR _next$[ebp]

; 1364 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_syncsearch ENDP
_TEXT	ENDS
PUBLIC	_inflateSyncPoint@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateSyncPoint@4
_TEXT	SEGMENT
tv71 = -72						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateSyncPoint@4 PROC				; COMDAT

; 1419 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1420 :     struct inflate_state FAR *state;
; 1421 : 
; 1422 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@inflateSyn@2
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@inflateSyn@2
$LN1@inflateSyn@2:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@inflateSyn@2
$LN2@inflateSyn@2:

; 1423 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1424 :     return state->mode == STORED && state->bits == 0;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 13			; 0000000dH
	jne	SHORT $LN5@inflateSyn@2
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN5@inflateSyn@2
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN6@inflateSyn@2
$LN5@inflateSyn@2:
	mov	DWORD PTR tv71[ebp], 0
$LN6@inflateSyn@2:
	mov	eax, DWORD PTR tv71[ebp]
$LN3@inflateSyn@2:

; 1425 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateSyncPoint@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateCopy@8
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateCopy@8
_TEXT	SEGMENT
_wsize$ = -16						; size = 4
_window$ = -12						; size = 4
_copy$ = -8						; size = 4
_state$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_inflateCopy@8 PROC					; COMDAT

; 1430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1431 :     struct inflate_state FAR *state;
; 1432 :     struct inflate_state FAR *copy;
; 1433 :     unsigned char FAR *window;
; 1434 :     unsigned wsize;
; 1435 : 
; 1436 :     /* check input */
; 1437 :     if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
; 1438 :         source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)

	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN6@inflateCop
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN6@inflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@inflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@inflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN7@inflateCop
$LN6@inflateCop:

; 1439 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN8@inflateCop
$LN7@inflateCop:

; 1440 :     state = (struct inflate_state FAR *)source->state;

	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1441 : 
; 1442 :     /* allocate space */
; 1443 :     copy = (struct inflate_state FAR *)
; 1444 :            ZALLOC(source, 1, sizeof(struct inflate_state));

	push	7116					; 00001bccH
	push	1
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _copy$[ebp], eax

; 1445 :     if (copy == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _copy$[ebp], 0
	jne	SHORT $LN5@inflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN8@inflateCop
$LN5@inflateCop:

; 1446 :     window = Z_NULL;

	mov	DWORD PTR _window$[ebp], 0

; 1447 :     if (state->window != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN4@inflateCop

; 1448 :         window = (unsigned char FAR *)
; 1449 :                  ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+36]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _window$[ebp], eax

; 1450 :         if (window == Z_NULL) {

	cmp	DWORD PTR _window$[ebp], 0
	jne	SHORT $LN4@inflateCop

; 1451 :             ZFREE(source, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8

; 1452 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN8@inflateCop
$LN4@inflateCop:

; 1453 :         }
; 1454 :     }
; 1455 : 
; 1456 :     /* copy state */
; 1457 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1458 :     zmemcpy((voidpf)copy, (voidpf)state, sizeof(struct inflate_state));

	push	7116					; 00001bccH
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1459 :     if (state->lencode >= state->codes &&
; 1460 :         state->lencode <= state->codes + ENOUGH - 1) {

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+76], eax
	jb	SHORT $LN2@inflateCop
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 7100				; 00001bbcH
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+76], eax
	ja	SHORT $LN2@inflateCop

; 1461 :         copy->lencode = copy->codes + (state->lencode - state->codes);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	sub	edx, eax
	sar	edx, 2
	mov	eax, DWORD PTR _copy$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+1328]
	mov	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 1462 :         copy->distcode = copy->codes + (state->distcode - state->codes);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	sub	edx, eax
	sar	edx, 2
	mov	eax, DWORD PTR _copy$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+1328]
	mov	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [edx+80], ecx
$LN2@inflateCop:

; 1463 :     }
; 1464 :     copy->next = copy->codes + (state->next - state->codes);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1328				; 00000530H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	sub	edx, eax
	sar	edx, 2
	mov	eax, DWORD PTR _copy$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+1328]
	mov	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1465 :     if (window != Z_NULL) {

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN1@inflateCop

; 1466 :         wsize = 1U << state->wbits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+36]
	shl	edx, cl
	mov	DWORD PTR _wsize$[ebp], edx

; 1467 :         zmemcpy(window, state->window, wsize);

	mov	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _window$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@inflateCop:

; 1468 :     }
; 1469 :     copy->window = window;

	mov	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _window$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 1470 :     dest->state = (struct internal_state FAR *)copy;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1471 :     return Z_OK;

	xor	eax, eax
$LN8@inflateCop:

; 1472 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_inflateCopy@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateUndermine@8
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateUndermine@8
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_subvert$ = 12						; size = 4
_inflateUndermine@8 PROC				; COMDAT

; 1477 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1478 :     struct inflate_state FAR *state;
; 1479 : 
; 1480 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@inflateUnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@inflateUnd
$LN1@inflateUnd:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN3@inflateUnd
$LN2@inflateUnd:

; 1481 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1482 :     state->sane = !subvert;

	xor	eax, eax
	cmp	DWORD PTR _subvert$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+7104], eax

; 1483 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1484 :     return Z_OK;
; 1485 : #else
; 1486 :     state->sane = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7104], 1

; 1487 :     return Z_DATA_ERROR;

	mov	eax, -3					; fffffffdH
$LN3@inflateUnd:

; 1488 : #endif
; 1489 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_inflateUndermine@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateMark@4
; Function compile flags: /Odtp /ZI
;	COMDAT _inflateMark@4
_TEXT	SEGMENT
tv76 = -76						; size = 4
tv77 = -72						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateMark@4 PROC					; COMDAT

; 1493 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1494 :     struct inflate_state FAR *state;
; 1495 : 
; 1496 :     if (strm == Z_NULL || strm->state == Z_NULL) return -1L << 16;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN1@inflateMar
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@inflateMar
$LN1@inflateMar:
	mov	eax, -65536				; ffff0000H
	jmp	SHORT $LN3@inflateMar
$LN2@inflateMar:

; 1497 :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 1498 :     return ((long)(state->back) << 16) +
; 1499 :         (state->mode == COPY ? state->length :
; 1500 :             (state->mode == MATCH ? state->was - state->length : 0));

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN7@inflateMar
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN8@inflateMar
$LN7@inflateMar:
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax], 24			; 00000018H
	jne	SHORT $LN5@inflateMar
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+7112]
	sub	eax, DWORD PTR [edx+64]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@inflateMar
$LN5@inflateMar:
	mov	DWORD PTR tv76[ebp], 0
$LN6@inflateMar:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN8@inflateMar:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+7108]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR tv77[ebp]
$LN3@inflateMar:

; 1501 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_inflateMark@4 ENDP
_TEXT	ENDS
END
