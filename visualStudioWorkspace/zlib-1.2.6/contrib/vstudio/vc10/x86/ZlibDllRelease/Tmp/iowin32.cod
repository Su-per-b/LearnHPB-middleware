; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\SRI\straylight_repo\visualStudioWorkspace\zlib-1.2.6\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Ogtp
; File e:\sri\straylight_repo\visualstudioworkspace\zlib-1.2.6\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  :     int ret=-1;
; 334  :     if (stream!=NULL)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _stream$[ebp]
  00006	83 c8 ff	 or	 eax, -1
  00009	85 c9		 test	 ecx, ecx
  0000b	74 03		 je	 SHORT $LN1@win32_erro

; 335  :     {
; 336  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;
; 337  :     }
; 338  :     return ret;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
$LN1@win32_erro:

; 339  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 315  :     int ret=-1;
; 316  : 
; 317  :     if (stream!=NULL)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _stream$[ebp]
  00008	83 ce ff	 or	 esi, -1
  0000b	85 ff		 test	 edi, edi
  0000d	74 18		 je	 SHORT $LN5@win32_clos

; 318  :     {
; 319  :         HANDLE hFile;
; 320  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0000f	8b 07		 mov	 eax, DWORD PTR [edi]

; 321  :         if (hFile != NULL)

  00011	85 c0		 test	 eax, eax
  00013	74 09		 je	 SHORT $LN1@win32_clos

; 322  :         {
; 323  :             CloseHandle(hFile);

  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 324  :             ret=0;

  0001c	33 f6		 xor	 esi, esi
$LN1@win32_clos:

; 325  :         }
; 326  :         free(stream);

  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 04	 add	 esp, 4
$LN5@win32_clos:

; 327  :     }
; 328  :     return ret;

  00027	5f		 pop	 edi
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi

; 329  : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_win32_close_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 276  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 277  :     HANDLE hFile = NULL;
; 278  :     long ret=-1;
; 279  : 
; 280  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c8 ff	 or	 eax, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek

; 281  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek:

; 282  : 
; 283  :     switch (origin)

  00012	8b 4d 18	 mov	 ecx, DWORD PTR _origin$[ebp]
  00015	83 e9 00	 sub	 ecx, 0
  00018	74 14		 je	 SHORT $LN5@win32_seek
  0001a	49		 dec	 ecx
  0001b	74 0a		 je	 SHORT $LN7@win32_seek
  0001d	49		 dec	 ecx

; 293  :             break;
; 294  :         default: return -1;

  0001e	75 32		 jne	 SHORT $LN13@win32_seek

; 288  :         case ZLIB_FILEFUNC_SEEK_END :
; 289  :             dwMoveMethod = FILE_END;

  00020	b9 02 00 00 00	 mov	 ecx, 2

; 290  :             break;

  00025	eb 09		 jmp	 SHORT $LN8@win32_seek
$LN7@win32_seek:

; 284  :     {
; 285  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 286  :             dwMoveMethod = FILE_CURRENT;

  00027	b9 01 00 00 00	 mov	 ecx, 1

; 287  :             break;

  0002c	eb 02		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 291  :         case ZLIB_FILEFUNC_SEEK_SET :
; 292  :             dwMoveMethod = FILE_BEGIN;

  0002e	33 c9		 xor	 ecx, ecx
$LN8@win32_seek:

; 295  :     }
; 296  : 
; 297  :     if (hFile)

  00030	85 d2		 test	 edx, edx
  00032	74 26		 je	 SHORT $LN11@win32_seek

; 298  :     {
; 299  :         LARGE_INTEGER* li = (LARGE_INTEGER*)&offset;
; 300  :         DWORD dwSet = SetFilePointer(hFile, li->u.LowPart, &li->u.HighPart, dwMoveMethod);

  00034	51		 push	 ecx
  00035	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  00038	8d 45 14	 lea	 eax, DWORD PTR _offset$[ebp+4]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	52		 push	 edx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 301  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00044	83 f8 ff	 cmp	 eax, -1
  00047	75 0f		 jne	 SHORT $LN2@win32_seek

; 302  :         {
; 303  :             DWORD dwErr = GetLastError();

  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 304  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0004f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN13@win32_seek:

; 305  :             ret = -1;

  00052	83 c8 ff	 or	 eax, -1
  00055	5e		 pop	 esi

; 309  :     }
; 310  :     return ret;
; 311  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN2@win32_seek:

; 306  :         }
; 307  :         else
; 308  :             ret=0;

  00058	33 c0		 xor	 eax, eax
$LN11@win32_seek:
  0005a	5e		 pop	 esi

; 309  :     }
; 310  :     return ret;
; 311  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 239  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 240  :     HANDLE hFile = NULL;
; 241  : 
; 242  :     long ret=-1;
; 243  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c8 ff	 or	 eax, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek@2

; 244  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek@2:

; 245  :     switch (origin)

  00012	8b 4d 14	 mov	 ecx, DWORD PTR _origin$[ebp]
  00015	83 e9 00	 sub	 ecx, 0
  00018	74 14		 je	 SHORT $LN5@win32_seek@2
  0001a	49		 dec	 ecx
  0001b	74 0a		 je	 SHORT $LN7@win32_seek@2
  0001d	49		 dec	 ecx

; 255  :         break;
; 256  :     default: return -1;

  0001e	75 30		 jne	 SHORT $LN13@win32_seek@2

; 250  :     case ZLIB_FILEFUNC_SEEK_END :
; 251  :         dwMoveMethod = FILE_END;

  00020	b9 02 00 00 00	 mov	 ecx, 2

; 252  :         break;

  00025	eb 09		 jmp	 SHORT $LN8@win32_seek@2
$LN7@win32_seek@2:

; 246  :     {
; 247  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 248  :         dwMoveMethod = FILE_CURRENT;

  00027	b9 01 00 00 00	 mov	 ecx, 1

; 249  :         break;

  0002c	eb 02		 jmp	 SHORT $LN8@win32_seek@2
$LN5@win32_seek@2:

; 253  :     case ZLIB_FILEFUNC_SEEK_SET :
; 254  :         dwMoveMethod = FILE_BEGIN;

  0002e	33 c9		 xor	 ecx, ecx
$LN8@win32_seek@2:

; 257  :     }
; 258  : 
; 259  :     if (hFile != NULL)

  00030	85 d2		 test	 edx, edx
  00032	74 24		 je	 SHORT $LN11@win32_seek@2

; 260  :     {
; 261  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  00034	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00037	51		 push	 ecx
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	52		 push	 edx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 262  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00042	83 f8 ff	 cmp	 eax, -1
  00045	75 0f		 jne	 SHORT $LN2@win32_seek@2

; 263  :         {
; 264  :             DWORD dwErr = GetLastError();

  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 265  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0004d	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN13@win32_seek@2:

; 266  :             ret = -1;

  00050	83 c8 ff	 or	 eax, -1
  00053	5e		 pop	 esi

; 270  :     }
; 271  :     return ret;
; 272  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN2@win32_seek@2:

; 267  :         }
; 268  :         else
; 269  :             ret=0;

  00056	33 c0		 xor	 eax, eax
$LN11@win32_seek@2:
  00058	5e		 pop	 esi

; 270  :     }
; 271  :     return ret;
; 272  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_li$82192 = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 214  :     ZPOS64_T ret= (ZPOS64_T)-1;
; 215  :     HANDLE hFile = NULL;
; 216  :     if (stream!=NULL)

  0000a	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  0000d	57		 push	 edi
  0000e	33 ff		 xor	 edi, edi
  00010	83 c8 ff	 or	 eax, -1
  00013	83 ca ff	 or	 edx, -1
  00016	3b f7		 cmp	 esi, edi
  00018	74 4b		 je	 SHORT $LN1@win32_tell

; 217  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 218  : 
; 219  :     if (hFile)

  0001c	3b cf		 cmp	 ecx, edi
  0001e	74 45		 je	 SHORT $LN1@win32_tell

; 220  :     {
; 221  :         LARGE_INTEGER li;
; 222  :         li.QuadPart = 0;
; 223  :         li.u.LowPart = SetFilePointer(hFile, li.u.LowPart, &li.u.HighPart, FILE_CURRENT);

  00020	6a 01		 push	 1
  00022	8d 44 24 10	 lea	 eax, DWORD PTR _li$82192[esp+24]
  00026	50		 push	 eax
  00027	57		 push	 edi
  00028	51		 push	 ecx
  00029	89 7c 24 18	 mov	 DWORD PTR _li$82192[esp+32], edi
  0002d	89 7c 24 1c	 mov	 DWORD PTR _li$82192[esp+36], edi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00037	89 44 24 08	 mov	 DWORD PTR _li$82192[esp+16], eax

; 224  :         if ( (li.LowPart == 0xFFFFFFFF) && (GetLastError() != NO_ERROR))

  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	75 21		 jne	 SHORT $LN2@win32_tell
  00040	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetLastError@0
  00046	ff d7		 call	 edi
  00048	85 c0		 test	 eax, eax
  0004a	74 11		 je	 SHORT $LN9@win32_tell

; 225  :         {
; 226  :             DWORD dwErr = GetLastError();

  0004c	ff d7		 call	 edi

; 227  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0004e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 228  :             ret = (ZPOS64_T)-1;

  00051	83 c8 ff	 or	 eax, -1
  00054	83 ca ff	 or	 edx, -1

; 232  :     }
; 233  :     return ret;
; 234  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@win32_tell:

; 229  :         }
; 230  :         else

  0005d	8b 44 24 08	 mov	 eax, DWORD PTR _li$82192[esp+16]
$LN2@win32_tell:

; 231  :             ret=li.QuadPart;

  00061	8b 54 24 0c	 mov	 edx, DWORD PTR _li$82192[esp+20]
$LN1@win32_tell:

; 232  :     }
; 233  :     return ret;
; 234  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 193  :     long ret=-1;
; 194  :     HANDLE hFile = NULL;
; 195  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	83 c8 ff	 or	 eax, -1
  0000a	85 f6		 test	 esi, esi
  0000c	74 24		 je	 SHORT $LN1@win32_tell@2

; 196  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 197  :     if (hFile != NULL)

  00010	85 c9		 test	 ecx, ecx
  00012	74 1e		 je	 SHORT $LN1@win32_tell@2

; 198  :     {
; 199  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  00014	6a 01		 push	 1
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16

; 200  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00021	83 f8 ff	 cmp	 eax, -1
  00024	75 0c		 jne	 SHORT $LN1@win32_tell@2

; 201  :         {
; 202  :             DWORD dwErr = GetLastError();

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 203  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 204  :             ret = -1;

  0002f	83 c8 ff	 or	 eax, -1
$LN1@win32_tell@2:
  00032	5e		 pop	 esi

; 205  :         }
; 206  :         else
; 207  :             ret=(long)dwSet;
; 208  :     }
; 209  :     return ret;
; 210  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 172  :     uLong ret=0;
; 173  :     HANDLE hFile = NULL;
; 174  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
  0000d	85 f6		 test	 esi, esi
  0000f	74 31		 je	 SHORT $LN2@win32_writ

; 175  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 176  : 
; 177  :     if (hFile != NULL)

  00013	85 c9		 test	 ecx, ecx
  00015	74 2b		 je	 SHORT $LN2@win32_writ

; 178  :     {
; 179  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00017	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _ret$[ebp]
  0001e	50		 push	 eax
  0001f	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0002b	85 c0		 test	 eax, eax
  0002d	75 10		 jne	 SHORT $LN7@win32_writ

; 180  :         {
; 181  :             DWORD dwErr = GetLastError();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 182  :             if (dwErr == ERROR_HANDLE_EOF)

  00035	83 f8 26	 cmp	 eax, 38			; 00000026H
  00038	75 02		 jne	 SHORT $LN1@win32_writ

; 183  :                 dwErr = 0;

  0003a	33 c0		 xor	 eax, eax
$LN1@win32_writ:

; 184  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_writ:

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     return ret;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN2@win32_writ:
  00042	5e		 pop	 esi

; 189  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 150  :     uLong ret=0;
; 151  :     HANDLE hFile = NULL;
; 152  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
  0000d	85 f6		 test	 esi, esi
  0000f	74 31		 je	 SHORT $LN2@win32_read

; 153  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 154  : 
; 155  :     if (hFile != NULL)

  00013	85 c9		 test	 ecx, ecx
  00015	74 2b		 je	 SHORT $LN2@win32_read

; 156  :     {
; 157  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00017	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _ret$[ebp]
  0001e	50		 push	 eax
  0001f	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0002b	85 c0		 test	 eax, eax
  0002d	75 10		 jne	 SHORT $LN7@win32_read

; 158  :         {
; 159  :             DWORD dwErr = GetLastError();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 160  :             if (dwErr == ERROR_HANDLE_EOF)

  00035	83 f8 26	 cmp	 eax, 38			; 00000026H
  00038	75 02		 jne	 SHORT $LN1@win32_read

; 161  :                 dwErr = 0;

  0003a	33 c0		 xor	 eax, eax
$LN1@win32_read:

; 162  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_read:

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     return ret;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN2@win32_read:
  00042	5e		 pop	 esi

; 167  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_win32_read_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_win32_build_iowin PROC					; COMDAT
; _hFile$ = edi

; 71   :     voidpf ret=NULL;

  00000	33 c0		 xor	 eax, eax

; 72   : 
; 73   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  00002	85 ff		 test	 edi, edi
  00004	74 2c		 je	 SHORT $LN1@win32_buil
  00006	83 ff ff	 cmp	 edi, -1
  00009	74 27		 je	 SHORT $LN1@win32_buil

; 74   :     {
; 75   :         WIN32FILE_IOWIN w32fiow;
; 76   :         w32fiow.hf = hFile;
; 77   :         w32fiow.error = 0;
; 78   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	6a 08		 push	 8
  0000f	33 db		 xor	 ebx, ebx
  00011	e8 00 00 00 00	 call	 _malloc
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 04	 add	 esp, 4

; 79   : 
; 80   :         if (ret==NULL)

  0001b	85 f6		 test	 esi, esi
  0001d	75 0c		 jne	 SHORT $LN2@win32_buil

; 81   :             CloseHandle(hFile);

  0001f	57		 push	 edi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 84   :     }
; 85   :     return ret;

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 86   : }

  0002a	c3		 ret	 0
$LN2@win32_buil:

; 82   :         else
; 83   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002e	89 3e		 mov	 DWORD PTR [esi], edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
$LN1@win32_buil:

; 86   : }

  00032	c3		 ret	 0
_win32_build_iowin ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_lpdwFlagsAndAttributes$ = 8				; size = 4
_win32_translate_open_mode PROC				; COMDAT
; _mode$ = edx
; _lpdwDesiredAccess$ = ecx
; _lpdwCreationDisposition$ = eax
; _lpdwShareMode$ = esi

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 49   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpdwFlagsAndAttributes$[ebp]

; 50   : 
; 51   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00008	8b da		 mov	 ebx, edx
  0000a	80 e3 03	 and	 bl, 3
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	5f		 pop	 edi
  00014	80 fb 01	 cmp	 bl, 1
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00029	5b		 pop	 ebx
  0002a	75 14		 jne	 SHORT $LN5@win32_tran

; 52   :     {
; 53   :         *lpdwDesiredAccess = GENERIC_READ;

  0002c	c7 01 00 00 00
	80		 mov	 DWORD PTR [ecx], -2147483648 ; 80000000H

; 54   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00032	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 55   :         *lpdwShareMode = FILE_SHARE_READ;

  00038	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 66   :     }
; 67   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@win32_tran:

; 56   :     }
; 57   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00040	f6 c2 04	 test	 dl, 4
  00043	74 0e		 je	 SHORT $LN3@win32_tran

; 58   :     {
; 59   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;
; 60   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00045	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 63   :     {
; 64   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0004b	c7 01 00 00 00
	c0		 mov	 DWORD PTR [ecx], -1073741824 ; c0000000H

; 66   :     }
; 67   : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN3@win32_tran:

; 61   :     }
; 62   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00053	f6 c2 08	 test	 dl, 8
  00056	74 0c		 je	 SHORT $LN1@win32_tran

; 65   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  00058	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  0005e	c7 01 00 00 00
	c0		 mov	 DWORD PTR [ecx], -1073741824 ; c0000000H
$LN1@win32_tran:

; 66   :     }
; 67   : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_win32_translate_open_mode ENDP
PUBLIC	_win32_open_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 135  :     const char* mode_fopen = NULL;
; 136  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 137  :     HANDLE hFile = NULL;
; 138  : 
; 139  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 140  : 
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open

; 142  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open:

; 143  : 
; 144  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 145  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcW
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  :     const char* mode_fopen = NULL;
; 121  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 122  :     HANDLE hFile = NULL;
; 123  : 
; 124  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 125  : 
; 126  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@2
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@2

; 127  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@2:

; 128  : 
; 129  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 130  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcA
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  :     const char* mode_fopen = NULL;
; 106  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 107  :     HANDLE hFile = NULL;
; 108  : 
; 109  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 110  : 
; 111  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@3
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@3

; 112  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@3:

; 113  : 
; 114  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 115  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     const char* mode_fopen = NULL;
; 91   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 92   :     HANDLE hFile = NULL;
; 93   : 
; 94   :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@4
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@4

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@4:

; 98   : 
; 99   :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 100  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_func ENDP
PUBLIC	_fill_win32_filefunc64W
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 382  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 383  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 384  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 385  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 386  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 387  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 388  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 389  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64A
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 369  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 370  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 371  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 372  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 373  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 374  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 375  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 376  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 355  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 356  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 357  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 358  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 359  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 360  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 361  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 362  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 363  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 343  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 344  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 345  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 346  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 347  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek_file_func

; 348  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 349  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 350  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 351  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc ENDP
END
