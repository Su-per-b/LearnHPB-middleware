; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	E:\SRI\straylight_repo\visualStudioWorkspace\zlib-1.2.6\inflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@ ; `string'
PUBLIC	??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@ ; `string'
PUBLIC	??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@	; `string'
PUBLIC	??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@ ; `string'
PUBLIC	??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@	; `string'
PUBLIC	??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@	; `string'
PUBLIC	??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@ ; `string'
;	COMDAT ??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@
CONST	SEGMENT
??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@ DB 'incorrect length che'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@
CONST	SEGMENT
??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@ DB 'incorrect data check', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@ DB 'header crc mismatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@ DB 'unknown header fl'
	DB	'ags set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@
CONST	SEGMENT
??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@ DB 'invalid window size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@
CONST	SEGMENT
??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@ DB 'unknown compress'
	DB	'ion method', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@
CONST	SEGMENT
??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@ DB 'incorrect header che'
	DB	'ck', 00H					; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflate@@9@9 DW 010H				; `inflate'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateMark@4
; Function compile flags: /Ogtp
; File e:\sri\straylight_repo\visualstudioworkspace\zlib-1.2.6\inflate.c
;	COMDAT _inflateMark@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateMark@4 PROC					; COMDAT

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 :     struct inflate_state FAR *state;
; 1495 : 
; 1496 :     if (strm == Z_NULL || strm->state == Z_NULL) return -1L << 16;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 4e		 je	 SHORT $LN1@inflateMar
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 47		 je	 SHORT $LN1@inflateMar

; 1497 :     state = (struct inflate_state FAR *)strm->state;
; 1498 :     return ((long)(state->back) << 16) +
; 1499 :         (state->mode == COPY ? state->length :
; 1500 :             (state->mode == MATCH ? state->was - state->length : 0));

  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00016	75 12		 jne	 SHORT $LN7@inflateMar
  00018	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0001b	8b 80 c4 1b 00
	00		 mov	 eax, DWORD PTR [eax+7108]
  00021	c1 e0 10	 shl	 eax, 16			; 00000010H
  00024	03 c1		 add	 eax, ecx

; 1501 : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN7@inflateMar:

; 1497 :     state = (struct inflate_state FAR *)strm->state;
; 1498 :     return ((long)(state->back) << 16) +
; 1499 :         (state->mode == COPY ? state->length :
; 1500 :             (state->mode == MATCH ? state->was - state->length : 0));

  0002a	83 f9 18	 cmp	 ecx, 24			; 00000018H
  0002d	75 18		 jne	 SHORT $LN5@inflateMar
  0002f	8b 88 c8 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7112]
  00035	2b 48 40	 sub	 ecx, DWORD PTR [eax+64]
  00038	8b 80 c4 1b 00
	00		 mov	 eax, DWORD PTR [eax+7108]
  0003e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00041	03 c1		 add	 eax, ecx

; 1501 : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@inflateMar:

; 1497 :     state = (struct inflate_state FAR *)strm->state;
; 1498 :     return ((long)(state->back) << 16) +
; 1499 :         (state->mode == COPY ? state->length :
; 1500 :             (state->mode == MATCH ? state->was - state->length : 0));

  00047	8b 80 c4 1b 00
	00		 mov	 eax, DWORD PTR [eax+7108]
  0004d	33 c9		 xor	 ecx, ecx
  0004f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00052	03 c1		 add	 eax, ecx

; 1501 : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN1@inflateMar:

; 1494 :     struct inflate_state FAR *state;
; 1495 : 
; 1496 :     if (strm == Z_NULL || strm->state == Z_NULL) return -1L << 16;

  00058	b8 00 00 ff ff	 mov	 eax, -65536		; ffff0000H

; 1501 : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
_inflateMark@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateUndermine@8
; Function compile flags: /Ogtp
;	COMDAT _inflateUndermine@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_subvert$ = 12						; size = 4
_inflateUndermine@8 PROC				; COMDAT

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1478 :     struct inflate_state FAR *state;
; 1479 : 
; 1480 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 1a		 je	 SHORT $LN1@inflateUnd
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 13		 je	 SHORT $LN1@inflateUnd

; 1481 :     state = (struct inflate_state FAR *)strm->state;
; 1482 :     state->sane = !subvert;
; 1483 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1484 :     return Z_OK;
; 1485 : #else
; 1486 :     state->sane = 1;

  00011	c7 80 c0 1b 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+7104], 1

; 1487 :     return Z_DATA_ERROR;

  0001b	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 1488 : #endif
; 1489 : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN1@inflateUnd:

; 1478 :     struct inflate_state FAR *state;
; 1479 : 
; 1480 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1488 : #endif
; 1489 : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_inflateUndermine@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateCopy@8
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT _inflateCopy@8
_TEXT	SEGMENT
_copy$ = -4						; size = 4
_dest$ = 8						; size = 4
_window$ = 12						; size = 4
_source$ = 12						; size = 4
_inflateCopy@8 PROC					; COMDAT

; 1430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1431 :     struct inflate_state FAR *state;
; 1432 :     struct inflate_state FAR *copy;
; 1433 :     unsigned char FAR *window;
; 1434 :     unsigned wsize;
; 1435 : 
; 1436 :     /* check input */
; 1437 :     if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
; 1438 :         source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)

  00004	83 7d 08 00	 cmp	 DWORD PTR _dest$[ebp], 0
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	0f 84 36 01 00
	00		 je	 $LN6@inflateCop
  00010	8b 75 0c	 mov	 esi, DWORD PTR _source$[ebp]
  00013	85 f6		 test	 esi, esi
  00015	0f 84 2b 01 00
	00		 je	 $LN6@inflateCop
  0001b	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  0001e	85 db		 test	 ebx, ebx
  00020	0f 84 20 01 00
	00		 je	 $LN6@inflateCop
  00026	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00029	85 c0		 test	 eax, eax
  0002b	0f 84 15 01 00
	00		 je	 $LN6@inflateCop
  00031	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00035	0f 84 0b 01 00
	00		 je	 $LN6@inflateCop

; 1440 :     state = (struct inflate_state FAR *)source->state;
; 1441 : 
; 1442 :     /* allocate space */
; 1443 :     copy = (struct inflate_state FAR *)
; 1444 :            ZALLOC(source, 1, sizeof(struct inflate_state));

  0003b	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0003e	57		 push	 edi
  0003f	68 cc 1b 00 00	 push	 7116			; 00001bccH
  00044	6a 01		 push	 1
  00046	51		 push	 ecx
  00047	ff d0		 call	 eax
  00049	8b f8		 mov	 edi, eax
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	89 7d fc	 mov	 DWORD PTR _copy$[ebp], edi

; 1445 :     if (copy == Z_NULL) return Z_MEM_ERROR;

  00051	85 ff		 test	 edi, edi
  00053	74 3a		 je	 SHORT $LN11@inflateCop

; 1446 :     window = Z_NULL;
; 1447 :     if (state->window != Z_NULL) {

  00055	83 7b 34 00	 cmp	 DWORD PTR [ebx+52], 0
  00059	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _window$[ebp], 0
  00060	74 3b		 je	 SHORT $LN3@inflateCop

; 1448 :         window = (unsigned char FAR *)
; 1449 :                  ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));

  00062	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00065	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00068	ba 01 00 00 00	 mov	 edx, 1
  0006d	d3 e2		 shl	 edx, cl
  0006f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00072	6a 01		 push	 1
  00074	52		 push	 edx
  00075	50		 push	 eax
  00076	ff d1		 call	 ecx
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	89 45 0c	 mov	 DWORD PTR _window$[ebp], eax

; 1450 :         if (window == Z_NULL) {

  0007e	85 c0		 test	 eax, eax
  00080	75 1b		 jne	 SHORT $LN3@inflateCop

; 1451 :             ZFREE(source, copy);

  00082	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00085	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00088	57		 push	 edi
  00089	52		 push	 edx
  0008a	ff d0		 call	 eax
  0008c	83 c4 08	 add	 esp, 8
$LN11@inflateCop:

; 1452 :             return Z_MEM_ERROR;

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00096	5b		 pop	 ebx

; 1472 : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN3@inflateCop:

; 1453 :         }
; 1454 :     }
; 1455 : 
; 1456 :     /* copy state */
; 1457 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0009d	8b 7d 08	 mov	 edi, DWORD PTR _dest$[ebp]
  000a0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH

; 1458 :     zmemcpy((voidpf)copy, (voidpf)state, sizeof(struct inflate_state));

  000a5	68 cc 1b 00 00	 push	 7116			; 00001bccH
  000aa	f3 a5		 rep movsd
  000ac	8b 75 fc	 mov	 esi, DWORD PTR _copy$[ebp]
  000af	53		 push	 ebx
  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 _memcpy

; 1459 :     if (state->lencode >= state->codes &&
; 1460 :         state->lencode <= state->codes + ENOUGH - 1) {

  000b6	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  000b9	8d 8b 30 05 00
	00		 lea	 ecx, DWORD PTR [ebx+1328]
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	3b c1		 cmp	 eax, ecx
  000c4	72 36		 jb	 SHORT $LN2@inflateCop
  000c6	8d 93 bc 1b 00
	00		 lea	 edx, DWORD PTR [ebx+7100]
  000cc	3b c2		 cmp	 eax, edx
  000ce	77 2c		 ja	 SHORT $LN2@inflateCop

; 1461 :         copy->lencode = copy->codes + (state->lencode - state->codes);

  000d0	2b c3		 sub	 eax, ebx
  000d2	2d 30 05 00 00	 sub	 eax, 1328		; 00000530H
  000d7	c1 f8 02	 sar	 eax, 2
  000da	8d 84 86 30 05
	00 00		 lea	 eax, DWORD PTR [esi+eax*4+1328]
  000e1	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 1462 :         copy->distcode = copy->codes + (state->distcode - state->codes);

  000e4	8b 4b 50	 mov	 ecx, DWORD PTR [ebx+80]
  000e7	2b cb		 sub	 ecx, ebx
  000e9	81 e9 30 05 00
	00		 sub	 ecx, 1328		; 00000530H
  000ef	c1 f9 02	 sar	 ecx, 2
  000f2	8d 94 8e 30 05
	00 00		 lea	 edx, DWORD PTR [esi+ecx*4+1328]
  000f9	89 56 50	 mov	 DWORD PTR [esi+80], edx
$LN2@inflateCop:

; 1463 :     }
; 1464 :     copy->next = copy->codes + (state->next - state->codes);

  000fc	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]

; 1465 :     if (window != Z_NULL) {

  000ff	8b 7d 0c	 mov	 edi, DWORD PTR _window$[ebp]
  00102	2b c3		 sub	 eax, ebx
  00104	2d 30 05 00 00	 sub	 eax, 1328		; 00000530H
  00109	c1 f8 02	 sar	 eax, 2
  0010c	8d 8c 86 30 05
	00 00		 lea	 ecx, DWORD PTR [esi+eax*4+1328]
  00113	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  00116	85 ff		 test	 edi, edi
  00118	74 18		 je	 SHORT $LN1@inflateCop

; 1466 :         wsize = 1U << state->wbits;

  0011a	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]

; 1467 :         zmemcpy(window, state->window, wsize);

  0011d	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00120	ba 01 00 00 00	 mov	 edx, 1
  00125	d3 e2		 shl	 edx, cl
  00127	52		 push	 edx
  00128	50		 push	 eax
  00129	57		 push	 edi
  0012a	e8 00 00 00 00	 call	 _memcpy
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@inflateCop:

; 1468 :     }
; 1469 :     copy->window = window;
; 1470 :     dest->state = (struct internal_state FAR *)copy;

  00132	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00135	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00138	5f		 pop	 edi
  00139	89 71 1c	 mov	 DWORD PTR [ecx+28], esi
  0013c	5e		 pop	 esi

; 1471 :     return Z_OK;

  0013d	33 c0		 xor	 eax, eax
  0013f	5b		 pop	 ebx

; 1472 : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 08 00	 ret	 8
$LN6@inflateCop:
  00146	5e		 pop	 esi

; 1439 :         return Z_STREAM_ERROR;

  00147	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0014c	5b		 pop	 ebx

; 1472 : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 08 00	 ret	 8
_inflateCopy@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateSyncPoint@4
; Function compile flags: /Ogtp
;	COMDAT _inflateSyncPoint@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateSyncPoint@4 PROC				; COMDAT

; 1419 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1420 :     struct inflate_state FAR *state;
; 1421 : 
; 1422 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 21		 je	 SHORT $LN1@inflateSyn
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1a		 je	 SHORT $LN1@inflateSyn

; 1423 :     state = (struct inflate_state FAR *)strm->state;
; 1424 :     return state->mode == STORED && state->bits == 0;

  00011	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  00014	75 0f		 jne	 SHORT $LN5@inflateSyn
  00016	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  0001a	75 09		 jne	 SHORT $LN5@inflateSyn
  0001c	b8 01 00 00 00	 mov	 eax, 1

; 1425 : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN5@inflateSyn:

; 1423 :     state = (struct inflate_state FAR *)strm->state;
; 1424 :     return state->mode == STORED && state->bits == 0;

  00025	33 c0		 xor	 eax, eax

; 1425 : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN1@inflateSyn:

; 1420 :     struct inflate_state FAR *state;
; 1421 : 
; 1422 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0002b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1425 : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
_inflateSyncPoint@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _syncsearch
_TEXT	SEGMENT
_have$ = 8						; size = 4
_len$ = 12						; size = 4
_syncsearch PROC					; COMDAT
; _buf$ = esi

; 1347 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _have$[ebp]

; 1348 :     unsigned got;
; 1349 :     unsigned next;
; 1350 : 
; 1351 :     got = *have;

  00006	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1352 :     next = 0;

  00008	33 c0		 xor	 eax, eax

; 1353 :     while (next < len && got < 4) {

  0000a	39 45 0c	 cmp	 DWORD PTR _len$[ebp], eax
  0000d	76 41		 jbe	 SHORT $LN11@syncsearch
  0000f	53		 push	 ebx
  00010	57		 push	 edi
$LL6@syncsearch:
  00011	83 f9 04	 cmp	 ecx, 4
  00014	73 35		 jae	 SHORT $LN12@syncsearch

; 1354 :         if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))

  00016	8a 14 30	 mov	 dl, BYTE PTR [eax+esi]
  00019	83 f9 02	 cmp	 ecx, 2
  0001c	1b ff		 sbb	 edi, edi
  0001e	81 e7 01 ff ff
	ff		 and	 edi, -255		; ffffff01H
  00024	0f b6 da	 movzx	 ebx, dl
  00027	81 c7 ff 00 00
	00		 add	 edi, 255		; 000000ffH
  0002d	3b df		 cmp	 ebx, edi
  0002f	75 03		 jne	 SHORT $LN4@syncsearch

; 1355 :             got++;

  00031	41		 inc	 ecx
  00032	eb 11		 jmp	 SHORT $LN1@syncsearch
$LN4@syncsearch:

; 1356 :         else if (buf[next])

  00034	84 d2		 test	 dl, dl
  00036	74 04		 je	 SHORT $LN2@syncsearch

; 1357 :             got = 0;

  00038	33 c9		 xor	 ecx, ecx

; 1358 :         else

  0003a	eb 09		 jmp	 SHORT $LN1@syncsearch
$LN2@syncsearch:

; 1359 :             got = 4 - got;

  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	2b d1		 sub	 edx, ecx
  00043	8b ca		 mov	 ecx, edx
$LN1@syncsearch:

; 1360 :         next++;

  00045	40		 inc	 eax
  00046	3b 45 0c	 cmp	 eax, DWORD PTR _len$[ebp]
  00049	72 c6		 jb	 SHORT $LL6@syncsearch
$LN12@syncsearch:

; 1361 :     }
; 1362 :     *have = got;

  0004b	8b 55 08	 mov	 edx, DWORD PTR _have$[ebp]
  0004e	5f		 pop	 edi
  0004f	5b		 pop	 ebx
$LN11@syncsearch:
  00050	89 0a		 mov	 DWORD PTR [edx], ecx

; 1363 :     return next;
; 1364 : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_syncsearch ENDP
_TEXT	ENDS
PUBLIC	_inflateGetHeader@8
; Function compile flags: /Ogtp
;	COMDAT _inflateGetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_inflateGetHeader@8 PROC				; COMDAT

; 1318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1319 :     struct inflate_state FAR *state;
; 1320 : 
; 1321 :     /* check state */
; 1322 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 20		 je	 SHORT $LN2@inflateGet
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 19		 je	 SHORT $LN2@inflateGet

; 1323 :     state = (struct inflate_state FAR *)strm->state;
; 1324 :     if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;

  00011	f6 40 08 02	 test	 BYTE PTR [eax+8], 2
  00015	74 13		 je	 SHORT $LN2@inflateGet

; 1325 : 
; 1326 :     /* save header structure */
; 1327 :     state->head = head;

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _head$[ebp]
  0001a	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 1328 :     head->done = 0;

  0001d	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 1329 :     return Z_OK;

  00024	33 c0		 xor	 eax, eax

; 1330 : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN2@inflateGet:

; 1319 :     struct inflate_state FAR *state;
; 1320 : 
; 1321 :     /* check state */
; 1322 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0002a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1330 : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
_inflateGetHeader@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateEnd@4
; Function compile flags: /Ogtp
;	COMDAT _inflateEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateEnd@4 PROC					; COMDAT

; 1260 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1261 :     struct inflate_state FAR *state;
; 1262 :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 3d		 je	 SHORT $LN2@inflateEnd
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 36		 je	 SHORT $LN2@inflateEnd
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 2f		 je	 SHORT $LN2@inflateEnd

; 1264 :     state = (struct inflate_state FAR *)strm->state;
; 1265 :     if (state->window != Z_NULL) ZFREE(strm, state->window);

  00019	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0001c	85 c0		 test	 eax, eax
  0001e	74 0a		 je	 SHORT $LN1@inflateEnd
  00020	50		 push	 eax
  00021	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00024	50		 push	 eax
  00025	ff d1		 call	 ecx
  00027	83 c4 08	 add	 esp, 8
$LN1@inflateEnd:

; 1266 :     ZFREE(strm, strm->state);

  0002a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0002d	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00030	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	83 c4 08	 add	 esp, 8

; 1267 :     strm->state = Z_NULL;

  0003a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1268 :     Tracev((stderr, "inflate: end\n"));
; 1269 :     return Z_OK;

  00041	33 c0		 xor	 eax, eax
  00043	5e		 pop	 esi

; 1270 : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN2@inflateEnd:

; 1263 :         return Z_STREAM_ERROR;

  00048	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0004d	5e		 pop	 esi

; 1270 : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
_inflateEnd@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _updatewindow
_TEXT	SEGMENT
_dist$ = -4						; size = 4
_updatewindow PROC					; COMDAT
; _strm$ = ebx
; _out$ = eax

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 382  :     struct inflate_state FAR *state;
; 383  :     unsigned copy, dist;
; 384  : 
; 385  :     state = (struct inflate_state FAR *)strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 386  : 
; 387  :     /* if it hasn't been done already, allocate space for the window */
; 388  :     if (state->window == Z_NULL) {

  00008	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
  0000c	57		 push	 edi
  0000d	8b f8		 mov	 edi, eax
  0000f	75 2b		 jne	 SHORT $LN13@updatewind

; 389  :         state->window = (unsigned char FAR *)
; 390  :                         ZALLOC(strm, 1U << state->wbits,
; 391  :                                sizeof(unsigned char));

  00011	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00014	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	d3 e0		 shl	 eax, cl
  0001e	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00021	6a 01		 push	 1
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff d2		 call	 edx
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 392  :         if (state->window == Z_NULL) return 1;

  0002d	85 c0		 test	 eax, eax
  0002f	75 0b		 jne	 SHORT $LN13@updatewind
  00031	5f		 pop	 edi
  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	5e		 pop	 esi

; 426  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN13@updatewind:

; 393  :     }
; 394  : 
; 395  :     /* if window not in use yet, initialize */
; 396  :     if (state->wsize == 0) {

  0003c	33 c0		 xor	 eax, eax
  0003e	39 46 28	 cmp	 DWORD PTR [esi+40], eax
  00041	75 13		 jne	 SHORT $LN8@updatewind

; 397  :         state->wsize = 1U << state->wbits;

  00043	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00046	ba 01 00 00 00	 mov	 edx, 1
  0004b	d3 e2		 shl	 edx, cl

; 398  :         state->wnext = 0;

  0004d	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 399  :         state->whave = 0;

  00050	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00053	89 56 28	 mov	 DWORD PTR [esi+40], edx
$LN8@updatewind:

; 400  :     }
; 401  : 
; 402  :     /* copy state->wsize or less output bytes into the circular window */
; 403  :     copy = out - strm->avail_out;

  00056	2b 7b 10	 sub	 edi, DWORD PTR [ebx+16]

; 404  :     if (copy >= state->wsize) {

  00059	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0005c	3b f8		 cmp	 edi, eax
  0005e	72 28		 jb	 SHORT $LN7@updatewind

; 405  :         zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);

  00060	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00063	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00066	50		 push	 eax
  00067	2b c8		 sub	 ecx, eax
  00069	51		 push	 ecx
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _memcpy

; 406  :         state->wnext = 0;
; 407  :         state->whave = state->wsize;

  00070	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00079	5f		 pop	 edi
  0007a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 423  :         }
; 424  :     }
; 425  :     return 0;

  00081	33 c0		 xor	 eax, eax
  00083	5e		 pop	 esi

; 426  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN7@updatewind:

; 408  :     }
; 409  :     else {
; 410  :         dist = state->wsize - state->wnext;

  00088	2b 46 30	 sub	 eax, DWORD PTR [esi+48]
  0008b	89 45 fc	 mov	 DWORD PTR _dist$[ebp], eax

; 411  :         if (dist > copy) dist = copy;

  0008e	3b c7		 cmp	 eax, edi
  00090	76 05		 jbe	 SHORT $LN5@updatewind
  00092	89 7d fc	 mov	 DWORD PTR _dist$[ebp], edi
  00095	8b c7		 mov	 eax, edi
$LN5@updatewind:

; 412  :         zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);

  00097	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0009a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0009d	03 56 30	 add	 edx, DWORD PTR [esi+48]
  000a0	50		 push	 eax
  000a1	2b cf		 sub	 ecx, edi
  000a3	51		 push	 ecx
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _memcpy

; 413  :         copy -= dist;

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _dist$[ebp]
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	2b f9		 sub	 edi, ecx

; 414  :         if (copy) {

  000b2	74 24		 je	 SHORT $LN4@updatewind

; 415  :             zmemcpy(state->window, strm->next_out - copy, copy);

  000b4	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000b7	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000ba	57		 push	 edi
  000bb	2b c7		 sub	 eax, edi
  000bd	50		 push	 eax
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy

; 416  :             state->wnext = copy;
; 417  :             state->whave = state->wsize;

  000c4	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  000cd	5f		 pop	 edi

; 422  :             if (state->whave < state->wsize) state->whave += dist;

  000ce	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 423  :         }
; 424  :     }
; 425  :     return 0;

  000d1	33 c0		 xor	 eax, eax
  000d3	5e		 pop	 esi

; 426  : }

  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN4@updatewind:

; 418  :         }
; 419  :         else {
; 420  :             state->wnext += dist;
; 421  :             if (state->wnext == state->wsize) state->wnext = 0;

  000d8	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000db	01 4e 30	 add	 DWORD PTR [esi+48], ecx
  000de	39 46 30	 cmp	 DWORD PTR [esi+48], eax
  000e1	75 07		 jne	 SHORT $LN2@updatewind
  000e3	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@updatewind:

; 422  :             if (state->whave < state->wsize) state->whave += dist;

  000ea	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000ed	3b d0		 cmp	 edx, eax
  000ef	73 05		 jae	 SHORT $LN1@updatewind
  000f1	03 d1		 add	 edx, ecx
  000f3	89 56 2c	 mov	 DWORD PTR [esi+44], edx
$LN1@updatewind:

; 423  :         }
; 424  :     }
; 425  :     return 0;

  000f6	5f		 pop	 edi
  000f7	33 c0		 xor	 eax, eax
  000f9	5e		 pop	 esi

; 426  : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_updatewindow ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = eax

; 263  : #ifdef BUILDFIXED
; 264  :     static int virgin = 1;
; 265  :     static code *lenfix, *distfix;
; 266  :     static code fixed[544];
; 267  : 
; 268  :     /* build fixed huffman tables if first call (may not be thread safe) */
; 269  :     if (virgin) {
; 270  :         unsigned sym, bits;
; 271  :         static code *next;
; 272  : 
; 273  :         /* literal/length table */
; 274  :         sym = 0;
; 275  :         while (sym < 144) state->lens[sym++] = 8;
; 276  :         while (sym < 256) state->lens[sym++] = 9;
; 277  :         while (sym < 280) state->lens[sym++] = 7;
; 278  :         while (sym < 288) state->lens[sym++] = 8;
; 279  :         next = fixed;
; 280  :         lenfix = next;
; 281  :         bits = 9;
; 282  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 283  : 
; 284  :         /* distance table */
; 285  :         sym = 0;
; 286  :         while (sym < 32) state->lens[sym++] = 5;
; 287  :         distfix = next;
; 288  :         bits = 5;
; 289  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 290  : 
; 291  :         /* do this just once */
; 292  :         virgin = 0;
; 293  :     }
; 294  : #else /* !BUILDFIXED */
; 295  : #   include "inffixed.h"
; 296  : #endif /* BUILDFIXED */
; 297  :     state->lencode = lenfix;

  00000	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], OFFSET ?lenfix@?1??fixedtables@@9@9

; 298  :     state->lenbits = 9;

  00007	c7 40 54 09 00
	00 00		 mov	 DWORD PTR [eax+84], 9

; 299  :     state->distcode = distfix;

  0000e	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], OFFSET ?distfix@?1??fixedtables@@9@9

; 300  :     state->distbits = 5;

  00015	c7 40 58 05 00
	00 00		 mov	 DWORD PTR [eax+88], 5

; 301  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
PUBLIC	_inflatePrime@12
; Function compile flags: /Ogtp
;	COMDAT _inflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_inflatePrime@12 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     struct inflate_state FAR *state;
; 235  : 
; 236  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	3b c2		 cmp	 eax, edx
  0000a	74 53		 je	 SHORT $LN4@inflatePri
  0000c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000f	3b c2		 cmp	 eax, edx
  00011	74 4c		 je	 SHORT $LN4@inflatePri

; 237  :     state = (struct inflate_state FAR *)strm->state;
; 238  :     if (bits < 0) {

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _bits$[ebp]
  00016	3b ca		 cmp	 ecx, edx
  00018	7d 0c		 jge	 SHORT $LN3@inflatePri

; 239  :         state->hold = 0;

  0001a	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 240  :         state->bits = 0;

  0001d	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 241  :         return Z_OK;

  00020	33 c0		 xor	 eax, eax

; 248  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN3@inflatePri:
  00026	56		 push	 esi

; 242  :     }
; 243  :     if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;

  00027	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002a	7f 29		 jg	 SHORT $LN1@inflatePri
  0002c	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0002f	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]
  00032	83 fe 20	 cmp	 esi, 32			; 00000020H
  00035	77 1e		 ja	 SHORT $LN1@inflatePri

; 244  :     value &= (1L << bits) - 1;

  00037	57		 push	 edi
  00038	bf 01 00 00 00	 mov	 edi, 1
  0003d	d3 e7		 shl	 edi, cl

; 245  :     state->hold += value << state->bits;

  0003f	8b ca		 mov	 ecx, edx

; 246  :     state->bits += bits;

  00041	89 70 3c	 mov	 DWORD PTR [eax+60], esi
  00044	4f		 dec	 edi
  00045	23 7d 10	 and	 edi, DWORD PTR _value$[ebp]
  00048	d3 e7		 shl	 edi, cl
  0004a	01 78 38	 add	 DWORD PTR [eax+56], edi
  0004d	5f		 pop	 edi

; 247  :     return Z_OK;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 248  : }

  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
$LN1@inflatePri:

; 242  :     }
; 243  :     if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	5e		 pop	 esi

; 248  : }

  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@inflatePri:

; 234  :     struct inflate_state FAR *state;
; 235  : 
; 236  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0005f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 248  : }

  00064	5d		 pop	 ebp
  00065	c2 0c 00	 ret	 12			; 0000000cH
_inflatePrime@12 ENDP
_TEXT	ENDS
PUBLIC	_inflateResetKeep@4
; Function compile flags: /Ogtp
;	COMDAT _inflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateResetKeep@4 PROC				; COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  :     struct inflate_state FAR *state;
; 107  : 
; 108  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	3b ce		 cmp	 ecx, esi
  0000b	74 62		 je	 SHORT $LN2@inflateRes
  0000d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00010	3b c6		 cmp	 eax, esi
  00012	74 5b		 je	 SHORT $LN2@inflateRes

; 109  :     state = (struct inflate_state FAR *)strm->state;
; 110  :     strm->total_in = strm->total_out = state->total = 0;

  00014	89 70 1c	 mov	 DWORD PTR [eax+28], esi
  00017	89 71 14	 mov	 DWORD PTR [ecx+20], esi
  0001a	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 111  :     strm->msg = Z_NULL;

  0001d	89 71 18	 mov	 DWORD PTR [ecx+24], esi

; 112  :     if (state->wrap)        /* to support ill-conceived Java test suite */

  00020	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00023	3b d6		 cmp	 edx, esi
  00025	74 06		 je	 SHORT $LN1@inflateRes

; 113  :         strm->adler = state->wrap & 1;

  00027	83 e2 01	 and	 edx, 1
  0002a	89 51 30	 mov	 DWORD PTR [ecx+48], edx
$LN1@inflateRes:

; 114  :     state->mode = HEAD;
; 115  :     state->last = 0;
; 116  :     state->havedict = 0;
; 117  :     state->dmax = 32768U;
; 118  :     state->head = Z_NULL;
; 119  :     state->hold = 0;
; 120  :     state->bits = 0;
; 121  :     state->lencode = state->distcode = state->next = state->codes;

  0002d	8d 88 30 05 00
	00		 lea	 ecx, DWORD PTR [eax+1328]
  00033	89 30		 mov	 DWORD PTR [eax], esi
  00035	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00038	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  0003b	89 70 20	 mov	 DWORD PTR [eax+32], esi
  0003e	89 70 38	 mov	 DWORD PTR [eax+56], esi
  00041	89 70 3c	 mov	 DWORD PTR [eax+60], esi
  00044	c7 40 14 00 80
	00 00		 mov	 DWORD PTR [eax+20], 32768 ; 00008000H
  0004b	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
  0004e	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00051	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 122  :     state->sane = 1;

  00054	c7 80 c0 1b 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+7104], 1

; 123  :     state->back = -1;

  0005e	c7 80 c4 1b 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+7108], -1

; 124  :     Tracev((stderr, "inflate: reset\n"));
; 125  :     return Z_OK;

  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi

; 126  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN2@inflateRes:

; 106  :     struct inflate_state FAR *state;
; 107  : 
; 108  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0006f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00074	5e		 pop	 esi

; 126  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
_inflateResetKeep@4 ENDP
PUBLIC	_inflateSetDictionary@12
; Function compile flags: /Ogtp
;	COMDAT _inflateSetDictionary@12
_TEXT	SEGMENT
_avail$ = 8						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_next$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_inflateSetDictionary@12 PROC				; COMDAT

; 1276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1277 :     struct inflate_state FAR *state;
; 1278 :     unsigned long id;
; 1279 :     unsigned char *next;
; 1280 :     unsigned avail;
; 1281 :     int ret;
; 1282 : 
; 1283 :     /* check state */
; 1284 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	57		 push	 edi
  00008	85 db		 test	 ebx, ebx
  0000a	0f 84 a6 00 00
	00		 je	 $LN5@inflateSet
  00010	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  00013	85 ff		 test	 edi, edi
  00015	0f 84 9b 00 00
	00		 je	 $LN5@inflateSet

; 1285 :     state = (struct inflate_state FAR *)strm->state;
; 1286 :     if (state->wrap != 0 && state->mode != DICT)

  0001b	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0001f	56		 push	 esi
  00020	8b 75 10	 mov	 esi, DWORD PTR _dictLength$[ebp]
  00023	74 11		 je	 SHORT $LN4@inflateSet
  00025	83 3f 0a	 cmp	 DWORD PTR [edi], 10	; 0000000aH
  00028	74 11		 je	 SHORT $LN9@inflateSet

; 1287 :         return Z_STREAM_ERROR;

  0002a	5e		 pop	 esi
  0002b	5f		 pop	 edi
  0002c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00031	5b		 pop	 ebx

; 1313 : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN4@inflateSet:

; 1288 : 
; 1289 :     /* check for correct dictionary id */
; 1290 :     if (state->mode == DICT) {

  00036	83 3f 0a	 cmp	 DWORD PTR [edi], 10	; 0000000aH
  00039	75 27		 jne	 SHORT $LN10@inflateSet
$LN9@inflateSet:

; 1291 :         id = adler32(0L, Z_NULL, 0);
; 1292 :         id = adler32(id, dictionary, dictLength);

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _dictionary$[ebp]
  0003e	56		 push	 esi
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 _adler32@12
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _adler32@12

; 1293 :         if (id != state->check)

  00051	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  00054	74 0c		 je	 SHORT $LN10@inflateSet

; 1294 :             return Z_DATA_ERROR;

  00056	5e		 pop	 esi
  00057	5f		 pop	 edi
  00058	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0005d	5b		 pop	 ebx

; 1313 : }

  0005e	5d		 pop	 ebp
  0005f	c2 0c 00	 ret	 12			; 0000000cH
$LN10@inflateSet:

; 1295 :     }
; 1296 : 
; 1297 :     /* copy dictionary to window using updatewindow(), which will amend the
; 1298 :        existing dictionary if appropriate */
; 1299 :     next = strm->next_out;
; 1300 :     avail = strm->avail_out;
; 1301 :     strm->next_out = (Bytef *)dictionary + dictLength;

  00062	8b 45 0c	 mov	 eax, DWORD PTR _dictionary$[ebp]
  00065	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00068	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0006b	03 c6		 add	 eax, esi
  0006d	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 1302 :     strm->avail_out = 0;
; 1303 :     ret = updatewindow(strm, dictLength);

  00070	8b c6		 mov	 eax, esi
  00072	89 4d 10	 mov	 DWORD PTR _next$[ebp], ecx
  00075	89 55 08	 mov	 DWORD PTR _avail$[ebp], edx
  00078	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0007f	e8 00 00 00 00	 call	 _updatewindow

; 1304 :     strm->avail_out = avail;

  00084	8b 4d 08	 mov	 ecx, DWORD PTR _avail$[ebp]

; 1305 :     strm->next_out = next;

  00087	8b 55 10	 mov	 edx, DWORD PTR _next$[ebp]
  0008a	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  0008d	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 1306 :     if (ret) {

  00090	85 c0		 test	 eax, eax
  00092	74 12		 je	 SHORT $LN1@inflateSet

; 1307 :         state->mode = MEM;

  00094	5e		 pop	 esi
  00095	c7 07 1e 00 00
	00		 mov	 DWORD PTR [edi], 30	; 0000001eH
  0009b	5f		 pop	 edi

; 1308 :         return Z_MEM_ERROR;

  0009c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000a1	5b		 pop	 ebx

; 1313 : }

  000a2	5d		 pop	 ebp
  000a3	c2 0c 00	 ret	 12			; 0000000cH
$LN1@inflateSet:
  000a6	5e		 pop	 esi

; 1309 :     }
; 1310 :     state->havedict = 1;

  000a7	c7 47 0c 01 00
	00 00		 mov	 DWORD PTR [edi+12], 1
  000ae	5f		 pop	 edi

; 1311 :     Tracev((stderr, "inflate:   dictionary set\n"));
; 1312 :     return Z_OK;

  000af	33 c0		 xor	 eax, eax
  000b1	5b		 pop	 ebx

; 1313 : }

  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
$LN5@inflateSet:
  000b6	5f		 pop	 edi

; 1277 :     struct inflate_state FAR *state;
; 1278 :     unsigned long id;
; 1279 :     unsigned char *next;
; 1280 :     unsigned avail;
; 1281 :     int ret;
; 1282 : 
; 1283 :     /* check state */
; 1284 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  000b7	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000bc	5b		 pop	 ebx

; 1313 : }

  000bd	5d		 pop	 ebp
  000be	c2 0c 00	 ret	 12			; 0000000cH
_inflateSetDictionary@12 ENDP
_TEXT	ENDS
PUBLIC	_inflate@8
; Function compile flags: /Ogtp
;	COMDAT _inflate@8
_TEXT	SEGMENT
_in$ = -48						; size = 4
tv3076 = -44						; size = 4
tv2368 = -44						; size = 4
tv2363 = -44						; size = 4
tv2303 = -44						; size = 4
tv2288 = -44						; size = 4
tv2173 = -44						; size = 4
tv2157 = -44						; size = 4
tv2134 = -44						; size = 4
_from$ = -44						; size = 4
_ret$ = -40						; size = 4
tv2314 = -36						; size = 4
tv2131 = -36						; size = 4
_last$ = -36						; size = 4
_out$ = -32						; size = 4
tv2387 = -28						; size = 4
tv2366 = -28						; size = 4
tv2361 = -28						; size = 4
tv2289 = -28						; size = 4
_len$ = -28						; size = 4
_put$ = -24						; size = 4
_hbuf$ = -20						; size = 4
_left$ = -16						; size = 4
_here$ = -12						; size = 4
_copy$ = -12						; size = 4
_next$ = -8						; size = 4
_have$ = -4						; size = 4
tv1321 = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_inflate@8 PROC						; COMDAT

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 613  :     struct inflate_state FAR *state;
; 614  :     unsigned char FAR *next;    /* next input */
; 615  :     unsigned char FAR *put;     /* next output */
; 616  :     unsigned have, left;        /* available input and output */
; 617  :     unsigned long hold;         /* bit buffer */
; 618  :     unsigned bits;              /* bits in bit buffer */
; 619  :     unsigned in, out;           /* save starting available input and output */
; 620  :     unsigned copy;              /* number of stored or match bytes to copy */
; 621  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 622  :     code here;                  /* current decoding table entry */
; 623  :     code last;                  /* parent table entry */
; 624  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 625  :     int ret;                    /* return code */
; 626  : #ifdef GUNZIP
; 627  :     unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
; 628  : #endif
; 629  :     static const unsigned short order[19] = /* permutation of code lengths */
; 630  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 631  : 
; 632  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
; 633  :         (strm->next_in == Z_NULL && strm->avail_in != 0))

  00003	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	57		 push	 edi
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 48 14 00
	00		 je	 $LN498@inflate
  00012	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  00015	85 ff		 test	 edi, edi
  00017	0f 84 3d 14 00
	00		 je	 $LN498@inflate
  0001d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00021	0f 84 33 14 00
	00		 je	 $LN498@inflate
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 0a		 jne	 SHORT $LN499@inflate
  0002c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00030	0f 85 24 14 00
	00		 jne	 $LN498@inflate
$LN499@inflate:

; 635  : 
; 636  :     state = (struct inflate_state FAR *)strm->state;
; 637  :     if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */

  00036	83 3f 0b	 cmp	 DWORD PTR [edi], 11	; 0000000bH
  00039	75 06		 jne	 SHORT $LN496@inflate
  0003b	c7 07 0c 00 00
	00		 mov	 DWORD PTR [edi], 12	; 0000000cH
$LN496@inflate:

; 638  :     LOAD();

  00041	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00044	8b 10		 mov	 edx, DWORD PTR [eax]
  00046	89 4d e8	 mov	 DWORD PTR _put$[ebp], ecx
  00049	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	53		 push	 ebx
  00050	8b 5f 38	 mov	 ebx, DWORD PTR [edi+56]
  00053	89 45 fc	 mov	 DWORD PTR _have$[ebp], eax

; 639  :     in = have;

  00056	89 45 d0	 mov	 DWORD PTR _in$[ebp], eax

; 640  :     out = left;
; 641  :     ret = Z_OK;
; 642  :     for (;;)
; 643  :         switch (state->mode) {

  00059	8b 07		 mov	 eax, DWORD PTR [edi]
  0005b	56		 push	 esi
  0005c	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  0005f	89 4d f0	 mov	 DWORD PTR _left$[ebp], ecx
  00062	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00065	89 4d e0	 mov	 DWORD PTR _out$[ebp], ecx
  00068	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
  0006f	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00072	0f 87 6a 12 00
	00		 ja	 $LN12@inflate
$LL493@inflate:
  00078	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN787@inflate[eax*4]
$LN489@inflate:

; 644  :         case HEAD:
; 645  :             if (state->wrap == 0) {

  0007f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00082	85 c0		 test	 eax, eax
  00084	75 0b		 jne	 SHORT $LN487@inflate

; 646  :                 state->mode = TYPEDO;

  00086	c7 07 0c 00 00
	00		 mov	 DWORD PTR [edi], 12	; 0000000cH

; 647  :                 break;

  0008c	e9 46 12 00 00	 jmp	 $LN490@inflate
$LN487@inflate:

; 648  :             }
; 649  :             NEEDBITS(16);

  00091	83 fe 10	 cmp	 esi, 16			; 00000010H
  00094	73 22		 jae	 SHORT $LN486@inflate
$LL484@inflate:
  00096	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  0009a	0f 84 95 12 00
	00		 je	 $inf_leave$80515
  000a0	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000a3	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  000a6	8b ce		 mov	 ecx, esi
  000a8	d3 e0		 shl	 eax, cl
  000aa	42		 inc	 edx
  000ab	83 c6 08	 add	 esi, 8
  000ae	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  000b1	03 d8		 add	 ebx, eax
  000b3	83 fe 10	 cmp	 esi, 16			; 00000010H
  000b6	72 de		 jb	 SHORT $LL484@inflate
$LN486@inflate:

; 650  : #ifdef GUNZIP
; 651  :             if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */

  000b8	f6 47 08 02	 test	 BYTE PTR [edi+8], 2
  000bc	74 3b		 je	 SHORT $LN478@inflate
  000be	81 fb 1f 8b 00
	00		 cmp	 ebx, 35615		; 00008b1fH
  000c4	75 33		 jne	 SHORT $LN478@inflate

; 652  :                 state->check = crc32(0L, Z_NULL, 0);

  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 _crc32@12

; 653  :                 CRC2(state->check, hold);

  000d1	6a 02		 push	 2
  000d3	8d 4d ec	 lea	 ecx, DWORD PTR _hbuf$[ebp]
  000d6	51		 push	 ecx
  000d7	50		 push	 eax
  000d8	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000db	66 89 5d ec	 mov	 WORD PTR _hbuf$[ebp], bx
  000df	e8 00 00 00 00	 call	 _crc32@12

; 654  :                 INITBITS();
; 655  :                 state->mode = FLAGS;
; 656  :                 break;

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  000e7	33 db		 xor	 ebx, ebx
  000e9	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000ec	33 f6		 xor	 esi, esi
  000ee	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
  000f4	e9 de 11 00 00	 jmp	 $LN490@inflate
$LN478@inflate:

; 657  :             }
; 658  :             state->flags = 0;           /* expect zlib header */
; 659  :             if (state->head != Z_NULL)

  000f9	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000fc	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00103	85 c0		 test	 eax, eax
  00105	74 07		 je	 SHORT $LN471@inflate

; 660  :                 state->head->done = -1;

  00107	c7 40 30 ff ff
	ff ff		 mov	 DWORD PTR [eax+48], -1
$LN471@inflate:

; 661  :             if (!(state->wrap & 1) ||   /* check if zlib header allowed */
; 662  : #else
; 663  :             if (
; 664  : #endif
; 665  :                 ((BITS(8) << 8) + (hold >> 8)) % 31) {

  0010e	f6 47 08 01	 test	 BYTE PTR [edi+8], 1
  00112	0f 84 9f 00 00
	00		 je	 $LN469@inflate
  00118	0f b6 c3	 movzx	 eax, bl
  0011b	c1 e0 08	 shl	 eax, 8
  0011e	8b d3		 mov	 edx, ebx
  00120	c1 ea 08	 shr	 edx, 8
  00123	03 c2		 add	 eax, edx
  00125	33 d2		 xor	 edx, edx
  00127	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0012c	f7 f1		 div	 ecx
  0012e	85 d2		 test	 edx, edx
  00130	0f 85 81 00 00
	00		 jne	 $LN469@inflate

; 669  :             }
; 670  :             if (BITS(4) != Z_DEFLATED) {

  00136	8b d3		 mov	 edx, ebx
  00138	80 e2 0f	 and	 dl, 15			; 0000000fH
  0013b	80 fa 08	 cmp	 dl, 8
  0013e	74 12		 je	 SHORT $LN467@inflate

; 671  :                 strm->msg = (char *)"unknown compression method";

  00140	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 672  :                 state->mode = BAD;
; 673  :                 break;

  00143	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00146	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@
  0014d	e9 7f 11 00 00	 jmp	 $LN786@inflate
$LN467@inflate:

; 674  :             }
; 675  :             DROPBITS(4);
; 676  :             len = BITS(4) + 8;
; 677  :             if (state->wbits == 0)

  00152	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00155	c1 eb 04	 shr	 ebx, 4
  00158	8b cb		 mov	 ecx, ebx
  0015a	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0015d	83 ee 04	 sub	 esi, 4
  00160	83 c1 08	 add	 ecx, 8
  00163	85 c0		 test	 eax, eax
  00165	75 3a		 jne	 SHORT $LN464@inflate

; 678  :                 state->wbits = len;

  00167	89 4f 24	 mov	 DWORD PTR [edi+36], ecx
$LN462@inflate:

; 683  :             }
; 684  :             state->dmax = 1U << len;

  0016a	ba 01 00 00 00	 mov	 edx, 1

; 685  :             Tracev((stderr, "inflate:   zlib header ok\n"));
; 686  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

  0016f	6a 00		 push	 0
  00171	d3 e2		 shl	 edx, cl
  00173	6a 00		 push	 0
  00175	6a 00		 push	 0
  00177	89 57 14	 mov	 DWORD PTR [edi+20], edx
  0017a	e8 00 00 00 00	 call	 _adler32@12
  0017f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 687  :             state->mode = hold & 0x200 ? DICTID : TYPE;
; 688  :             INITBITS();
; 689  :             break;

  00182	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00185	c1 eb 08	 shr	 ebx, 8
  00188	f7 d3		 not	 ebx
  0018a	83 e3 02	 and	 ebx, 2
  0018d	83 cb 09	 or	 ebx, 9
  00190	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00193	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00196	89 1f		 mov	 DWORD PTR [edi], ebx
  00198	33 db		 xor	 ebx, ebx
  0019a	33 f6		 xor	 esi, esi
  0019c	e9 36 11 00 00	 jmp	 $LN490@inflate
$LN464@inflate:

; 679  :             else if (len > state->wbits) {

  001a1	3b c8		 cmp	 ecx, eax
  001a3	76 c5		 jbe	 SHORT $LN462@inflate

; 680  :                 strm->msg = (char *)"invalid window size";

  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 681  :                 state->mode = BAD;
; 682  :                 break;

  001a8	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  001ab	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BE@EMOGCLGO@invalid?5window?5size?$AA@
  001b2	e9 1a 11 00 00	 jmp	 $LN786@inflate
$LN469@inflate:

; 666  :                 strm->msg = (char *)"incorrect header check";

  001b7	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  001ba	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], OFFSET ??_C@_0BH@LIBMMIGA@incorrect?5header?5check?$AA@

; 667  :                 state->mode = BAD;
; 668  :                 break;

  001c1	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  001c4	e9 08 11 00 00	 jmp	 $LN786@inflate
$LN457@inflate:

; 690  : #ifdef GUNZIP
; 691  :         case FLAGS:
; 692  :             NEEDBITS(16);

  001c9	83 fe 10	 cmp	 esi, 16			; 00000010H
  001cc	73 24		 jae	 SHORT $LN456@inflate
  001ce	8b ff		 npad	 2
$LL454@inflate:
  001d0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  001d4	0f 84 5b 11 00
	00		 je	 $inf_leave$80515
  001da	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001dd	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  001e0	8b ce		 mov	 ecx, esi
  001e2	d3 e0		 shl	 eax, cl
  001e4	42		 inc	 edx
  001e5	83 c6 08	 add	 esi, 8
  001e8	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  001eb	03 d8		 add	 ebx, eax
  001ed	83 fe 10	 cmp	 esi, 16			; 00000010H
  001f0	72 de		 jb	 SHORT $LL454@inflate
$LN456@inflate:

; 693  :             state->flags = (int)(hold);

  001f2	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 694  :             if ((state->flags & 0xff) != Z_DEFLATED) {

  001f5	80 fb 08	 cmp	 bl, 8
  001f8	74 0f		 je	 SHORT $LN448@inflate

; 695  :                 strm->msg = (char *)"unknown compression method";

  001fa	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  001fd	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BL@IHKGDAEE@unknown?5compression?5method?$AA@

; 696  :                 state->mode = BAD;
; 697  :                 break;

  00204	e9 c8 10 00 00	 jmp	 $LN786@inflate
$LN448@inflate:

; 698  :             }
; 699  :             if (state->flags & 0xe000) {

  00209	f7 c3 00 e0 00
	00		 test	 ebx, 57344		; 0000e000H
  0020f	74 0f		 je	 SHORT $LN447@inflate

; 700  :                 strm->msg = (char *)"unknown header flags set";

  00211	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00214	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set?$AA@

; 701  :                 state->mode = BAD;
; 702  :                 break;

  0021b	e9 b1 10 00 00	 jmp	 $LN786@inflate
$LN447@inflate:

; 703  :             }
; 704  :             if (state->head != Z_NULL)

  00220	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00223	85 c0		 test	 eax, eax
  00225	74 0a		 je	 SHORT $LN446@inflate

; 705  :                 state->head->text = (int)((hold >> 8) & 1);

  00227	8b cb		 mov	 ecx, ebx
  00229	c1 e9 08	 shr	 ecx, 8
  0022c	83 e1 01	 and	 ecx, 1
  0022f	89 08		 mov	 DWORD PTR [eax], ecx
$LN446@inflate:

; 706  :             if (state->flags & 0x0200) CRC2(state->check, hold);

  00231	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  00238	74 1e		 je	 SHORT $LN442@inflate
  0023a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0023d	6a 02		 push	 2
  0023f	8d 55 ec	 lea	 edx, DWORD PTR _hbuf$[ebp]
  00242	88 5d ec	 mov	 BYTE PTR _hbuf$[ebp], bl
  00245	52		 push	 edx
  00246	c1 eb 08	 shr	 ebx, 8
  00249	50		 push	 eax
  0024a	88 5d ed	 mov	 BYTE PTR _hbuf$[ebp+1], bl
  0024d	e8 00 00 00 00	 call	 _crc32@12
  00252	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00255	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN442@inflate:

; 707  :             INITBITS();

  00258	33 db		 xor	 ebx, ebx
  0025a	33 f6		 xor	 esi, esi

; 708  :             state->mode = TIME;

  0025c	c7 07 02 00 00
	00		 mov	 DWORD PTR [edi], 2

; 709  :         case TIME:
; 710  :             NEEDBITS(32);

  00262	eb 0c		 jmp	 SHORT $LL434@inflate
$LN437@inflate:
  00264	83 fe 20	 cmp	 esi, 32			; 00000020H
  00267	73 29		 jae	 SHORT $LN436@inflate
  00269	8d a4 24 00 00
	00 00		 npad	 7
$LL434@inflate:
  00270	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00274	0f 84 bb 10 00
	00		 je	 $inf_leave$80515
  0027a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0027d	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00280	8b ce		 mov	 ecx, esi
  00282	d3 e0		 shl	 eax, cl
  00284	42		 inc	 edx
  00285	83 c6 08	 add	 esi, 8
  00288	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0028b	03 d8		 add	 ebx, eax
  0028d	83 fe 20	 cmp	 esi, 32			; 00000020H
  00290	72 de		 jb	 SHORT $LL434@inflate
$LN436@inflate:

; 711  :             if (state->head != Z_NULL)

  00292	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00295	85 c0		 test	 eax, eax
  00297	74 03		 je	 SHORT $LN428@inflate

; 712  :                 state->head->time = hold;

  00299	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN428@inflate:

; 713  :             if (state->flags & 0x0200) CRC4(state->check, hold);

  0029c	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  002a3	74 2e		 je	 SHORT $LN424@inflate
  002a5	8b cb		 mov	 ecx, ebx
  002a7	c1 e9 08	 shr	 ecx, 8
  002aa	6a 04		 push	 4
  002ac	8d 45 ec	 lea	 eax, DWORD PTR _hbuf$[ebp]
  002af	88 4d ed	 mov	 BYTE PTR _hbuf$[ebp+1], cl
  002b2	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  002b5	8b d3		 mov	 edx, ebx
  002b7	88 5d ec	 mov	 BYTE PTR _hbuf$[ebp], bl
  002ba	50		 push	 eax
  002bb	c1 ea 10	 shr	 edx, 16			; 00000010H
  002be	c1 eb 18	 shr	 ebx, 24			; 00000018H
  002c1	51		 push	 ecx
  002c2	88 55 ee	 mov	 BYTE PTR _hbuf$[ebp+2], dl
  002c5	88 5d ef	 mov	 BYTE PTR _hbuf$[ebp+3], bl
  002c8	e8 00 00 00 00	 call	 _crc32@12
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  002d0	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN424@inflate:

; 714  :             INITBITS();

  002d3	33 db		 xor	 ebx, ebx
  002d5	33 f6		 xor	 esi, esi

; 715  :             state->mode = OS;

  002d7	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3

; 716  :         case OS:
; 717  :             NEEDBITS(16);

  002dd	eb 05		 jmp	 SHORT $LL416@inflate
$LN419@inflate:
  002df	83 fe 10	 cmp	 esi, 16			; 00000010H
  002e2	73 22		 jae	 SHORT $LN418@inflate
$LL416@inflate:
  002e4	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  002e8	0f 84 47 10 00
	00		 je	 $inf_leave$80515
  002ee	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  002f1	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  002f4	8b ce		 mov	 ecx, esi
  002f6	d3 e0		 shl	 eax, cl
  002f8	42		 inc	 edx
  002f9	83 c6 08	 add	 esi, 8
  002fc	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  002ff	03 d8		 add	 ebx, eax
  00301	83 fe 10	 cmp	 esi, 16			; 00000010H
  00304	72 de		 jb	 SHORT $LL416@inflate
$LN418@inflate:

; 718  :             if (state->head != Z_NULL) {

  00306	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00309	85 c0		 test	 eax, eax
  0030b	74 16		 je	 SHORT $LN410@inflate

; 719  :                 state->head->xflags = (int)(hold & 0xff);

  0030d	8b cb		 mov	 ecx, ebx
  0030f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00315	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 720  :                 state->head->os = (int)(hold >> 8);

  00318	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0031b	8b c3		 mov	 eax, ebx
  0031d	c1 e8 08	 shr	 eax, 8
  00320	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN410@inflate:

; 721  :             }
; 722  :             if (state->flags & 0x0200) CRC2(state->check, hold);

  00323	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  0032a	74 1e		 je	 SHORT $LN406@inflate
  0032c	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0032f	6a 02		 push	 2
  00331	8d 55 ec	 lea	 edx, DWORD PTR _hbuf$[ebp]
  00334	88 5d ec	 mov	 BYTE PTR _hbuf$[ebp], bl
  00337	52		 push	 edx
  00338	c1 eb 08	 shr	 ebx, 8
  0033b	50		 push	 eax
  0033c	88 5d ed	 mov	 BYTE PTR _hbuf$[ebp+1], bl
  0033f	e8 00 00 00 00	 call	 _crc32@12
  00344	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00347	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN406@inflate:

; 723  :             INITBITS();

  0034a	33 db		 xor	 ebx, ebx
  0034c	33 f6		 xor	 esi, esi

; 724  :             state->mode = EXLEN;

  0034e	c7 07 04 00 00
	00		 mov	 DWORD PTR [edi], 4
$LN713@inflate:

; 725  :         case EXLEN:
; 726  :             if (state->flags & 0x0400) {

  00354	f7 47 10 00 04
	00 00		 test	 DWORD PTR [edi+16], 1024 ; 00000400H
  0035b	74 61		 je	 SHORT $LN401@inflate

; 727  :                 NEEDBITS(16);

  0035d	83 fe 10	 cmp	 esi, 16			; 00000010H
  00360	73 22		 jae	 SHORT $LN399@inflate
$LL397@inflate:
  00362	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00366	0f 84 c9 0f 00
	00		 je	 $inf_leave$80515
  0036c	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0036f	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00372	8b ce		 mov	 ecx, esi
  00374	d3 e0		 shl	 eax, cl
  00376	42		 inc	 edx
  00377	83 c6 08	 add	 esi, 8
  0037a	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0037d	03 d8		 add	 ebx, eax
  0037f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00382	72 de		 jb	 SHORT $LL397@inflate
$LN399@inflate:

; 728  :                 state->length = (unsigned)(hold);
; 729  :                 if (state->head != Z_NULL)

  00384	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00387	89 5f 40	 mov	 DWORD PTR [edi+64], ebx
  0038a	85 c0		 test	 eax, eax
  0038c	74 03		 je	 SHORT $LN391@inflate

; 730  :                     state->head->extra_len = (unsigned)hold;

  0038e	89 58 14	 mov	 DWORD PTR [eax+20], ebx
$LN391@inflate:

; 731  :                 if (state->flags & 0x0200) CRC2(state->check, hold);

  00391	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  00398	74 1e		 je	 SHORT $LN387@inflate
  0039a	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  0039d	6a 02		 push	 2
  0039f	8d 4d ec	 lea	 ecx, DWORD PTR _hbuf$[ebp]
  003a2	88 5d ec	 mov	 BYTE PTR _hbuf$[ebp], bl
  003a5	51		 push	 ecx
  003a6	c1 eb 08	 shr	 ebx, 8
  003a9	52		 push	 edx
  003aa	88 5d ed	 mov	 BYTE PTR _hbuf$[ebp+1], bl
  003ad	e8 00 00 00 00	 call	 _crc32@12
  003b2	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  003b5	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN387@inflate:

; 732  :                 INITBITS();

  003b8	33 db		 xor	 ebx, ebx
  003ba	33 f6		 xor	 esi, esi

; 733  :             }
; 734  :             else if (state->head != Z_NULL)

  003bc	eb 0e		 jmp	 SHORT $LN382@inflate
$LN401@inflate:
  003be	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  003c1	85 c0		 test	 eax, eax
  003c3	74 07		 je	 SHORT $LN382@inflate

; 735  :                 state->head->extra = Z_NULL;

  003c5	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN382@inflate:

; 736  :             state->mode = EXTRA;

  003cc	c7 07 05 00 00
	00		 mov	 DWORD PTR [edi], 5
$LN715@inflate:

; 737  :         case EXTRA:
; 738  :             if (state->flags & 0x0400) {

  003d2	f7 47 10 00 04
	00 00		 test	 DWORD PTR [edi+16], 1024 ; 00000400H
  003d9	0f 84 93 00 00
	00		 je	 $LN375@inflate

; 739  :                 copy = state->length;

  003df	8b 47 40	 mov	 eax, DWORD PTR [edi+64]

; 740  :                 if (copy > have) copy = have;

  003e2	8b 4d fc	 mov	 ecx, DWORD PTR _have$[ebp]
  003e5	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
  003e8	3b c1		 cmp	 eax, ecx
  003ea	76 05		 jbe	 SHORT $LN379@inflate
  003ec	8b c1		 mov	 eax, ecx
  003ee	89 4d f4	 mov	 DWORD PTR _copy$[ebp], ecx
$LN379@inflate:

; 741  :                 if (copy) {

  003f1	85 c0		 test	 eax, eax
  003f3	74 73		 je	 SHORT $LN378@inflate

; 742  :                     if (state->head != Z_NULL &&
; 743  :                         state->head->extra != Z_NULL) {

  003f5	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  003f8	85 c9		 test	 ecx, ecx
  003fa	74 3e		 je	 SHORT $LN750@inflate
  003fc	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  003ff	89 4d d4	 mov	 DWORD PTR tv2134[ebp], ecx
  00402	85 c9		 test	 ecx, ecx
  00404	74 34		 je	 SHORT $LN750@inflate

; 744  :                         len = state->head->extra_len - state->length;

  00406	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00409	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0040c	2b 4f 40	 sub	 ecx, DWORD PTR [edi+64]

; 745  :                         zmemcpy(state->head->extra + len, next,
; 746  :                                 len + copy > state->head->extra_max ?
; 747  :                                 state->head->extra_max - len : copy);

  0040f	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00412	89 4d e4	 mov	 DWORD PTR _len$[ebp], ecx
  00415	03 c8		 add	 ecx, eax
  00417	3b ca		 cmp	 ecx, edx
  00419	76 05		 jbe	 SHORT $LN502@inflate
  0041b	2b 55 e4	 sub	 edx, DWORD PTR _len$[ebp]
  0041e	8b c2		 mov	 eax, edx
$LN502@inflate:
  00420	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00423	50		 push	 eax
  00424	8b 45 d4	 mov	 eax, DWORD PTR tv2134[ebp]
  00427	03 45 e4	 add	 eax, DWORD PTR _len$[ebp]
  0042a	52		 push	 edx
  0042b	50		 push	 eax
  0042c	e8 00 00 00 00	 call	 _memcpy
  00431	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  00434	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00437	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN750@inflate:

; 748  :                     }
; 749  :                     if (state->flags & 0x0200)

  0043a	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  00441	74 1a		 je	 SHORT $LN376@inflate

; 750  :                         state->check = crc32(state->check, next, copy);

  00443	8b 55 f4	 mov	 edx, DWORD PTR _copy$[ebp]
  00446	8b 45 f8	 mov	 eax, DWORD PTR _next$[ebp]
  00449	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0044c	52		 push	 edx
  0044d	50		 push	 eax
  0044e	51		 push	 ecx
  0044f	e8 00 00 00 00	 call	 _crc32@12
  00454	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00457	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0045a	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
$LN376@inflate:

; 751  :                     have -= copy;

  0045d	29 45 fc	 sub	 DWORD PTR _have$[ebp], eax

; 752  :                     next += copy;

  00460	03 d0		 add	 edx, eax

; 753  :                     state->length -= copy;

  00462	29 47 40	 sub	 DWORD PTR [edi+64], eax
  00465	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
$LN378@inflate:

; 754  :                 }
; 755  :                 if (state->length) goto inf_leave;

  00468	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0046c	0f 85 c3 0e 00
	00		 jne	 $inf_leave$80515
$LN375@inflate:

; 756  :             }
; 757  :             state->length = 0;

  00472	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 758  :             state->mode = NAME;

  00479	c7 07 06 00 00
	00		 mov	 DWORD PTR [edi], 6
$LN716@inflate:

; 759  :         case NAME:
; 760  :             if (state->flags & 0x0800) {

  0047f	f7 47 10 00 08
	00 00		 test	 DWORD PTR [edi+16], 2048 ; 00000800H
  00486	0f 84 84 00 00
	00		 je	 $LN373@inflate

; 761  :                 if (have == 0) goto inf_leave;

  0048c	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00490	0f 84 9f 0e 00
	00		 je	 $inf_leave$80515

; 762  :                 copy = 0;

  00496	33 c0		 xor	 eax, eax
$LL371@inflate:

; 763  :                 do {
; 764  :                     len = (unsigned)(next[copy++]);

  00498	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  0049c	40		 inc	 eax
  0049d	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 765  :                     if (state->head != Z_NULL &&
; 766  :                             state->head->name != Z_NULL &&
; 767  :                             state->length < state->head->name_max)

  004a0	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  004a3	89 4d e4	 mov	 DWORD PTR _len$[ebp], ecx
  004a6	85 c0		 test	 eax, eax
  004a8	74 21		 je	 SHORT $LN370@inflate
  004aa	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004ad	89 4d d4	 mov	 DWORD PTR tv2157[ebp], ecx
  004b0	85 c9		 test	 ecx, ecx
  004b2	74 17		 je	 SHORT $LN370@inflate
  004b4	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  004b7	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  004ba	73 0f		 jae	 SHORT $LN370@inflate

; 768  :                         state->head->name[state->length++] = len;

  004bc	8b 55 d4	 mov	 edx, DWORD PTR tv2157[ebp]
  004bf	8a 45 e4	 mov	 al, BYTE PTR _len$[ebp]
  004c2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004c5	ff 47 40	 inc	 DWORD PTR [edi+64]
  004c8	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LN370@inflate:

; 769  :                 } while (len && copy < have);

  004cb	83 7d e4 00	 cmp	 DWORD PTR _len$[ebp], 0
  004cf	74 08		 je	 SHORT $LN367@inflate
  004d1	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  004d4	3b 45 fc	 cmp	 eax, DWORD PTR _have$[ebp]
  004d7	72 bf		 jb	 SHORT $LL371@inflate
$LN367@inflate:

; 770  :                 if (state->flags & 0x0200)

  004d9	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  004e0	74 17		 je	 SHORT $LN366@inflate

; 771  :                     state->check = crc32(state->check, next, copy);

  004e2	8b 4d f4	 mov	 ecx, DWORD PTR _copy$[ebp]
  004e5	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  004e8	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  004eb	51		 push	 ecx
  004ec	52		 push	 edx
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 _crc32@12
  004f3	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  004f6	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN366@inflate:

; 772  :                 have -= copy;

  004f9	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  004fc	29 45 fc	 sub	 DWORD PTR _have$[ebp], eax

; 773  :                 next += copy;

  004ff	03 d0		 add	 edx, eax

; 774  :                 if (len) goto inf_leave;

  00501	83 7d e4 00	 cmp	 DWORD PTR _len$[ebp], 0
  00505	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00508	0f 85 27 0e 00
	00		 jne	 $inf_leave$80515

; 775  :             }
; 776  :             else if (state->head != Z_NULL)

  0050e	eb 0e		 jmp	 SHORT $LN363@inflate
$LN373@inflate:
  00510	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00513	85 c0		 test	 eax, eax
  00515	74 07		 je	 SHORT $LN363@inflate

; 777  :                 state->head->name = Z_NULL;

  00517	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN363@inflate:

; 778  :             state->length = 0;

  0051e	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 779  :             state->mode = COMMENT;

  00525	c7 07 07 00 00
	00		 mov	 DWORD PTR [edi], 7
$LN720@inflate:

; 780  :         case COMMENT:
; 781  :             if (state->flags & 0x1000) {

  0052b	f7 47 10 00 10
	00 00		 test	 DWORD PTR [edi+16], 4096 ; 00001000H
  00532	0f 84 84 00 00
	00		 je	 $LN361@inflate

; 782  :                 if (have == 0) goto inf_leave;

  00538	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  0053c	0f 84 f3 0d 00
	00		 je	 $inf_leave$80515

; 783  :                 copy = 0;

  00542	33 c0		 xor	 eax, eax
$LL359@inflate:

; 784  :                 do {
; 785  :                     len = (unsigned)(next[copy++]);

  00544	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00548	40		 inc	 eax
  00549	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 786  :                     if (state->head != Z_NULL &&
; 787  :                             state->head->comment != Z_NULL &&
; 788  :                             state->length < state->head->comm_max)

  0054c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0054f	89 4d e4	 mov	 DWORD PTR _len$[ebp], ecx
  00552	85 c0		 test	 eax, eax
  00554	74 21		 je	 SHORT $LN358@inflate
  00556	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00559	89 4d d4	 mov	 DWORD PTR tv2173[ebp], ecx
  0055c	85 c9		 test	 ecx, ecx
  0055e	74 17		 je	 SHORT $LN358@inflate
  00560	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00563	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  00566	73 0f		 jae	 SHORT $LN358@inflate

; 789  :                         state->head->comment[state->length++] = len;

  00568	8b 55 d4	 mov	 edx, DWORD PTR tv2173[ebp]
  0056b	8a 45 e4	 mov	 al, BYTE PTR _len$[ebp]
  0056e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00571	ff 47 40	 inc	 DWORD PTR [edi+64]
  00574	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
$LN358@inflate:

; 790  :                 } while (len && copy < have);

  00577	83 7d e4 00	 cmp	 DWORD PTR _len$[ebp], 0
  0057b	74 08		 je	 SHORT $LN355@inflate
  0057d	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  00580	3b 45 fc	 cmp	 eax, DWORD PTR _have$[ebp]
  00583	72 bf		 jb	 SHORT $LL359@inflate
$LN355@inflate:

; 791  :                 if (state->flags & 0x0200)

  00585	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  0058c	74 17		 je	 SHORT $LN354@inflate

; 792  :                     state->check = crc32(state->check, next, copy);

  0058e	8b 4d f4	 mov	 ecx, DWORD PTR _copy$[ebp]
  00591	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00594	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00597	51		 push	 ecx
  00598	52		 push	 edx
  00599	50		 push	 eax
  0059a	e8 00 00 00 00	 call	 _crc32@12
  0059f	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  005a2	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN354@inflate:

; 793  :                 have -= copy;

  005a5	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  005a8	29 45 fc	 sub	 DWORD PTR _have$[ebp], eax

; 794  :                 next += copy;

  005ab	03 d0		 add	 edx, eax

; 795  :                 if (len) goto inf_leave;

  005ad	83 7d e4 00	 cmp	 DWORD PTR _len$[ebp], 0
  005b1	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  005b4	0f 85 7b 0d 00
	00		 jne	 $inf_leave$80515

; 796  :             }
; 797  :             else if (state->head != Z_NULL)

  005ba	eb 0e		 jmp	 SHORT $LN351@inflate
$LN361@inflate:
  005bc	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  005bf	85 c0		 test	 eax, eax
  005c1	74 07		 je	 SHORT $LN351@inflate

; 798  :                 state->head->comment = Z_NULL;

  005c3	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$LN351@inflate:

; 799  :             state->mode = HCRC;

  005ca	c7 07 08 00 00
	00		 mov	 DWORD PTR [edi], 8
$LN724@inflate:

; 800  :         case HCRC:
; 801  :             if (state->flags & 0x0200) {

  005d0	f7 47 10 00 02
	00 00		 test	 DWORD PTR [edi+16], 512	; 00000200H
  005d7	74 44		 je	 SHORT $LN336@inflate

; 802  :                 NEEDBITS(16);

  005d9	83 fe 10	 cmp	 esi, 16			; 00000010H
  005dc	73 24		 jae	 SHORT $LN347@inflate
  005de	8b ff		 npad	 2
$LL345@inflate:
  005e0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  005e4	0f 84 4b 0d 00
	00		 je	 $inf_leave$80515
  005ea	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  005ed	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  005f0	8b ce		 mov	 ecx, esi
  005f2	d3 e0		 shl	 eax, cl
  005f4	42		 inc	 edx
  005f5	83 c6 08	 add	 esi, 8
  005f8	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  005fb	03 d8		 add	 ebx, eax
  005fd	83 fe 10	 cmp	 esi, 16			; 00000010H
  00600	72 de		 jb	 SHORT $LL345@inflate
$LN347@inflate:

; 803  :                 if (hold != (state->check & 0xffff)) {

  00602	0f b7 4f 18	 movzx	 ecx, WORD PTR [edi+24]
  00606	3b d9		 cmp	 ebx, ecx
  00608	74 0f		 je	 SHORT $LN338@inflate

; 804  :                     strm->msg = (char *)"header crc mismatch";

  0060a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0060d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BE@GONKLEPM@header?5crc?5mismatch?$AA@

; 805  :                     state->mode = BAD;
; 806  :                     break;

  00614	e9 b8 0c 00 00	 jmp	 $LN786@inflate
$LN338@inflate:

; 807  :                 }
; 808  :                 INITBITS();

  00619	33 db		 xor	 ebx, ebx
  0061b	33 f6		 xor	 esi, esi
$LN336@inflate:

; 809  :             }
; 810  :             if (state->head != Z_NULL) {

  0061d	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00620	85 c0		 test	 eax, eax
  00622	74 16		 je	 SHORT $LN335@inflate

; 811  :                 state->head->hcrc = (int)((state->flags >> 9) & 1);

  00624	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00627	c1 f9 09	 sar	 ecx, 9
  0062a	83 e1 01	 and	 ecx, 1
  0062d	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 812  :                 state->head->done = 1;

  00630	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00633	c7 42 30 01 00
	00 00		 mov	 DWORD PTR [edx+48], 1
$LN335@inflate:

; 813  :             }
; 814  :             strm->adler = state->check = crc32(0L, Z_NULL, 0);

  0063a	6a 00		 push	 0
  0063c	6a 00		 push	 0
  0063e	6a 00		 push	 0
  00640	e8 00 00 00 00	 call	 _crc32@12
  00645	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 815  :             state->mode = TYPE;
; 816  :             break;

  00648	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  0064b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0064e	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00651	c7 07 0b 00 00
	00		 mov	 DWORD PTR [edi], 11	; 0000000bH
  00657	e9 7b 0c 00 00	 jmp	 $LN490@inflate
$LN333@inflate:

; 817  : #endif
; 818  :         case DICTID:
; 819  :             NEEDBITS(32);

  0065c	83 fe 20	 cmp	 esi, 32			; 00000020H
  0065f	73 22		 jae	 SHORT $LN332@inflate
$LL330@inflate:
  00661	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00665	0f 84 ca 0c 00
	00		 je	 $inf_leave$80515
  0066b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0066e	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00671	8b ce		 mov	 ecx, esi
  00673	d3 e0		 shl	 eax, cl
  00675	42		 inc	 edx
  00676	83 c6 08	 add	 esi, 8
  00679	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0067c	03 d8		 add	 ebx, eax
  0067e	83 fe 20	 cmp	 esi, 32			; 00000020H
  00681	72 de		 jb	 SHORT $LL330@inflate
$LN332@inflate:

; 820  :             strm->adler = state->check = REVERSE(hold);

  00683	8b cb		 mov	 ecx, ebx
  00685	8b c3		 mov	 eax, ebx
  00687	c1 e0 10	 shl	 eax, 16			; 00000010H
  0068a	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00690	03 c8		 add	 ecx, eax
  00692	8b c3		 mov	 eax, ebx
  00694	c1 e8 08	 shr	 eax, 8
  00697	c1 e1 08	 shl	 ecx, 8
  0069a	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0069f	03 c1		 add	 eax, ecx
  006a1	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  006a4	c1 eb 18	 shr	 ebx, 24			; 00000018H
  006a7	03 c3		 add	 eax, ebx
  006a9	89 47 18	 mov	 DWORD PTR [edi+24], eax
  006ac	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 821  :             INITBITS();

  006af	33 db		 xor	 ebx, ebx
  006b1	33 f6		 xor	 esi, esi

; 822  :             state->mode = DICT;

  006b3	c7 07 0a 00 00
	00		 mov	 DWORD PTR [edi], 10	; 0000000aH
$LN726@inflate:

; 823  :         case DICT:
; 824  :             if (state->havedict == 0) {

  006b9	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  006bd	0f 84 2d 0c 00
	00		 je	 $LN579@inflate

; 827  :             }
; 828  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

  006c3	6a 00		 push	 0
  006c5	6a 00		 push	 0
  006c7	6a 00		 push	 0
  006c9	e8 00 00 00 00	 call	 _adler32@12
  006ce	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  006d1	89 47 18	 mov	 DWORD PTR [edi+24], eax
  006d4	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 829  :             state->mode = TYPE;

  006d7	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  006da	c7 07 0b 00 00
	00		 mov	 DWORD PTR [edi], 11	; 0000000bH
$LN316@inflate:

; 830  :         case TYPE:
; 831  :             if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;

  006e0	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  006e4	0f 84 4b 0c 00
	00		 je	 $inf_leave$80515
  006ea	83 7d 0c 06	 cmp	 DWORD PTR _flush$[ebp], 6
  006ee	0f 84 41 0c 00
	00		 je	 $inf_leave$80515
$LN315@inflate:

; 832  :         case TYPEDO:
; 833  :             if (state->last) {

  006f4	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  006f8	74 14		 je	 SHORT $LN308@inflate

; 834  :                 BYTEBITS();

  006fa	8b ce		 mov	 ecx, esi
  006fc	83 e1 07	 and	 ecx, 7
  006ff	d3 eb		 shr	 ebx, cl
  00701	2b f1		 sub	 esi, ecx

; 835  :                 state->mode = CHECK;

  00703	c7 07 1a 00 00
	00		 mov	 DWORD PTR [edi], 26	; 0000001aH

; 836  :                 break;

  00709	e9 c9 0b 00 00	 jmp	 $LN490@inflate
$LN308@inflate:

; 837  :             }
; 838  :             NEEDBITS(3);

  0070e	83 fe 03	 cmp	 esi, 3
  00711	73 22		 jae	 SHORT $LN307@inflate
$LL305@inflate:
  00713	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00717	0f 84 18 0c 00
	00		 je	 $inf_leave$80515
  0071d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00720	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00723	8b ce		 mov	 ecx, esi
  00725	d3 e0		 shl	 eax, cl
  00727	42		 inc	 edx
  00728	83 c6 08	 add	 esi, 8
  0072b	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0072e	03 d8		 add	 ebx, eax
  00730	83 fe 03	 cmp	 esi, 3
  00733	72 de		 jb	 SHORT $LL305@inflate
$LN307@inflate:

; 839  :             state->last = BITS(1);

  00735	8b cb		 mov	 ecx, ebx

; 840  :             DROPBITS(1);

  00737	d1 eb		 shr	 ebx, 1

; 841  :             switch (BITS(2)) {

  00739	8b c3		 mov	 eax, ebx
  0073b	83 e1 01	 and	 ecx, 1
  0073e	83 e0 03	 and	 eax, 3
  00741	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00744	83 f8 03	 cmp	 eax, 3
  00747	77 57		 ja	 SHORT $LN286@inflate
  00749	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN788@inflate[eax*4]
$LN294@inflate:

; 865  :             }
; 866  :             DROPBITS(2);

  00750	c1 eb 02	 shr	 ebx, 2
  00753	c7 07 0d 00 00
	00		 mov	 DWORD PTR [edi], 13	; 0000000dH
  00759	83 ee 03	 sub	 esi, 3

; 867  :             break;

  0075c	e9 76 0b 00 00	 jmp	 $LN490@inflate
$LN293@inflate:

; 842  :             case 0:                             /* stored block */
; 843  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 844  :                         state->last ? " (last)" : ""));
; 845  :                 state->mode = STORED;
; 846  :                 break;
; 847  :             case 1:                             /* fixed block */
; 848  :                 fixedtables(state);

  00761	8b c7		 mov	 eax, edi
  00763	e8 00 00 00 00	 call	 _fixedtables

; 849  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 850  :                         state->last ? " (last)" : ""));
; 851  :                 state->mode = LEN_;             /* decode codes */
; 852  :                 if (flush == Z_TREES) {

  00768	83 7d 0c 06	 cmp	 DWORD PTR _flush$[ebp], 6
  0076c	c7 07 13 00 00
	00		 mov	 DWORD PTR [edi], 19	; 00000013H
  00772	75 2c		 jne	 SHORT $LN286@inflate

; 853  :                     DROPBITS(2);

  00774	c1 eb 02	 shr	 ebx, 2
  00777	83 ee 03	 sub	 esi, 3

; 854  :                     goto inf_leave;

  0077a	e9 b6 0b 00 00	 jmp	 $inf_leave$80515
$LN288@inflate:

; 865  :             }
; 866  :             DROPBITS(2);

  0077f	c1 eb 02	 shr	 ebx, 2
  00782	c7 07 10 00 00
	00		 mov	 DWORD PTR [edi], 16	; 00000010H
  00788	83 ee 03	 sub	 esi, 3

; 867  :             break;

  0078b	e9 47 0b 00 00	 jmp	 $LN490@inflate
$LN287@inflate:

; 855  :                 }
; 856  :                 break;
; 857  :             case 2:                             /* dynamic block */
; 858  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 859  :                         state->last ? " (last)" : ""));
; 860  :                 state->mode = TABLE;
; 861  :                 break;
; 862  :             case 3:
; 863  :                 strm->msg = (char *)"invalid block type";

  00790	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00793	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 864  :                 state->mode = BAD;

  0079a	c7 07 1d 00 00
	00		 mov	 DWORD PTR [edi], 29	; 0000001dH
$LN286@inflate:

; 865  :             }
; 866  :             DROPBITS(2);

  007a0	c1 eb 02	 shr	 ebx, 2
  007a3	83 ee 03	 sub	 esi, 3

; 867  :             break;

  007a6	e9 2c 0b 00 00	 jmp	 $LN490@inflate
$LN282@inflate:

; 868  :         case STORED:
; 869  :             BYTEBITS();                         /* go to byte boundary */

  007ab	8b ce		 mov	 ecx, esi
  007ad	83 e1 07	 and	 ecx, 7
  007b0	2b f1		 sub	 esi, ecx
  007b2	d3 eb		 shr	 ebx, cl

; 870  :             NEEDBITS(32);

  007b4	83 fe 20	 cmp	 esi, 32			; 00000020H
  007b7	73 29		 jae	 SHORT $LN278@inflate
  007b9	8d a4 24 00 00
	00 00		 npad	 7
$LL276@inflate:
  007c0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  007c4	0f 84 6b 0b 00
	00		 je	 $inf_leave$80515
  007ca	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  007cd	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  007d0	8b ce		 mov	 ecx, esi
  007d2	d3 e0		 shl	 eax, cl
  007d4	42		 inc	 edx
  007d5	83 c6 08	 add	 esi, 8
  007d8	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  007db	03 d8		 add	 ebx, eax
  007dd	83 fe 20	 cmp	 esi, 32			; 00000020H
  007e0	72 de		 jb	 SHORT $LL276@inflate
$LN278@inflate:

; 871  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  007e2	8b cb		 mov	 ecx, ebx
  007e4	8b c3		 mov	 eax, ebx
  007e6	f7 d1		 not	 ecx
  007e8	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  007ed	c1 e9 10	 shr	 ecx, 16			; 00000010H
  007f0	3b c1		 cmp	 eax, ecx
  007f2	74 0f		 je	 SHORT $LN270@inflate

; 872  :                 strm->msg = (char *)"invalid stored block lengths";

  007f4	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  007f7	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 873  :                 state->mode = BAD;
; 874  :                 break;

  007fe	e9 ce 0a 00 00	 jmp	 $LN786@inflate
$LN270@inflate:

; 875  :             }
; 876  :             state->length = (unsigned)hold & 0xffff;
; 877  :             Tracev((stderr, "inflate:       stored length %u\n",
; 878  :                     state->length));
; 879  :             INITBITS();

  00803	33 db		 xor	 ebx, ebx
  00805	33 f6		 xor	 esi, esi

; 880  :             state->mode = COPY_;
; 881  :             if (flush == Z_TREES) goto inf_leave;

  00807	83 7d 0c 06	 cmp	 DWORD PTR _flush$[ebp], 6
  0080b	89 47 40	 mov	 DWORD PTR [edi+64], eax
  0080e	c7 07 0e 00 00
	00		 mov	 DWORD PTR [edi], 14	; 0000000eH
  00814	0f 84 1b 0b 00
	00		 je	 $inf_leave$80515
$LN266@inflate:

; 882  :         case COPY_:
; 883  :             state->mode = COPY;

  0081a	c7 07 0f 00 00
	00		 mov	 DWORD PTR [edi], 15	; 0000000fH
$LN264@inflate:

; 884  :         case COPY:
; 885  :             copy = state->length;

  00820	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00823	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 886  :             if (copy) {

  00826	85 c0		 test	 eax, eax
  00828	0f 84 73 06 00
	00		 je	 $LN263@inflate

; 887  :                 if (copy > have) copy = have;

  0082e	8b 4d fc	 mov	 ecx, DWORD PTR _have$[ebp]
  00831	3b c1		 cmp	 eax, ecx
  00833	76 05		 jbe	 SHORT $LN262@inflate
  00835	8b c1		 mov	 eax, ecx
  00837	89 4d f4	 mov	 DWORD PTR _copy$[ebp], ecx
$LN262@inflate:

; 888  :                 if (copy > left) copy = left;

  0083a	8b 4d f0	 mov	 ecx, DWORD PTR _left$[ebp]
  0083d	3b c1		 cmp	 eax, ecx
  0083f	76 05		 jbe	 SHORT $LN261@inflate
  00841	8b c1		 mov	 eax, ecx
  00843	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
$LN261@inflate:

; 889  :                 if (copy == 0) goto inf_leave;

  00846	85 c0		 test	 eax, eax
  00848	0f 84 e7 0a 00
	00		 je	 $inf_leave$80515

; 890  :                 zmemcpy(put, next, copy);

  0084e	8b 4d f4	 mov	 ecx, DWORD PTR _copy$[ebp]
  00851	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00854	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  00857	51		 push	 ecx
  00858	52		 push	 edx
  00859	50		 push	 eax
  0085a	e8 00 00 00 00	 call	 _memcpy

; 891  :                 have -= copy;

  0085f	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]

; 892  :                 next += copy;

  00862	01 45 f8	 add	 DWORD PTR _next$[ebp], eax
  00865	29 45 fc	 sub	 DWORD PTR _have$[ebp], eax

; 893  :                 left -= copy;

  00868	29 45 f0	 sub	 DWORD PTR _left$[ebp], eax

; 894  :                 put += copy;

  0086b	01 45 e8	 add	 DWORD PTR _put$[ebp], eax

; 895  :                 state->length -= copy;
; 896  :                 break;

  0086e	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00871	83 c4 0c	 add	 esp, 12			; 0000000cH
  00874	29 47 40	 sub	 DWORD PTR [edi+64], eax
  00877	e9 5b 0a 00 00	 jmp	 $LN490@inflate
$LN258@inflate:

; 897  :             }
; 898  :             Tracev((stderr, "inflate:       stored end\n"));
; 899  :             state->mode = TYPE;
; 900  :             break;
; 901  :         case TABLE:
; 902  :             NEEDBITS(14);

  0087c	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  0087f	73 22		 jae	 SHORT $LN257@inflate
$LL255@inflate:
  00881	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00885	0f 84 aa 0a 00
	00		 je	 $inf_leave$80515
  0088b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0088e	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00891	8b ce		 mov	 ecx, esi
  00893	d3 e0		 shl	 eax, cl
  00895	42		 inc	 edx
  00896	83 c6 08	 add	 esi, 8
  00899	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  0089c	03 d8		 add	 ebx, eax
  0089e	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  008a1	72 de		 jb	 SHORT $LL255@inflate
$LN257@inflate:

; 903  :             state->nlen = BITS(5) + 257;

  008a3	8b cb		 mov	 ecx, ebx
  008a5	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 904  :             DROPBITS(5);

  008a8	c1 eb 05	 shr	 ebx, 5
  008ab	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H

; 905  :             state->ndist = BITS(5) + 1;

  008b1	8b c3		 mov	 eax, ebx
  008b3	89 4f 60	 mov	 DWORD PTR [edi+96], ecx

; 906  :             DROPBITS(5);

  008b6	c1 eb 05	 shr	 ebx, 5

; 907  :             state->ncode = BITS(4) + 4;

  008b9	8b cb		 mov	 ecx, ebx
  008bb	83 e0 1f	 and	 eax, 31			; 0000001fH
  008be	83 e1 0f	 and	 ecx, 15			; 0000000fH
  008c1	40		 inc	 eax
  008c2	83 c1 04	 add	 ecx, 4

; 908  :             DROPBITS(4);

  008c5	c1 eb 04	 shr	 ebx, 4
  008c8	83 ee 0e	 sub	 esi, 14			; 0000000eH

; 909  : #ifndef PKZIP_BUG_WORKAROUND
; 910  :             if (state->nlen > 286 || state->ndist > 30) {

  008cb	81 7f 60 1e 01
	00 00		 cmp	 DWORD PTR [edi+96], 286	; 0000011eH
  008d2	89 47 64	 mov	 DWORD PTR [edi+100], eax
  008d5	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx
  008d8	0f 87 e5 00 00
	00		 ja	 $LN239@inflate
  008de	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  008e1	0f 87 dc 00 00
	00		 ja	 $LN239@inflate

; 914  :             }
; 915  : #endif
; 916  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 917  :             state->have = 0;

  008e7	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0

; 918  :             state->mode = LENLENS;

  008ee	c7 07 11 00 00
	00		 mov	 DWORD PTR [edi], 17	; 00000011H
$LN730@inflate:

; 919  :         case LENLENS:
; 920  :             while (state->have < state->ncode) {

  008f4	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  008f7	3b 4f 5c	 cmp	 ecx, DWORD PTR [edi+92]
  008fa	73 51		 jae	 SHORT $LN527@inflate
  008fc	8d 64 24 00	 npad	 4
$LL237@inflate:

; 921  :                 NEEDBITS(3);

  00900	83 fe 03	 cmp	 esi, 3
  00903	73 22		 jae	 SHORT $LN234@inflate
$LL232@inflate:
  00905	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00909	0f 84 26 0a 00
	00		 je	 $inf_leave$80515
  0090f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00912	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00915	8b ce		 mov	 ecx, esi
  00917	d3 e0		 shl	 eax, cl
  00919	42		 inc	 edx
  0091a	83 c6 08	 add	 esi, 8
  0091d	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00920	03 d8		 add	 ebx, eax
  00922	83 fe 03	 cmp	 esi, 3
  00925	72 de		 jb	 SHORT $LL232@inflate
$LN234@inflate:

; 922  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00927	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  0092a	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflate@@9@9[eax*2]
  00932	8b cb		 mov	 ecx, ebx
  00934	83 e1 07	 and	 ecx, 7
  00937	66 89 4c 47 70	 mov	 WORD PTR [edi+eax*2+112], cx
  0093c	ff 47 68	 inc	 DWORD PTR [edi+104]
  0093f	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]

; 923  :                 DROPBITS(3);

  00942	c1 eb 03	 shr	 ebx, 3
  00945	83 ee 03	 sub	 esi, 3
  00948	3b 4f 5c	 cmp	 ecx, DWORD PTR [edi+92]
  0094b	72 b3		 jb	 SHORT $LL237@inflate
$LN527@inflate:

; 924  :             }
; 925  :             while (state->have < 19)

  0094d	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  00952	39 47 68	 cmp	 DWORD PTR [edi+104], eax
  00955	73 23		 jae	 SHORT $LN222@inflate
  00957	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL223@inflate:

; 926  :                 state->lens[order[state->have++]] = 0;

  00960	8b 57 68	 mov	 edx, DWORD PTR [edi+104]
  00963	0f b7 0c 55 00
	00 00 00	 movzx	 ecx, WORD PTR ?order@?1??inflate@@9@9[edx*2]
  0096b	33 d2		 xor	 edx, edx
  0096d	66 89 54 4f 70	 mov	 WORD PTR [edi+ecx*2+112], dx
  00972	ff 47 68	 inc	 DWORD PTR [edi+104]
  00975	39 47 68	 cmp	 DWORD PTR [edi+104], eax
  00978	72 e6		 jb	 SHORT $LL223@inflate
$LN222@inflate:

; 927  :             state->next = state->codes;

  0097a	8d 87 30 05 00
	00		 lea	 eax, DWORD PTR [edi+1328]
  00980	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  00983	89 01		 mov	 DWORD PTR [ecx], eax

; 928  :             state->lencode = (code const FAR *)(state->next);

  00985	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 929  :             state->lenbits = 7;
; 930  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),
; 931  :                                 &(state->lenbits), state->work);

  00988	8d 97 f0 02 00
	00		 lea	 edx, DWORD PTR [edi+752]
  0098e	52		 push	 edx
  0098f	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  00992	50		 push	 eax
  00993	51		 push	 ecx
  00994	c7 00 07 00 00
	00		 mov	 DWORD PTR [eax], 7
  0099a	6a 13		 push	 19			; 00000013H
  0099c	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  0099f	50		 push	 eax
  009a0	6a 00		 push	 0
  009a2	e8 00 00 00 00	 call	 _inflate_table

; 934  :                 state->mode = BAD;
; 935  :                 break;

  009a7	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  009aa	83 c4 18	 add	 esp, 24			; 00000018H
  009ad	89 45 d8	 mov	 DWORD PTR _ret$[ebp], eax
  009b0	85 c0		 test	 eax, eax
  009b2	74 1e		 je	 SHORT $LN221@inflate

; 932  :             if (ret) {
; 933  :                 strm->msg = (char *)"invalid code lengths set";

  009b4	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  009b7	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 934  :                 state->mode = BAD;
; 935  :                 break;

  009be	e9 0e 09 00 00	 jmp	 $LN786@inflate
$LN239@inflate:

; 911  :                 strm->msg = (char *)"too many length or distance symbols";

  009c3	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009c6	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 912  :                 state->mode = BAD;
; 913  :                 break;

  009cd	e9 ff 08 00 00	 jmp	 $LN786@inflate
$LN221@inflate:

; 936  :             }
; 937  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 938  :             state->have = 0;

  009d2	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0

; 939  :             state->mode = CODELENS;

  009d9	c7 07 12 00 00
	00		 mov	 DWORD PTR [edi], 18	; 00000012H
$LN528@inflate:

; 940  :         case CODELENS:
; 941  :             while (state->have < state->nlen + state->ndist) {

  009df	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  009e2	03 47 60	 add	 eax, DWORD PTR [edi+96]
  009e5	39 47 68	 cmp	 DWORD PTR [edi+104], eax
  009e8	0f 83 e5 01 00
	00		 jae	 $LN218@inflate
  009ee	8b ff		 npad	 2
$LL219@inflate:

; 942  :                 for (;;) {
; 943  :                     here = state->lencode[BITS(state->lenbits)];

  009f0	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  009f3	b8 01 00 00 00	 mov	 eax, 1
  009f8	d3 e0		 shl	 eax, cl
  009fa	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  009fd	48		 dec	 eax
  009fe	23 c3		 and	 eax, ebx
  00a00	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]

; 944  :                     if ((unsigned)(here.bits) <= bits) break;

  00a03	8b c1		 mov	 eax, ecx
  00a05	c1 e8 08	 shr	 eax, 8
  00a08	0f b6 c0	 movzx	 eax, al
  00a0b	89 4d f4	 mov	 DWORD PTR _here$[ebp], ecx
  00a0e	3b c6		 cmp	 eax, esi
  00a10	76 3f		 jbe	 SHORT $LN555@inflate
$LL217@inflate:

; 945  :                     PULLBYTE();

  00a12	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00a16	0f 84 19 09 00
	00		 je	 $inf_leave$80515
  00a1c	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00a1f	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00a22	8b ce		 mov	 ecx, esi
  00a24	d3 e0		 shl	 eax, cl
  00a26	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  00a29	42		 inc	 edx
  00a2a	83 c6 08	 add	 esi, 8
  00a2d	03 d8		 add	 ebx, eax
  00a2f	b8 01 00 00 00	 mov	 eax, 1
  00a34	d3 e0		 shl	 eax, cl
  00a36	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00a39	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00a3c	48		 dec	 eax
  00a3d	23 c3		 and	 eax, ebx
  00a3f	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00a42	8b c1		 mov	 eax, ecx
  00a44	c1 e8 08	 shr	 eax, 8
  00a47	0f b6 c0	 movzx	 eax, al
  00a4a	89 4d f4	 mov	 DWORD PTR _here$[ebp], ecx
  00a4d	3b c6		 cmp	 eax, esi
  00a4f	77 c1		 ja	 SHORT $LL217@inflate
$LN555@inflate:

; 946  :                 }
; 947  :                 if (here.val < 16) {

  00a51	8b c1		 mov	 eax, ecx
  00a53	c1 e8 10	 shr	 eax, 16			; 00000010H
  00a56	89 45 d4	 mov	 DWORD PTR tv2303[ebp], eax
  00a59	66 83 f8 10	 cmp	 ax, 16			; 00000010H
  00a5d	73 1a		 jae	 SHORT $LN782@inflate

; 948  :                     DROPBITS(here.bits);

  00a5f	c1 e9 08	 shr	 ecx, 8
  00a62	0f b6 c9	 movzx	 ecx, cl
  00a65	d3 eb		 shr	 ebx, cl
  00a67	2b f1		 sub	 esi, ecx

; 949  :                     state->lens[state->have++] = here.val;

  00a69	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  00a6c	66 89 44 4f 70	 mov	 WORD PTR [edi+ecx*2+112], ax
  00a71	ff 47 68	 inc	 DWORD PTR [edi+104]

; 950  :                 }
; 951  :                 else {

  00a74	e9 4b 01 00 00	 jmp	 $LN733@inflate
$LN782@inflate:

; 952  :                     if (here.val == 16) {

  00a79	75 6f		 jne	 SHORT $LN205@inflate

; 953  :                         NEEDBITS(here.bits + 2);

  00a7b	8b c1		 mov	 eax, ecx
  00a7d	c1 e8 08	 shr	 eax, 8
  00a80	0f b6 c0	 movzx	 eax, al
  00a83	83 c0 02	 add	 eax, 2
  00a86	3b f0		 cmp	 esi, eax
  00a88	73 30		 jae	 SHORT $LN203@inflate
  00a8a	8d 9b 00 00 00
	00		 npad	 6
$LL201@inflate:
  00a90	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00a94	0f 84 9b 08 00
	00		 je	 $inf_leave$80515
  00a9a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00a9d	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00aa0	8b ce		 mov	 ecx, esi
  00aa2	d3 e0		 shl	 eax, cl
  00aa4	8b 4d f4	 mov	 ecx, DWORD PTR _here$[ebp]
  00aa7	42		 inc	 edx
  00aa8	83 c6 08	 add	 esi, 8
  00aab	03 d8		 add	 ebx, eax
  00aad	0f b6 c5	 movzx	 eax, ch
  00ab0	83 c0 02	 add	 eax, 2
  00ab3	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00ab6	3b f0		 cmp	 esi, eax
  00ab8	72 d6		 jb	 SHORT $LL201@inflate
$LN203@inflate:

; 954  :                         DROPBITS(here.bits);
; 955  :                         if (state->have == 0) {

  00aba	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00abd	0f b6 cd	 movzx	 ecx, ch
  00ac0	d3 eb		 shr	 ebx, cl
  00ac2	2b f1		 sub	 esi, ecx
  00ac4	85 c0		 test	 eax, eax
  00ac6	0f 84 29 01 00
	00		 je	 $LN560@inflate

; 959  :                         }
; 960  :                         len = state->lens[state->have - 1];

  00acc	0f b7 4c 47 6e	 movzx	 ecx, WORD PTR [edi+eax*2+110]

; 961  :                         copy = 3 + BITS(2);

  00ad1	8b c3		 mov	 eax, ebx
  00ad3	83 e0 03	 and	 eax, 3
  00ad6	83 c0 03	 add	 eax, 3

; 962  :                         DROPBITS(2);

  00ad9	c1 eb 02	 shr	 ebx, 2
  00adc	89 4d e4	 mov	 DWORD PTR _len$[ebp], ecx
  00adf	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
  00ae2	83 ee 02	 sub	 esi, 2

; 963  :                     }
; 964  :                     else if (here.val == 17) {

  00ae5	e9 a5 00 00 00	 jmp	 $LN156@inflate
$LN205@inflate:
  00aea	66 83 7d f6 11	 cmp	 WORD PTR _here$[ebp+2], 17 ; 00000011H

; 965  :                         NEEDBITS(here.bits + 3);

  00aef	0f b6 cd	 movzx	 ecx, ch
  00af2	89 4d dc	 mov	 DWORD PTR tv2314[ebp], ecx
  00af5	75 47		 jne	 SHORT $LN170@inflate
  00af7	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00afa	3b f0		 cmp	 esi, eax
  00afc	73 29		 jae	 SHORT $LN185@inflate
  00afe	8b ff		 npad	 2
$LL183@inflate:
  00b00	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00b04	0f 84 2b 08 00
	00		 je	 $inf_leave$80515
  00b0a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00b0d	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00b10	8b ce		 mov	 ecx, esi
  00b12	d3 e0		 shl	 eax, cl
  00b14	8b 4d dc	 mov	 ecx, DWORD PTR tv2314[ebp]
  00b17	42		 inc	 edx
  00b18	83 c6 08	 add	 esi, 8
  00b1b	03 d8		 add	 ebx, eax
  00b1d	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00b20	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00b23	3b f0		 cmp	 esi, eax
  00b25	72 d9		 jb	 SHORT $LL183@inflate
$LN185@inflate:

; 966  :                         DROPBITS(here.bits);

  00b27	d3 eb		 shr	 ebx, cl

; 967  :                         len = 0;
; 968  :                         copy = 3 + BITS(3);

  00b29	8b c3		 mov	 eax, ebx
  00b2b	83 e0 07	 and	 eax, 7
  00b2e	83 c0 03	 add	 eax, 3
  00b31	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 969  :                         DROPBITS(3);

  00b34	c1 eb 03	 shr	 ebx, 3
  00b37	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 970  :                     }
; 971  :                     else {

  00b3c	eb 43		 jmp	 SHORT $LN783@inflate
$LN170@inflate:

; 972  :                         NEEDBITS(here.bits + 7);

  00b3e	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00b41	3b f0		 cmp	 esi, eax
  00b43	73 27		 jae	 SHORT $LN169@inflate
$LL167@inflate:
  00b45	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00b49	0f 84 e6 07 00
	00		 je	 $inf_leave$80515
  00b4f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00b52	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00b55	8b ce		 mov	 ecx, esi
  00b57	d3 e0		 shl	 eax, cl
  00b59	8b 4d dc	 mov	 ecx, DWORD PTR tv2314[ebp]
  00b5c	42		 inc	 edx
  00b5d	83 c6 08	 add	 esi, 8
  00b60	03 d8		 add	 ebx, eax
  00b62	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00b65	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00b68	3b f0		 cmp	 esi, eax
  00b6a	72 d9		 jb	 SHORT $LL167@inflate
$LN169@inflate:

; 973  :                         DROPBITS(here.bits);

  00b6c	d3 eb		 shr	 ebx, cl

; 974  :                         len = 0;
; 975  :                         copy = 11 + BITS(7);

  00b6e	8b c3		 mov	 eax, ebx
  00b70	83 e0 7f	 and	 eax, 127		; 0000007fH
  00b73	83 c0 0b	 add	 eax, 11			; 0000000bH
  00b76	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 976  :                         DROPBITS(7);

  00b79	c1 eb 07	 shr	 ebx, 7
  00b7c	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN783@inflate:
  00b81	2b c1		 sub	 eax, ecx
  00b83	03 f0		 add	 esi, eax
  00b85	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
  00b88	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0
$LN156@inflate:

; 977  :                     }
; 978  :                     if (state->have + copy > state->nlen + state->ndist) {

  00b8f	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  00b92	03 c8		 add	 ecx, eax
  00b94	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00b97	03 47 60	 add	 eax, DWORD PTR [edi+96]
  00b9a	3b c8		 cmp	 ecx, eax
  00b9c	77 66		 ja	 SHORT $LN561@inflate

; 980  :                         state->mode = BAD;
; 981  :                         break;
; 982  :                     }
; 983  :                     while (copy--)

  00b9e	83 7d f4 00	 cmp	 DWORD PTR _copy$[ebp], 0
  00ba2	74 20		 je	 SHORT $LN733@inflate
  00ba4	8b 45 e4	 mov	 eax, DWORD PTR _len$[ebp]
  00ba7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL154@inflate:

; 984  :                         state->lens[state->have++] = (unsigned short)len;

  00bb0	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  00bb3	ff 4d f4	 dec	 DWORD PTR _copy$[ebp]
  00bb6	66 89 44 4f 70	 mov	 WORD PTR [edi+ecx*2+112], ax
  00bbb	ff 47 68	 inc	 DWORD PTR [edi+104]
  00bbe	83 7d f4 00	 cmp	 DWORD PTR _copy$[ebp], 0
  00bc2	75 ec		 jne	 SHORT $LL154@inflate
$LN733@inflate:

; 940  :         case CODELENS:
; 941  :             while (state->have < state->nlen + state->ndist) {

  00bc4	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00bc7	03 47 60	 add	 eax, DWORD PTR [edi+96]
  00bca	39 47 68	 cmp	 DWORD PTR [edi+104], eax
  00bcd	0f 82 1d fe ff
	ff		 jb	 $LL219@inflate
$LN218@inflate:

; 985  :                 }
; 986  :             }
; 987  : 
; 988  :             /* handle error breaks in while */
; 989  :             if (state->mode == BAD) break;

  00bd3	83 3f 1d	 cmp	 DWORD PTR [edi], 29	; 0000001dH
  00bd6	0f 84 fb 06 00
	00		 je	 $LN490@inflate

; 990  : 
; 991  :             /* check for end-of-block code (better have one) */
; 992  :             if (state->lens[256] == 0) {

  00bdc	66 83 bf 70 02
	00 00 00	 cmp	 WORD PTR [edi+624], 0
  00be4	75 2d		 jne	 SHORT $LN151@inflate

; 993  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  00be6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00be9	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 994  :                 state->mode = BAD;
; 995  :                 break;

  00bf0	e9 dc 06 00 00	 jmp	 $LN786@inflate
$LN560@inflate:

; 956  :                             strm->msg = (char *)"invalid bit length repeat";

  00bf5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00bf8	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 957  :                             state->mode = BAD;
; 958  :                             break;

  00bff	e9 cd 06 00 00	 jmp	 $LN786@inflate
$LN561@inflate:

; 979  :                         strm->msg = (char *)"invalid bit length repeat";

  00c04	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c07	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 985  :                 }
; 986  :             }
; 987  : 
; 988  :             /* handle error breaks in while */
; 989  :             if (state->mode == BAD) break;

  00c0e	e9 be 06 00 00	 jmp	 $LN786@inflate
$LN151@inflate:

; 996  :             }
; 997  : 
; 998  :             /* build code tables -- note: do not change the lenbits or distbits
; 999  :                values here (9 and 6) without reading the comments in inftrees.h
; 1000 :                concerning the ENOUGH constants, which depend on those values */
; 1001 :             state->next = state->codes;

  00c13	8d 87 30 05 00
	00		 lea	 eax, DWORD PTR [edi+1328]
  00c19	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  00c1c	89 01		 mov	 DWORD PTR [ecx], eax

; 1002 :             state->lencode = (code const FAR *)(state->next);

  00c1e	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 1003 :             state->lenbits = 9;
; 1004 :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
; 1005 :                                 &(state->lenbits), state->work);

  00c21	8d 97 f0 02 00
	00		 lea	 edx, DWORD PTR [edi+752]
  00c27	52		 push	 edx
  00c28	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00c2b	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  00c2e	50		 push	 eax
  00c2f	51		 push	 ecx
  00c30	c7 00 09 00 00
	00		 mov	 DWORD PTR [eax], 9
  00c36	52		 push	 edx
  00c37	8d 47 70	 lea	 eax, DWORD PTR [edi+112]
  00c3a	50		 push	 eax
  00c3b	6a 01		 push	 1
  00c3d	e8 00 00 00 00	 call	 _inflate_table
  00c42	83 c4 18	 add	 esp, 24			; 00000018H
  00c45	89 45 d8	 mov	 DWORD PTR _ret$[ebp], eax

; 1006 :             if (ret) {

  00c48	85 c0		 test	 eax, eax
  00c4a	74 12		 je	 SHORT $LN150@inflate

; 1007 :                 strm->msg = (char *)"invalid literal/lengths set";

  00c4c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 1008 :                 state->mode = BAD;
; 1009 :                 break;

  00c4f	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00c52	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
  00c59	e9 73 06 00 00	 jmp	 $LN786@inflate
$LN150@inflate:

; 1010 :             }
; 1011 :             state->distcode = (code const FAR *)(state->next);

  00c5e	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]
  00c61	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  00c64	89 57 50	 mov	 DWORD PTR [edi+80], edx

; 1012 :             state->distbits = 6;
; 1013 :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
; 1014 :                             &(state->next), &(state->distbits), state->work);

  00c67	8d 97 f0 02 00
	00		 lea	 edx, DWORD PTR [edi+752]
  00c6d	52		 push	 edx
  00c6e	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  00c71	50		 push	 eax
  00c72	51		 push	 ecx
  00c73	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  00c76	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6
  00c7c	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00c7f	50		 push	 eax
  00c80	8d 54 4f 70	 lea	 edx, DWORD PTR [edi+ecx*2+112]
  00c84	52		 push	 edx
  00c85	6a 02		 push	 2
  00c87	e8 00 00 00 00	 call	 _inflate_table

; 1017 :                 state->mode = BAD;
; 1018 :                 break;

  00c8c	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  00c8f	83 c4 18	 add	 esp, 24			; 00000018H
  00c92	89 45 d8	 mov	 DWORD PTR _ret$[ebp], eax
  00c95	85 c0		 test	 eax, eax
  00c97	74 0f		 je	 SHORT $LN149@inflate

; 1015 :             if (ret) {
; 1016 :                 strm->msg = (char *)"invalid distances set";

  00c99	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c9c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 1017 :                 state->mode = BAD;
; 1018 :                 break;

  00ca3	e9 29 06 00 00	 jmp	 $LN786@inflate
$LN149@inflate:

; 1019 :             }
; 1020 :             Tracev((stderr, "inflate:       codes ok\n"));
; 1021 :             state->mode = LEN_;
; 1022 :             if (flush == Z_TREES) goto inf_leave;

  00ca8	83 7d 0c 06	 cmp	 DWORD PTR _flush$[ebp], 6
  00cac	c7 07 13 00 00
	00		 mov	 DWORD PTR [edi], 19	; 00000013H
  00cb2	0f 84 7d 06 00
	00		 je	 $inf_leave$80515
$LN148@inflate:

; 1023 :         case LEN_:
; 1024 :             state->mode = LEN;

  00cb8	c7 07 14 00 00
	00		 mov	 DWORD PTR [edi], 20	; 00000014H
$LN146@inflate:

; 1025 :         case LEN:
; 1026 :             if (have >= 6 && left >= 258) {

  00cbe	83 7d fc 06	 cmp	 DWORD PTR _have$[ebp], 6
  00cc2	72 6e		 jb	 SHORT $LN145@inflate
  00cc4	81 7d f0 02 01
	00 00		 cmp	 DWORD PTR _left$[ebp], 258 ; 00000102H
  00ccb	72 65		 jb	 SHORT $LN145@inflate

; 1027 :                 RESTORE();

  00ccd	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00cd0	8b 4d e8	 mov	 ecx, DWORD PTR _put$[ebp]
  00cd3	8b 55 f0	 mov	 edx, DWORD PTR _left$[ebp]
  00cd6	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00cd9	8b 4d f8	 mov	 ecx, DWORD PTR _next$[ebp]
  00cdc	89 08		 mov	 DWORD PTR [eax], ecx

; 1028 :                 inflate_fast(strm, out);

  00cde	8b 4d e0	 mov	 ecx, DWORD PTR _out$[ebp]
  00ce1	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00ce4	8b 55 fc	 mov	 edx, DWORD PTR _have$[ebp]
  00ce7	51		 push	 ecx
  00ce8	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00ceb	50		 push	 eax
  00cec	89 5f 38	 mov	 DWORD PTR [edi+56], ebx
  00cef	89 77 3c	 mov	 DWORD PTR [edi+60], esi
  00cf2	e8 00 00 00 00	 call	 _inflate_fast

; 1029 :                 LOAD();

  00cf7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00cfa	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00cfd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00d00	8b 5f 38	 mov	 ebx, DWORD PTR [edi+56]
  00d03	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  00d06	89 55 e8	 mov	 DWORD PTR _put$[ebp], edx
  00d09	8b 10		 mov	 edx, DWORD PTR [eax]
  00d0b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00d0e	83 c4 08	 add	 esp, 8

; 1030 :                 if (state->mode == TYPE)

  00d11	83 3f 0b	 cmp	 DWORD PTR [edi], 11	; 0000000bH
  00d14	89 4d f0	 mov	 DWORD PTR _left$[ebp], ecx
  00d17	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00d1a	89 45 fc	 mov	 DWORD PTR _have$[ebp], eax
  00d1d	0f 85 b4 05 00
	00		 jne	 $LN490@inflate

; 1031 :                     state->back = -1;

  00d23	c7 87 c4 1b 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+7108], -1

; 1032 :                 break;

  00d2d	e9 a5 05 00 00	 jmp	 $LN490@inflate
$LN145@inflate:

; 1033 :             }
; 1034 :             state->back = 0;
; 1035 :             for (;;) {
; 1036 :                 here = state->lencode[BITS(state->lenbits)];

  00d32	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  00d35	b8 01 00 00 00	 mov	 eax, 1
  00d3a	d3 e0		 shl	 eax, cl
  00d3c	c7 87 c4 1b 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+7108], 0
  00d46	48		 dec	 eax
  00d47	23 c3		 and	 eax, ebx
  00d49	8b c8		 mov	 ecx, eax
  00d4b	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00d4e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1037 :                 if ((unsigned)(here.bits) <= bits) break;

  00d51	8b c8		 mov	 ecx, eax
  00d53	c1 e9 08	 shr	 ecx, 8
  00d56	0f b6 c9	 movzx	 ecx, cl
  00d59	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00d5c	3b ce		 cmp	 ecx, esi
  00d5e	76 3f		 jbe	 SHORT $LN562@inflate
$LL137@inflate:

; 1038 :                 PULLBYTE();

  00d60	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00d64	0f 84 cb 05 00
	00		 je	 $inf_leave$80515
  00d6a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00d6d	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00d70	8b ce		 mov	 ecx, esi
  00d72	d3 e0		 shl	 eax, cl
  00d74	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  00d77	42		 inc	 edx
  00d78	83 c6 08	 add	 esi, 8
  00d7b	03 d8		 add	 ebx, eax
  00d7d	b8 01 00 00 00	 mov	 eax, 1
  00d82	d3 e0		 shl	 eax, cl
  00d84	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00d87	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00d8a	48		 dec	 eax
  00d8b	23 c3		 and	 eax, ebx
  00d8d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00d90	8b c8		 mov	 ecx, eax
  00d92	c1 e9 08	 shr	 ecx, 8
  00d95	0f b6 c9	 movzx	 ecx, cl
  00d98	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00d9b	3b ce		 cmp	 ecx, esi
  00d9d	77 c1		 ja	 SHORT $LL137@inflate
$LN562@inflate:

; 1039 :             }
; 1040 :             if (here.op && (here.op & 0xf0) == 0) {

  00d9f	84 c0		 test	 al, al
  00da1	0f 84 c0 00 00
	00		 je	 $LN119@inflate
  00da7	a8 f0		 test	 al, 240			; 000000f0H
  00da9	0f 85 b8 00 00
	00		 jne	 $LN119@inflate

; 1041 :                 last = here;
; 1042 :                 for (;;) {
; 1043 :                     here = state->lencode[last.val +
; 1044 :                             (BITS(last.bits + last.op) >> last.bits)];

  00daf	8b c8		 mov	 ecx, eax
  00db1	c1 e9 08	 shr	 ecx, 8
  00db4	89 4d d4	 mov	 DWORD PTR tv2288[ebp], ecx
  00db7	0f b6 c9	 movzx	 ecx, cl
  00dba	89 4d e4	 mov	 DWORD PTR tv2289[ebp], ecx
  00dbd	0f b6 c8	 movzx	 ecx, al
  00dc0	03 4d e4	 add	 ecx, DWORD PTR tv2289[ebp]
  00dc3	89 45 dc	 mov	 DWORD PTR _last$[ebp], eax
  00dc6	b8 01 00 00 00	 mov	 eax, 1
  00dcb	d3 e0		 shl	 eax, cl
  00dcd	8b 4d e4	 mov	 ecx, DWORD PTR tv2289[ebp]
  00dd0	48		 dec	 eax
  00dd1	23 c3		 and	 eax, ebx
  00dd3	d3 e8		 shr	 eax, cl
  00dd5	8b 4d f4	 mov	 ecx, DWORD PTR _here$[ebp]
  00dd8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ddb	03 c1		 add	 eax, ecx
  00ddd	8b c8		 mov	 ecx, eax
  00ddf	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00de2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1045 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00de5	0f b6 4d d4	 movzx	 ecx, BYTE PTR tv2288[ebp]
  00de9	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00dec	c1 e8 08	 shr	 eax, 8
  00def	0f b6 c0	 movzx	 eax, al
  00df2	03 c1		 add	 eax, ecx
  00df4	3b c6		 cmp	 eax, esi
  00df6	76 5e		 jbe	 SHORT $LN122@inflate
  00df8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL129@inflate:

; 1046 :                     PULLBYTE();

  00e00	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00e04	0f 84 2b 05 00
	00		 je	 $inf_leave$80515
  00e0a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00e0d	8b ce		 mov	 ecx, esi
  00e0f	d3 e0		 shl	 eax, cl
  00e11	8b 4d dc	 mov	 ecx, DWORD PTR _last$[ebp]
  00e14	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00e17	42		 inc	 edx
  00e18	03 d8		 add	 ebx, eax
  00e1a	0f b6 c5	 movzx	 eax, ch
  00e1d	89 45 e4	 mov	 DWORD PTR tv2387[ebp], eax
  00e20	0f b6 c9	 movzx	 ecx, cl
  00e23	03 c8		 add	 ecx, eax
  00e25	b8 01 00 00 00	 mov	 eax, 1
  00e2a	d3 e0		 shl	 eax, cl
  00e2c	8b 4d e4	 mov	 ecx, DWORD PTR tv2387[ebp]
  00e2f	83 c6 08	 add	 esi, 8
  00e32	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00e35	48		 dec	 eax
  00e36	23 c3		 and	 eax, ebx
  00e38	d3 e8		 shr	 eax, cl
  00e3a	0f b7 4d de	 movzx	 ecx, WORD PTR _last$[ebp+2]
  00e3e	03 c1		 add	 eax, ecx
  00e40	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00e43	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00e46	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00e49	c1 e8 08	 shr	 eax, 8
  00e4c	0f b6 c0	 movzx	 eax, al
  00e4f	03 45 e4	 add	 eax, DWORD PTR tv2387[ebp]
  00e52	3b c6		 cmp	 eax, esi
  00e54	77 aa		 ja	 SHORT $LL129@inflate
$LN122@inflate:

; 1047 :                 }
; 1048 :                 DROPBITS(last.bits);

  00e56	0f b6 4d dd	 movzx	 ecx, BYTE PTR _last$[ebp+1]

; 1049 :                 state->back += last.bits;

  00e5a	8b 45 f4	 mov	 eax, DWORD PTR _here$[ebp]
  00e5d	d3 eb		 shr	 ebx, cl
  00e5f	2b f1		 sub	 esi, ecx
  00e61	89 8f c4 1b 00
	00		 mov	 DWORD PTR [edi+7108], ecx
$LN119@inflate:

; 1050 :             }
; 1051 :             DROPBITS(here.bits);

  00e67	8b c8		 mov	 ecx, eax
  00e69	c1 e9 08	 shr	 ecx, 8
  00e6c	0f b6 c9	 movzx	 ecx, cl

; 1052 :             state->back += here.bits;

  00e6f	01 8f c4 1b 00
	00		 add	 DWORD PTR [edi+7108], ecx
  00e75	d3 eb		 shr	 ebx, cl
  00e77	2b f1		 sub	 esi, ecx
  00e79	89 4d e4	 mov	 DWORD PTR tv2289[ebp], ecx

; 1053 :             state->length = (unsigned)here.val;

  00e7c	8b c8		 mov	 ecx, eax
  00e7e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e81	89 4f 40	 mov	 DWORD PTR [edi+64], ecx

; 1054 :             if ((int)(here.op) == 0) {

  00e84	84 c0		 test	 al, al
  00e86	75 0b		 jne	 SHORT $LN116@inflate

; 1055 :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 1056 :                         "inflate:         literal '%c'\n" :
; 1057 :                         "inflate:         literal 0x%02x\n", here.val));
; 1058 :                 state->mode = LIT;

  00e88	c7 07 19 00 00
	00		 mov	 DWORD PTR [edi], 25	; 00000019H

; 1059 :                 break;

  00e8e	e9 44 04 00 00	 jmp	 $LN490@inflate
$LN116@inflate:

; 1060 :             }
; 1061 :             if (here.op & 32) {

  00e93	a8 20		 test	 al, 32			; 00000020H
  00e95	74 15		 je	 SHORT $LN115@inflate

; 1062 :                 Tracevv((stderr, "inflate:         end of block\n"));
; 1063 :                 state->back = -1;

  00e97	c7 87 c4 1b 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+7108], -1
$LN263@inflate:

; 1064 :                 state->mode = TYPE;

  00ea1	c7 07 0b 00 00
	00		 mov	 DWORD PTR [edi], 11	; 0000000bH

; 1065 :                 break;

  00ea7	e9 2b 04 00 00	 jmp	 $LN490@inflate
$LN115@inflate:

; 1066 :             }
; 1067 :             if (here.op & 64) {

  00eac	a8 40		 test	 al, 64			; 00000040H
  00eae	74 0f		 je	 SHORT $LN114@inflate

; 1068 :                 strm->msg = (char *)"invalid literal/length code";

  00eb0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00eb3	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 1069 :                 state->mode = BAD;
; 1070 :                 break;

  00eba	e9 12 04 00 00	 jmp	 $LN786@inflate
$LN114@inflate:

; 1071 :             }
; 1072 :             state->extra = (unsigned)(here.op) & 15;

  00ebf	0f b6 c8	 movzx	 ecx, al
  00ec2	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00ec5	89 4f 48	 mov	 DWORD PTR [edi+72], ecx

; 1073 :             state->mode = LENEXT;

  00ec8	c7 07 15 00 00
	00		 mov	 DWORD PTR [edi], 21	; 00000015H
$LN699@inflate:

; 1074 :         case LENEXT:
; 1075 :             if (state->extra) {

  00ece	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00ed1	85 c0		 test	 eax, eax
  00ed3	74 47		 je	 SHORT $LN736@inflate

; 1076 :                 NEEDBITS(state->extra);

  00ed5	3b f0		 cmp	 esi, eax
  00ed7	73 29		 jae	 SHORT $LN110@inflate
  00ed9	8d a4 24 00 00
	00 00		 npad	 7
$LL108@inflate:
  00ee0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00ee4	0f 84 4b 04 00
	00		 je	 $inf_leave$80515
  00eea	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00eed	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00ef0	8b ce		 mov	 ecx, esi
  00ef2	d3 e0		 shl	 eax, cl
  00ef4	42		 inc	 edx
  00ef5	83 c6 08	 add	 esi, 8
  00ef8	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00efb	03 d8		 add	 ebx, eax
  00efd	3b 77 48	 cmp	 esi, DWORD PTR [edi+72]
  00f00	72 de		 jb	 SHORT $LL108@inflate
$LN110@inflate:

; 1077 :                 state->length += BITS(state->extra);

  00f02	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  00f05	b8 01 00 00 00	 mov	 eax, 1
  00f0a	d3 e0		 shl	 eax, cl

; 1078 :                 DROPBITS(state->extra);

  00f0c	2b f1		 sub	 esi, ecx
  00f0e	48		 dec	 eax
  00f0f	23 c3		 and	 eax, ebx
  00f11	01 47 40	 add	 DWORD PTR [edi+64], eax
  00f14	d3 eb		 shr	 ebx, cl

; 1079 :                 state->back += state->extra;

  00f16	01 8f c4 1b 00
	00		 add	 DWORD PTR [edi+7108], ecx
$LN736@inflate:

; 1080 :             }
; 1081 :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 1082 :             state->was = state->length;

  00f1c	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00f1f	89 8f c8 1b 00
	00		 mov	 DWORD PTR [edi+7112], ecx

; 1083 :             state->mode = DIST;

  00f25	c7 07 16 00 00
	00		 mov	 DWORD PTR [edi], 22	; 00000016H
$LN700@inflate:

; 1084 :         case DIST:
; 1085 :             for (;;) {
; 1086 :                 here = state->distcode[BITS(state->distbits)];

  00f2b	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00f2e	b8 01 00 00 00	 mov	 eax, 1
  00f33	d3 e0		 shl	 eax, cl
  00f35	48		 dec	 eax
  00f36	23 c3		 and	 eax, ebx
  00f38	8b c8		 mov	 ecx, eax
  00f3a	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00f3d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1087 :                 if ((unsigned)(here.bits) <= bits) break;

  00f40	8b c8		 mov	 ecx, eax
  00f42	c1 e9 08	 shr	 ecx, 8
  00f45	0f b6 c9	 movzx	 ecx, cl
  00f48	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00f4b	3b ce		 cmp	 ecx, esi
  00f4d	76 40		 jbe	 SHORT $LN567@inflate
  00f4f	90		 npad	 1
$LL98@inflate:

; 1088 :                 PULLBYTE();

  00f50	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00f54	0f 84 db 03 00
	00		 je	 $inf_leave$80515
  00f5a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00f5d	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00f60	8b ce		 mov	 ecx, esi
  00f62	d3 e0		 shl	 eax, cl
  00f64	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00f67	42		 inc	 edx
  00f68	83 c6 08	 add	 esi, 8
  00f6b	03 d8		 add	 ebx, eax
  00f6d	b8 01 00 00 00	 mov	 eax, 1
  00f72	d3 e0		 shl	 eax, cl
  00f74	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00f77	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  00f7a	48		 dec	 eax
  00f7b	23 c3		 and	 eax, ebx
  00f7d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00f80	8b c8		 mov	 ecx, eax
  00f82	c1 e9 08	 shr	 ecx, 8
  00f85	0f b6 c9	 movzx	 ecx, cl
  00f88	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00f8b	3b ce		 cmp	 ecx, esi
  00f8d	77 c1		 ja	 SHORT $LL98@inflate
$LN567@inflate:

; 1089 :             }
; 1090 :             if ((here.op & 0xf0) == 0) {

  00f8f	a8 f0		 test	 al, 240			; 000000f0H
  00f91	0f 85 b0 00 00
	00		 jne	 $LN80@inflate

; 1091 :                 last = here;
; 1092 :                 for (;;) {
; 1093 :                     here = state->distcode[last.val +
; 1094 :                             (BITS(last.bits + last.op) >> last.bits)];

  00f97	8b c8		 mov	 ecx, eax
  00f99	c1 e9 08	 shr	 ecx, 8
  00f9c	89 4d d4	 mov	 DWORD PTR tv2288[ebp], ecx
  00f9f	0f b6 c9	 movzx	 ecx, cl
  00fa2	89 4d e4	 mov	 DWORD PTR tv2289[ebp], ecx
  00fa5	0f b6 c8	 movzx	 ecx, al
  00fa8	03 4d e4	 add	 ecx, DWORD PTR tv2289[ebp]
  00fab	89 45 dc	 mov	 DWORD PTR _last$[ebp], eax
  00fae	b8 01 00 00 00	 mov	 eax, 1
  00fb3	d3 e0		 shl	 eax, cl
  00fb5	8b 4d e4	 mov	 ecx, DWORD PTR tv2289[ebp]
  00fb8	48		 dec	 eax
  00fb9	23 c3		 and	 eax, ebx
  00fbb	d3 e8		 shr	 eax, cl
  00fbd	8b 4d f4	 mov	 ecx, DWORD PTR _here$[ebp]
  00fc0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00fc3	03 c1		 add	 eax, ecx
  00fc5	8b c8		 mov	 ecx, eax
  00fc7	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00fca	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1095 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00fcd	0f b6 4d d4	 movzx	 ecx, BYTE PTR tv2288[ebp]
  00fd1	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  00fd4	c1 e8 08	 shr	 eax, 8
  00fd7	0f b6 c0	 movzx	 eax, al
  00fda	03 c1		 add	 eax, ecx
  00fdc	3b c6		 cmp	 eax, esi
  00fde	76 56		 jbe	 SHORT $LN83@inflate
$LL90@inflate:

; 1096 :                     PULLBYTE();

  00fe0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  00fe4	0f 84 4b 03 00
	00		 je	 $inf_leave$80515
  00fea	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00fed	8b ce		 mov	 ecx, esi
  00fef	d3 e0		 shl	 eax, cl
  00ff1	8b 4d dc	 mov	 ecx, DWORD PTR _last$[ebp]
  00ff4	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  00ff7	42		 inc	 edx
  00ff8	03 d8		 add	 ebx, eax
  00ffa	0f b6 c5	 movzx	 eax, ch
  00ffd	89 45 e4	 mov	 DWORD PTR tv2387[ebp], eax
  01000	0f b6 c9	 movzx	 ecx, cl
  01003	03 c8		 add	 ecx, eax
  01005	b8 01 00 00 00	 mov	 eax, 1
  0100a	d3 e0		 shl	 eax, cl
  0100c	8b 4d e4	 mov	 ecx, DWORD PTR tv2387[ebp]
  0100f	83 c6 08	 add	 esi, 8
  01012	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  01015	48		 dec	 eax
  01016	23 c3		 and	 eax, ebx
  01018	d3 e8		 shr	 eax, cl
  0101a	0f b7 4d de	 movzx	 ecx, WORD PTR _last$[ebp+2]
  0101e	03 c1		 add	 eax, ecx
  01020	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  01023	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  01026	89 45 f4	 mov	 DWORD PTR _here$[ebp], eax
  01029	c1 e8 08	 shr	 eax, 8
  0102c	0f b6 c0	 movzx	 eax, al
  0102f	03 45 e4	 add	 eax, DWORD PTR tv2387[ebp]
  01032	3b c6		 cmp	 eax, esi
  01034	77 aa		 ja	 SHORT $LL90@inflate
$LN83@inflate:

; 1097 :                 }
; 1098 :                 DROPBITS(last.bits);

  01036	0f b6 4d dd	 movzx	 ecx, BYTE PTR _last$[ebp+1]

; 1099 :                 state->back += last.bits;

  0103a	8b 45 f4	 mov	 eax, DWORD PTR _here$[ebp]
  0103d	d3 eb		 shr	 ebx, cl
  0103f	2b f1		 sub	 esi, ecx
  01041	01 8f c4 1b 00
	00		 add	 DWORD PTR [edi+7108], ecx
$LN80@inflate:

; 1100 :             }
; 1101 :             DROPBITS(here.bits);

  01047	8b c8		 mov	 ecx, eax
  01049	c1 e9 08	 shr	 ecx, 8
  0104c	0f b6 c9	 movzx	 ecx, cl

; 1102 :             state->back += here.bits;

  0104f	01 8f c4 1b 00
	00		 add	 DWORD PTR [edi+7108], ecx
  01055	d3 eb		 shr	 ebx, cl
  01057	2b f1		 sub	 esi, ecx
  01059	89 4d e4	 mov	 DWORD PTR tv2289[ebp], ecx

; 1103 :             if (here.op & 64) {

  0105c	a8 40		 test	 al, 64			; 00000040H
  0105e	74 0f		 je	 SHORT $LN77@inflate

; 1104 :                 strm->msg = (char *)"invalid distance code";

  01060	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  01063	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 1105 :                 state->mode = BAD;
; 1106 :                 break;

  0106a	e9 62 02 00 00	 jmp	 $LN786@inflate
$LN77@inflate:

; 1107 :             }
; 1108 :             state->offset = (unsigned)here.val;

  0106f	8b c8		 mov	 ecx, eax

; 1109 :             state->extra = (unsigned)(here.op) & 15;

  01071	0f b6 c0	 movzx	 eax, al
  01074	c1 e9 10	 shr	 ecx, 16			; 00000010H
  01077	83 e0 0f	 and	 eax, 15			; 0000000fH
  0107a	89 4f 44	 mov	 DWORD PTR [edi+68], ecx
  0107d	89 47 48	 mov	 DWORD PTR [edi+72], eax

; 1110 :             state->mode = DISTEXT;

  01080	c7 07 17 00 00
	00		 mov	 DWORD PTR [edi], 23	; 00000017H
$LN701@inflate:

; 1111 :         case DISTEXT:
; 1112 :             if (state->extra) {

  01086	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  01089	85 c0		 test	 eax, eax
  0108b	74 40		 je	 SHORT $LN75@inflate

; 1113 :                 NEEDBITS(state->extra);

  0108d	3b f0		 cmp	 esi, eax
  0108f	73 22		 jae	 SHORT $LN73@inflate
$LL71@inflate:
  01091	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  01095	0f 84 9a 02 00
	00		 je	 $inf_leave$80515
  0109b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0109e	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  010a1	8b ce		 mov	 ecx, esi
  010a3	d3 e0		 shl	 eax, cl
  010a5	42		 inc	 edx
  010a6	83 c6 08	 add	 esi, 8
  010a9	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  010ac	03 d8		 add	 ebx, eax
  010ae	3b 77 48	 cmp	 esi, DWORD PTR [edi+72]
  010b1	72 de		 jb	 SHORT $LL71@inflate
$LN73@inflate:

; 1114 :                 state->offset += BITS(state->extra);

  010b3	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  010b6	b8 01 00 00 00	 mov	 eax, 1
  010bb	d3 e0		 shl	 eax, cl

; 1115 :                 DROPBITS(state->extra);

  010bd	2b f1		 sub	 esi, ecx
  010bf	48		 dec	 eax
  010c0	23 c3		 and	 eax, ebx
  010c2	01 47 44	 add	 DWORD PTR [edi+68], eax
  010c5	d3 eb		 shr	 ebx, cl

; 1116 :                 state->back += state->extra;

  010c7	01 8f c4 1b 00
	00		 add	 DWORD PTR [edi+7108], ecx
$LN75@inflate:

; 1117 :             }
; 1118 : #ifdef INFLATE_STRICT
; 1119 :             if (state->offset > state->dmax) {
; 1120 :                 strm->msg = (char *)"invalid distance too far back";
; 1121 :                 state->mode = BAD;
; 1122 :                 break;
; 1123 :             }
; 1124 : #endif
; 1125 :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 1126 :             state->mode = MATCH;

  010cd	c7 07 18 00 00
	00		 mov	 DWORD PTR [edi], 24	; 00000018H
$LN702@inflate:

; 1127 :         case MATCH:
; 1128 :             if (left == 0) goto inf_leave;

  010d3	83 7d f0 00	 cmp	 DWORD PTR _left$[ebp], 0
  010d7	0f 84 58 02 00
	00		 je	 $inf_leave$80515

; 1129 :             copy = out - left;

  010dd	8b 4d e0	 mov	 ecx, DWORD PTR _out$[ebp]
  010e0	2b 4d f0	 sub	 ecx, DWORD PTR _left$[ebp]

; 1130 :             if (state->offset > copy) {         /* copy from window */

  010e3	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  010e6	3b c1		 cmp	 eax, ecx
  010e8	76 54		 jbe	 SHORT $LN60@inflate

; 1131 :                 copy = state->offset - copy;

  010ea	2b c1		 sub	 eax, ecx
  010ec	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax

; 1132 :                 if (copy > state->whave) {

  010ef	3b 47 2c	 cmp	 eax, DWORD PTR [edi+44]
  010f2	76 18		 jbe	 SHORT $LN58@inflate

; 1133 :                     if (state->sane) {

  010f4	83 bf c0 1b 00
	00 00		 cmp	 DWORD PTR [edi+7104], 0
  010fb	74 0f		 je	 SHORT $LN58@inflate

; 1134 :                         strm->msg = (char *)"invalid distance too far back";

  010fd	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  01100	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 1135 :                         state->mode = BAD;
; 1136 :                         break;

  01107	e9 c5 01 00 00	 jmp	 $LN786@inflate
$LN58@inflate:

; 1137 :                     }
; 1138 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1139 :                     Trace((stderr, "inflate.c too far\n"));
; 1140 :                     copy -= state->whave;
; 1141 :                     if (copy > state->length) copy = state->length;
; 1142 :                     if (copy > left) copy = left;
; 1143 :                     left -= copy;
; 1144 :                     state->length -= copy;
; 1145 :                     do {
; 1146 :                         *put++ = 0;
; 1147 :                     } while (--copy);
; 1148 :                     if (state->length == 0) state->mode = LEN;
; 1149 :                     break;
; 1150 : #endif
; 1151 :                 }
; 1152 :                 if (copy > state->wnext) {

  0110c	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0110f	3b c1		 cmp	 eax, ecx
  01111	76 0f		 jbe	 SHORT $LN57@inflate

; 1153 :                     copy -= state->wnext;

  01113	2b c1		 sub	 eax, ecx

; 1154 :                     from = state->window + (state->wsize - copy);

  01115	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  01118	03 4f 28	 add	 ecx, DWORD PTR [edi+40]
  0111b	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
  0111e	2b c8		 sub	 ecx, eax

; 1155 :                 }
; 1156 :                 else

  01120	eb 0b		 jmp	 SHORT $LN784@inflate
$LN57@inflate:

; 1157 :                     from = state->window + (state->wnext - copy);

  01122	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  01125	2b c8		 sub	 ecx, eax
  01127	03 4f 30	 add	 ecx, DWORD PTR [edi+48]
  0112a	8b 45 f4	 mov	 eax, DWORD PTR _copy$[ebp]
$LN784@inflate:
  0112d	89 4d d4	 mov	 DWORD PTR _from$[ebp], ecx

; 1158 :                 if (copy > state->length) copy = state->length;

  01130	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  01133	89 4d dc	 mov	 DWORD PTR tv2131[ebp], ecx
  01136	3b c1		 cmp	 eax, ecx
  01138	76 15		 jbe	 SHORT $LN54@inflate
  0113a	8b c1		 mov	 eax, ecx

; 1159 :             }
; 1160 :             else {                              /* copy from output */

  0113c	eb 0e		 jmp	 SHORT $LN785@inflate
$LN60@inflate:

; 1161 :                 from = put - state->offset;

  0113e	8b 4d e8	 mov	 ecx, DWORD PTR _put$[ebp]
  01141	2b c8		 sub	 ecx, eax

; 1162 :                 copy = state->length;

  01143	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  01146	89 4d d4	 mov	 DWORD PTR _from$[ebp], ecx
  01149	89 45 dc	 mov	 DWORD PTR tv2131[ebp], eax
$LN785@inflate:
  0114c	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
$LN54@inflate:

; 1163 :             }
; 1164 :             if (copy > left) copy = left;

  0114f	8b 4d f0	 mov	 ecx, DWORD PTR _left$[ebp]
  01152	3b c1		 cmp	 eax, ecx
  01154	76 05		 jbe	 SHORT $LN53@inflate
  01156	8b c1		 mov	 eax, ecx
  01158	89 45 f4	 mov	 DWORD PTR _copy$[ebp], eax
$LN53@inflate:

; 1165 :             left -= copy;

  0115b	2b c8		 sub	 ecx, eax
  0115d	89 4d f0	 mov	 DWORD PTR _left$[ebp], ecx

; 1166 :             state->length -= copy;

  01160	8b 4d dc	 mov	 ecx, DWORD PTR tv2131[ebp]
  01163	2b c8		 sub	 ecx, eax

; 1169 :             } while (--copy);

  01165	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  01168	89 4f 40	 mov	 DWORD PTR [edi+64], ecx
  0116b	8b 4d d4	 mov	 ecx, DWORD PTR _from$[ebp]
  0116e	2b 4d e8	 sub	 ecx, DWORD PTR _put$[ebp]
  01171	89 4d d4	 mov	 DWORD PTR tv3076[ebp], ecx
  01174	eb 03		 jmp	 SHORT $LN52@inflate
$LL739@inflate:
  01176	8b 4d d4	 mov	 ecx, DWORD PTR tv3076[ebp]
$LN52@inflate:

; 1167 :             do {
; 1168 :                 *put++ = *from++;

  01179	8a 0c 01	 mov	 cl, BYTE PTR [ecx+eax]
  0117c	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  0117f	88 08		 mov	 BYTE PTR [eax], cl
  01181	40		 inc	 eax

; 1169 :             } while (--copy);

  01182	ff 4d f4	 dec	 DWORD PTR _copy$[ebp]
  01185	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax
  01188	75 ec		 jne	 SHORT $LL739@inflate

; 1170 :             if (state->length == 0) state->mode = LEN;

  0118a	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0118e	0f 85 43 01 00
	00		 jne	 $LN490@inflate
  01194	c7 07 14 00 00
	00		 mov	 DWORD PTR [edi], 20	; 00000014H

; 1171 :             break;

  0119a	e9 38 01 00 00	 jmp	 $LN490@inflate
$LN48@inflate:

; 1172 :         case LIT:
; 1173 :             if (left == 0) goto inf_leave;

  0119f	83 7d f0 00	 cmp	 DWORD PTR _left$[ebp], 0
  011a3	0f 84 8c 01 00
	00		 je	 $inf_leave$80515

; 1174 :             *put++ = (unsigned char)(state->length);

  011a9	8b 45 e8	 mov	 eax, DWORD PTR _put$[ebp]
  011ac	8a 4f 40	 mov	 cl, BYTE PTR [edi+64]
  011af	88 08		 mov	 BYTE PTR [eax], cl
  011b1	40		 inc	 eax

; 1175 :             left--;

  011b2	ff 4d f0	 dec	 DWORD PTR _left$[ebp]
  011b5	89 45 e8	 mov	 DWORD PTR _put$[ebp], eax

; 1176 :             state->mode = LEN;

  011b8	c7 07 14 00 00
	00		 mov	 DWORD PTR [edi], 20	; 00000014H

; 1177 :             break;

  011be	e9 14 01 00 00	 jmp	 $LN490@inflate
$LN46@inflate:

; 1178 :         case CHECK:
; 1179 :             if (state->wrap) {

  011c3	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  011c7	0f 84 ac 00 00
	00		 je	 $LN31@inflate

; 1180 :                 NEEDBITS(32);

  011cd	83 fe 20	 cmp	 esi, 32			; 00000020H
  011d0	73 22		 jae	 SHORT $LN43@inflate
$LL41@inflate:
  011d2	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  011d6	0f 84 59 01 00
	00		 je	 $inf_leave$80515
  011dc	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  011df	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  011e2	8b ce		 mov	 ecx, esi
  011e4	d3 e0		 shl	 eax, cl
  011e6	42		 inc	 edx
  011e7	83 c6 08	 add	 esi, 8
  011ea	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  011ed	03 d8		 add	 ebx, eax
  011ef	83 fe 20	 cmp	 esi, 32			; 00000020H
  011f2	72 de		 jb	 SHORT $LL41@inflate
$LN43@inflate:

; 1181 :                 out -= left;

  011f4	8b 45 e0	 mov	 eax, DWORD PTR _out$[ebp]
  011f7	2b 45 f0	 sub	 eax, DWORD PTR _left$[ebp]

; 1182 :                 strm->total_out += out;

  011fa	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  011fd	01 41 14	 add	 DWORD PTR [ecx+20], eax

; 1183 :                 state->total += out;

  01200	01 47 1c	 add	 DWORD PTR [edi+28], eax
  01203	89 45 e0	 mov	 DWORD PTR _out$[ebp], eax

; 1184 :                 if (out)

  01206	85 c0		 test	 eax, eax
  01208	74 29		 je	 SHORT $LN35@inflate

; 1185 :                     strm->adler = state->check =
; 1186 :                         UPDATE(state->check, put - out, out);

  0120a	8b 4d e8	 mov	 ecx, DWORD PTR _put$[ebp]
  0120d	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  01210	50		 push	 eax
  01211	2b c8		 sub	 ecx, eax
  01213	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  01217	51		 push	 ecx
  01218	52		 push	 edx
  01219	74 07		 je	 SHORT $LN504@inflate
  0121b	e8 00 00 00 00	 call	 _crc32@12
  01220	eb 05		 jmp	 SHORT $LN505@inflate
$LN504@inflate:
  01222	e8 00 00 00 00	 call	 _adler32@12
$LN505@inflate:
  01227	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0122a	8b 55 f8	 mov	 edx, DWORD PTR _next$[ebp]
  0122d	89 47 18	 mov	 DWORD PTR [edi+24], eax
  01230	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN35@inflate:

; 1187 :                 out = left;
; 1188 :                 if ((
; 1189 : #ifdef GUNZIP
; 1190 :                      state->flags ? hold :
; 1191 : #endif
; 1192 :                      REVERSE(hold)) != state->check) {

  01233	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  01237	8b 45 f0	 mov	 eax, DWORD PTR _left$[ebp]
  0123a	89 45 e0	 mov	 DWORD PTR _out$[ebp], eax
  0123d	8b c3		 mov	 eax, ebx
  0123f	75 23		 jne	 SHORT $LN507@inflate
  01241	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  01246	8b cb		 mov	 ecx, ebx
  01248	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0124b	03 c1		 add	 eax, ecx
  0124d	8b cb		 mov	 ecx, ebx
  0124f	c1 e9 08	 shr	 ecx, 8
  01252	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  01258	c1 e0 08	 shl	 eax, 8
  0125b	03 c1		 add	 eax, ecx
  0125d	8b cb		 mov	 ecx, ebx
  0125f	c1 e9 18	 shr	 ecx, 24			; 00000018H
  01262	03 c1		 add	 eax, ecx
$LN507@inflate:
  01264	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  01267	74 0c		 je	 SHORT $LN33@inflate

; 1193 :                     strm->msg = (char *)"incorrect data check";

  01269	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0126c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BF@MEIGEHBE@incorrect?5data?5check?$AA@

; 1194 :                     state->mode = BAD;
; 1195 :                     break;

  01273	eb 5c		 jmp	 SHORT $LN786@inflate
$LN33@inflate:

; 1196 :                 }
; 1197 :                 INITBITS();

  01275	33 db		 xor	 ebx, ebx
  01277	33 f6		 xor	 esi, esi
$LN31@inflate:

; 1198 :                 Tracev((stderr, "inflate:   check matches trailer\n"));
; 1199 :             }
; 1200 : #ifdef GUNZIP
; 1201 :             state->mode = LENGTH;

  01279	c7 07 1b 00 00
	00		 mov	 DWORD PTR [edi], 27	; 0000001bH
$LN742@inflate:

; 1202 :         case LENGTH:
; 1203 :             if (state->wrap && state->flags) {

  0127f	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  01283	0f 84 96 00 00
	00		 je	 $LN16@inflate
  01289	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0128d	0f 84 8c 00 00
	00		 je	 $LN16@inflate

; 1204 :                 NEEDBITS(32);

  01293	83 fe 20	 cmp	 esi, 32			; 00000020H
  01296	73 2a		 jae	 SHORT $LN27@inflate
  01298	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL25@inflate:
  012a0	83 7d fc 00	 cmp	 DWORD PTR _have$[ebp], 0
  012a4	0f 84 8b 00 00
	00		 je	 $inf_leave$80515
  012aa	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  012ad	ff 4d fc	 dec	 DWORD PTR _have$[ebp]
  012b0	8b ce		 mov	 ecx, esi
  012b2	d3 e0		 shl	 eax, cl
  012b4	42		 inc	 edx
  012b5	83 c6 08	 add	 esi, 8
  012b8	89 55 f8	 mov	 DWORD PTR _next$[ebp], edx
  012bb	03 d8		 add	 ebx, eax
  012bd	83 fe 20	 cmp	 esi, 32			; 00000020H
  012c0	72 de		 jb	 SHORT $LL25@inflate
$LN27@inflate:

; 1205 :                 if (hold != (state->total & 0xffffffffUL)) {

  012c2	3b 5f 1c	 cmp	 ebx, DWORD PTR [edi+28]
  012c5	74 54		 je	 SHORT $LN18@inflate

; 1206 :                     strm->msg = (char *)"incorrect length check";

  012c7	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  012ca	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BH@FGKKJGOC@incorrect?5length?5check?$AA@
$LN786@inflate:

; 1207 :                     state->mode = BAD;

  012d1	c7 07 1d 00 00
	00		 mov	 DWORD PTR [edi], 29	; 0000001dH
$LN490@inflate:

; 640  :     out = left;
; 641  :     ret = Z_OK;
; 642  :     for (;;)
; 643  :         switch (state->mode) {

  012d7	8b 07		 mov	 eax, DWORD PTR [edi]
  012d9	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  012dc	0f 86 96 ed ff
	ff		 jbe	 $LL493@inflate
$LN12@inflate:

; 1220 :             goto inf_leave;
; 1221 :         case MEM:
; 1222 :             return Z_MEM_ERROR;
; 1223 :         case SYNC:
; 1224 :         default:
; 1225 :             return Z_STREAM_ERROR;

  012e2	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
$LN780@inflate:
  012e7	5e		 pop	 esi
  012e8	5b		 pop	 ebx
  012e9	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  012ea	8b e5		 mov	 esp, ebp
  012ec	5d		 pop	 ebp
  012ed	c2 08 00	 ret	 8
$LN579@inflate:

; 825  :                 RESTORE();

  012f0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  012f3	8b 4d e8	 mov	 ecx, DWORD PTR _put$[ebp]
  012f6	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  012f9	8b 4d f0	 mov	 ecx, DWORD PTR _left$[ebp]
  012fc	89 10		 mov	 DWORD PTR [eax], edx
  012fe	8b 55 fc	 mov	 edx, DWORD PTR _have$[ebp]
  01301	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  01304	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01307	89 77 3c	 mov	 DWORD PTR [edi+60], esi
  0130a	5e		 pop	 esi
  0130b	89 5f 38	 mov	 DWORD PTR [edi+56], ebx
  0130e	5b		 pop	 ebx

; 826  :                 return Z_NEED_DICT;

  0130f	b8 02 00 00 00	 mov	 eax, 2
  01314	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  01315	8b e5		 mov	 esp, ebp
  01317	5d		 pop	 ebp
  01318	c2 08 00	 ret	 8
$LN18@inflate:

; 1208 :                     break;
; 1209 :                 }
; 1210 :                 INITBITS();

  0131b	33 db		 xor	 ebx, ebx
  0131d	33 f6		 xor	 esi, esi
$LN16@inflate:

; 1211 :                 Tracev((stderr, "inflate:   length matches trailer\n"));
; 1212 :             }
; 1213 : #endif
; 1214 :             state->mode = DONE;

  0131f	c7 07 1c 00 00
	00		 mov	 DWORD PTR [edi], 28	; 0000001cH
$LN747@inflate:

; 1215 :         case DONE:
; 1216 :             ret = Z_STREAM_END;

  01325	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 1217 :             goto inf_leave;

  0132c	eb 07		 jmp	 SHORT $inf_leave$80515
$LN14@inflate:

; 1218 :         case BAD:
; 1219 :             ret = Z_DATA_ERROR;

  0132e	c7 45 d8 fd ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -3 ; fffffffdH
$inf_leave$80515:

; 1226 :         }
; 1227 : 
; 1228 :     /*
; 1229 :        Return from inflate(), updating the total counts and the check value.
; 1230 :        If there was no progress during the inflate() call, return a buffer
; 1231 :        error.  Call updatewindow() to create and/or update the window state.
; 1232 :        Note: a memory error from inflate() is non-recoverable.
; 1233 :      */
; 1234 :   inf_leave:
; 1235 :     RESTORE();

  01335	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  01338	8b 4d e8	 mov	 ecx, DWORD PTR _put$[ebp]
  0133b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0133e	8b 4d f0	 mov	 ecx, DWORD PTR _left$[ebp]
  01341	89 10		 mov	 DWORD PTR [eax], edx
  01343	8b 55 fc	 mov	 edx, DWORD PTR _have$[ebp]
  01346	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  01349	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1236 :     if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
; 1237 :             (state->mode < CHECK || flush != Z_FINISH)))

  0134c	83 7f 28 00	 cmp	 DWORD PTR [edi+40], 0
  01350	89 5f 38	 mov	 DWORD PTR [edi+56], ebx
  01353	89 77 3c	 mov	 DWORD PTR [edi+60], esi
  01356	75 1a		 jne	 SHORT $LN6@inflate
  01358	8b 4d e0	 mov	 ecx, DWORD PTR _out$[ebp]
  0135b	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0135e	74 35		 je	 SHORT $LN704@inflate
  01360	8b 07		 mov	 eax, DWORD PTR [edi]
  01362	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  01365	7d 2e		 jge	 SHORT $LN704@inflate
  01367	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0136a	7c 06		 jl	 SHORT $LN6@inflate
  0136c	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  01370	74 23		 je	 SHORT $LN704@inflate
$LN6@inflate:

; 1238 :         if (updatewindow(strm, out)) {

  01372	8b 45 e0	 mov	 eax, DWORD PTR _out$[ebp]
  01375	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  01378	e8 00 00 00 00	 call	 _updatewindow
  0137d	85 c0		 test	 eax, eax
  0137f	74 14		 je	 SHORT $LN704@inflate

; 1239 :             state->mode = MEM;

  01381	c7 07 1e 00 00
	00		 mov	 DWORD PTR [edi], 30	; 0000001eH
$LN13@inflate:
  01387	5e		 pop	 esi
  01388	5b		 pop	 ebx

; 1240 :             return Z_MEM_ERROR;

  01389	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0138e	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  0138f	8b e5		 mov	 esp, ebp
  01391	5d		 pop	 ebp
  01392	c2 08 00	 ret	 8
$LN704@inflate:

; 1241 :         }
; 1242 :     in -= strm->avail_in;

  01395	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  01398	8b 45 d0	 mov	 eax, DWORD PTR _in$[ebp]
  0139b	2b 46 04	 sub	 eax, DWORD PTR [esi+4]

; 1243 :     out -= strm->avail_out;

  0139e	8b 5d e0	 mov	 ebx, DWORD PTR _out$[ebp]
  013a1	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 1244 :     strm->total_in += in;

  013a4	01 46 08	 add	 DWORD PTR [esi+8], eax

; 1245 :     strm->total_out += out;

  013a7	01 5e 14	 add	 DWORD PTR [esi+20], ebx

; 1246 :     state->total += out;

  013aa	01 5f 1c	 add	 DWORD PTR [edi+28], ebx

; 1247 :     if (state->wrap && out)

  013ad	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  013b1	89 45 d0	 mov	 DWORD PTR _in$[ebp], eax
  013b4	74 31		 je	 SHORT $LN4@inflate
  013b6	85 db		 test	 ebx, ebx
  013b8	74 2d		 je	 SHORT $LN4@inflate

; 1248 :         strm->adler = state->check =
; 1249 :             UPDATE(state->check, strm->next_out - out, out);

  013ba	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  013be	53		 push	 ebx
  013bf	74 11		 je	 SHORT $LN508@inflate
  013c1	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  013c4	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  013c7	2b d3		 sub	 edx, ebx
  013c9	52		 push	 edx
  013ca	50		 push	 eax
  013cb	e8 00 00 00 00	 call	 _crc32@12
  013d0	eb 0f		 jmp	 SHORT $LN509@inflate
$LN508@inflate:
  013d2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  013d5	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  013d8	2b cb		 sub	 ecx, ebx
  013da	51		 push	 ecx
  013db	52		 push	 edx
  013dc	e8 00 00 00 00	 call	 _adler32@12
$LN509@inflate:
  013e1	89 47 18	 mov	 DWORD PTR [edi+24], eax
  013e4	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN4@inflate:

; 1250 :     strm->data_type = state->bits + (state->last ? 64 : 0) +
; 1251 :                       (state->mode == TYPE ? 128 : 0) +
; 1252 :                       (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);

  013e7	8b 07		 mov	 eax, DWORD PTR [edi]
  013e9	83 f8 13	 cmp	 eax, 19			; 00000013H
  013ec	74 0c		 je	 SHORT $LN510@inflate
  013ee	c7 45 08 00 00
	00 00		 mov	 DWORD PTR tv1321[ebp], 0
  013f5	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  013f8	75 07		 jne	 SHORT $LN511@inflate
$LN510@inflate:
  013fa	c7 45 08 00 01
	00 00		 mov	 DWORD PTR tv1321[ebp], 256 ; 00000100H
$LN511@inflate:
  01401	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  01404	f7 d9		 neg	 ecx
  01406	1b c9		 sbb	 ecx, ecx
  01408	33 d2		 xor	 edx, edx
  0140a	83 e1 40	 and	 ecx, 64			; 00000040H
  0140d	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  01410	0f 95 c2	 setne	 dl
  01413	03 4d 08	 add	 ecx, DWORD PTR tv1321[ebp]
  01416	4a		 dec	 edx
  01417	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  0141d	03 d1		 add	 edx, ecx
  0141f	03 57 3c	 add	 edx, DWORD PTR [edi+60]

; 1253 :     if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)

  01422	83 7d d0 00	 cmp	 DWORD PTR _in$[ebp], 0
  01426	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  01429	75 04		 jne	 SHORT $LN1@inflate
  0142b	85 db		 test	 ebx, ebx
  0142d	74 06		 je	 SHORT $LN2@inflate
$LN1@inflate:
  0142f	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  01433	75 19		 jne	 SHORT $LN705@inflate
$LN2@inflate:
  01435	8b 45 d8	 mov	 eax, DWORD PTR _ret$[ebp]
  01438	85 c0		 test	 eax, eax
  0143a	0f 85 a7 fe ff
	ff		 jne	 $LN780@inflate

; 1254 :         ret = Z_BUF_ERROR;

  01440	5e		 pop	 esi
  01441	5b		 pop	 ebx
  01442	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  01447	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  01448	8b e5		 mov	 esp, ebp
  0144a	5d		 pop	 ebp
  0144b	c2 08 00	 ret	 8
$LN705@inflate:

; 1254 :         ret = Z_BUF_ERROR;

  0144e	8b 45 d8	 mov	 eax, DWORD PTR _ret$[ebp]
  01451	5e		 pop	 esi
  01452	5b		 pop	 ebx
  01453	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  01454	8b e5		 mov	 esp, ebp
  01456	5d		 pop	 ebp
  01457	c2 08 00	 ret	 8
$LN498@inflate:

; 634  :         return Z_STREAM_ERROR;

  0145a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0145f	5f		 pop	 edi

; 1255 :     return ret;
; 1256 : }

  01460	8b e5		 mov	 esp, ebp
  01462	5d		 pop	 ebp
  01463	c2 08 00	 ret	 8
  01466	8b ff		 npad	 2
$LN787@inflate:
  01468	00 00 00 00	 DD	 $LN489@inflate
  0146c	00 00 00 00	 DD	 $LN457@inflate
  01470	00 00 00 00	 DD	 $LN437@inflate
  01474	00 00 00 00	 DD	 $LN419@inflate
  01478	00 00 00 00	 DD	 $LN713@inflate
  0147c	00 00 00 00	 DD	 $LN715@inflate
  01480	00 00 00 00	 DD	 $LN716@inflate
  01484	00 00 00 00	 DD	 $LN720@inflate
  01488	00 00 00 00	 DD	 $LN724@inflate
  0148c	00 00 00 00	 DD	 $LN333@inflate
  01490	00 00 00 00	 DD	 $LN726@inflate
  01494	00 00 00 00	 DD	 $LN316@inflate
  01498	00 00 00 00	 DD	 $LN315@inflate
  0149c	00 00 00 00	 DD	 $LN282@inflate
  014a0	00 00 00 00	 DD	 $LN266@inflate
  014a4	00 00 00 00	 DD	 $LN264@inflate
  014a8	00 00 00 00	 DD	 $LN258@inflate
  014ac	00 00 00 00	 DD	 $LN730@inflate
  014b0	00 00 00 00	 DD	 $LN528@inflate
  014b4	00 00 00 00	 DD	 $LN148@inflate
  014b8	00 00 00 00	 DD	 $LN146@inflate
  014bc	00 00 00 00	 DD	 $LN699@inflate
  014c0	00 00 00 00	 DD	 $LN700@inflate
  014c4	00 00 00 00	 DD	 $LN701@inflate
  014c8	00 00 00 00	 DD	 $LN702@inflate
  014cc	00 00 00 00	 DD	 $LN48@inflate
  014d0	00 00 00 00	 DD	 $LN46@inflate
  014d4	00 00 00 00	 DD	 $LN742@inflate
  014d8	00 00 00 00	 DD	 $LN747@inflate
  014dc	00 00 00 00	 DD	 $LN14@inflate
  014e0	00 00 00 00	 DD	 $LN13@inflate
$LN788@inflate:
  014e4	00 00 00 00	 DD	 $LN294@inflate
  014e8	00 00 00 00	 DD	 $LN293@inflate
  014ec	00 00 00 00	 DD	 $LN288@inflate
  014f0	00 00 00 00	 DD	 $LN287@inflate
_inflate@8 ENDP
_TEXT	ENDS
PUBLIC	_inflateReset@4
; Function compile flags: /Ogtp
;	COMDAT _inflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateReset@4 PROC					; COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  :     struct inflate_state FAR *state;
; 132  : 
; 133  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	3b ca		 cmp	 ecx, edx
  0000a	74 1a		 je	 SHORT $LN1@inflateRes@2
  0000c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000f	3b c2		 cmp	 eax, edx
  00011	74 13		 je	 SHORT $LN1@inflateRes@2

; 134  :     state = (struct inflate_state FAR *)strm->state;
; 135  :     state->wsize = 0;
; 136  :     state->whave = 0;
; 137  :     state->wnext = 0;
; 138  :     return inflateResetKeep(strm);

  00013	51		 push	 ecx
  00014	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00017	89 50 2c	 mov	 DWORD PTR [eax+44], edx
  0001a	89 50 30	 mov	 DWORD PTR [eax+48], edx
  0001d	e8 00 00 00 00	 call	 _inflateResetKeep@4

; 139  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN1@inflateRes@2:

; 131  :     struct inflate_state FAR *state;
; 132  : 
; 133  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00026	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 139  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_inflateReset@4 ENDP
PUBLIC	_inflateSync@4
; Function compile flags: /Ogtp
;	COMDAT _inflateSync@4
_TEXT	SEGMENT
_out$ = 8						; size = 4
_buf$ = 8						; size = 4
_strm$ = 8						; size = 4
_inflateSync@4 PROC					; COMDAT

; 1368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1369 :     unsigned len;               /* number of bytes to look at or looked at */
; 1370 :     unsigned long in, out;      /* temporary to save total_in and total_out */
; 1371 :     unsigned char buf[4];       /* to restore bit buffer to byte string */
; 1372 :     struct inflate_state FAR *state;
; 1373 : 
; 1374 :     /* check parameters */
; 1375 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	57		 push	 edi
  00008	85 db		 test	 ebx, ebx
  0000a	0f 84 d2 00 00
	00		 je	 $LN6@inflateSyn@2
  00010	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  00013	85 ff		 test	 edi, edi
  00015	0f 84 c7 00 00
	00		 je	 $LN6@inflateSyn@2

; 1376 :     state = (struct inflate_state FAR *)strm->state;
; 1377 :     if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

  0001b	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  0001f	75 11		 jne	 SHORT $LN5@inflateSyn@2
  00021	83 7f 3c 08	 cmp	 DWORD PTR [edi+60], 8
  00025	73 0b		 jae	 SHORT $LN5@inflateSyn@2
  00027	5f		 pop	 edi
  00028	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002d	5b		 pop	 ebx

; 1407 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN5@inflateSyn@2:

; 1378 : 
; 1379 :     /* if first time, start search in bit buffer */
; 1380 :     if (state->mode != SYNC) {

  00032	83 3f 1f	 cmp	 DWORD PTR [edi], 31	; 0000001fH
  00035	56		 push	 esi
  00036	74 57		 je	 SHORT $LN4@inflateSyn@2

; 1381 :         state->mode = SYNC;
; 1382 :         state->hold <<= state->bits & 7;

  00038	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0003b	8b c8		 mov	 ecx, eax
  0003d	83 e1 07	 and	 ecx, 7
  00040	d3 67 38	 shl	 DWORD PTR [edi+56], cl

; 1383 :         state->bits -= state->bits & 7;

  00043	2b c1		 sub	 eax, ecx

; 1384 :         len = 0;

  00045	33 c9		 xor	 ecx, ecx
  00047	c7 07 1f 00 00
	00		 mov	 DWORD PTR [edi], 31	; 0000001fH
  0004d	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 1385 :         while (state->bits >= 8) {

  00050	83 f8 08	 cmp	 eax, 8
  00053	72 24		 jb	 SHORT $LN2@inflateSyn@2
  00055	8b 77 38	 mov	 esi, DWORD PTR [edi+56]
  00058	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@inflateSyn@2:

; 1386 :             buf[len++] = (unsigned char)(state->hold);

  00060	8a 57 38	 mov	 dl, BYTE PTR [edi+56]

; 1387 :             state->hold >>= 8;
; 1388 :             state->bits -= 8;

  00063	83 e8 08	 sub	 eax, 8
  00066	88 54 0d 08	 mov	 BYTE PTR _buf$[ebp+ecx], dl
  0006a	c1 ee 08	 shr	 esi, 8
  0006d	41		 inc	 ecx
  0006e	89 77 38	 mov	 DWORD PTR [edi+56], esi
  00071	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00074	83 f8 08	 cmp	 eax, 8
  00077	73 e7		 jae	 SHORT $LL3@inflateSyn@2
$LN2@inflateSyn@2:

; 1389 :         }
; 1390 :         state->have = 0;

  00079	8d 47 68	 lea	 eax, DWORD PTR [edi+104]

; 1391 :         syncsearch(&(state->have), buf, len);

  0007c	51		 push	 ecx
  0007d	50		 push	 eax
  0007e	8d 75 08	 lea	 esi, DWORD PTR _buf$[ebp]
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00087	e8 00 00 00 00	 call	 _syncsearch
  0008c	83 c4 08	 add	 esp, 8
$LN4@inflateSyn@2:

; 1392 :     }
; 1393 : 
; 1394 :     /* search available input */
; 1395 :     len = syncsearch(&(state->have), strm->next_in, strm->avail_in);

  0008f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00092	8b 33		 mov	 esi, DWORD PTR [ebx]
  00094	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  00097	51		 push	 ecx
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _syncsearch

; 1396 :     strm->avail_in -= len;
; 1397 :     strm->next_in += len;
; 1398 :     strm->total_in += len;

  0009e	01 43 08	 add	 DWORD PTR [ebx+8], eax
  000a1	29 43 04	 sub	 DWORD PTR [ebx+4], eax
  000a4	01 03		 add	 DWORD PTR [ebx], eax
  000a6	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  000a9	83 c4 08	 add	 esp, 8

; 1399 : 
; 1400 :     /* return no joy or set up to restart inflate() on a new block */
; 1401 :     if (state->have != 4) return Z_DATA_ERROR;

  000ac	83 7f 68 04	 cmp	 DWORD PTR [edi+104], 4
  000b0	74 0c		 je	 SHORT $LN1@inflateSyn@2
  000b2	5e		 pop	 esi
  000b3	5f		 pop	 edi
  000b4	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  000b9	5b		 pop	 ebx

; 1407 : }

  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
$LN1@inflateSyn@2:

; 1402 :     in = strm->total_in;  out = strm->total_out;

  000be	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]

; 1403 :     inflateReset(strm);

  000c1	53		 push	 ebx
  000c2	89 55 08	 mov	 DWORD PTR _out$[ebp], edx
  000c5	e8 00 00 00 00	 call	 _inflateReset@4

; 1404 :     strm->total_in = in;  strm->total_out = out;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _out$[ebp]
  000cd	89 73 08	 mov	 DWORD PTR [ebx+8], esi
  000d0	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000d3	5e		 pop	 esi

; 1405 :     state->mode = TYPE;

  000d4	c7 07 0b 00 00
	00		 mov	 DWORD PTR [edi], 11	; 0000000bH
  000da	5f		 pop	 edi

; 1406 :     return Z_OK;

  000db	33 c0		 xor	 eax, eax
  000dd	5b		 pop	 ebx

; 1407 : }

  000de	5d		 pop	 ebp
  000df	c2 04 00	 ret	 4
$LN6@inflateSyn@2:
  000e2	5f		 pop	 edi

; 1369 :     unsigned len;               /* number of bytes to look at or looked at */
; 1370 :     unsigned long in, out;      /* temporary to save total_in and total_out */
; 1371 :     unsigned char buf[4];       /* to restore bit buffer to byte string */
; 1372 :     struct inflate_state FAR *state;
; 1373 : 
; 1374 :     /* check parameters */
; 1375 :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  000e3	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000e8	5b		 pop	 ebx

; 1407 : }

  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
_inflateSync@4 ENDP
_TEXT	ENDS
PUBLIC	_inflateReset2@8
; Function compile flags: /Ogtp
;	COMDAT _inflateReset2@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_inflateReset2@8 PROC					; COMDAT

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  :     int wrap;
; 146  :     struct inflate_state FAR *state;
; 147  : 
; 148  :     /* get the state */
; 149  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	57		 push	 edi
  00007	85 c9		 test	 ecx, ecx
  00009	74 74		 je	 SHORT $LN7@inflateRes@3
  0000b	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  0000e	85 ff		 test	 edi, edi
  00010	74 6d		 je	 SHORT $LN7@inflateRes@3

; 150  :     state = (struct inflate_state FAR *)strm->state;
; 151  : 
; 152  :     /* extract wrap request from windowBits parameter */
; 153  :     if (windowBits < 0) {

  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _windowBits$[ebp]
  00017	85 f6		 test	 esi, esi
  00019	79 06		 jns	 SHORT $LN6@inflateRes@3

; 154  :         wrap = 0;

  0001b	33 db		 xor	 ebx, ebx

; 155  :         windowBits = -windowBits;

  0001d	f7 de		 neg	 esi

; 156  :     }
; 157  :     else {

  0001f	eb 0e		 jmp	 SHORT $LN4@inflateRes@3
$LN6@inflateRes@3:

; 158  :         wrap = (windowBits >> 4) + 1;

  00021	8b de		 mov	 ebx, esi
  00023	c1 fb 04	 sar	 ebx, 4
  00026	43		 inc	 ebx

; 159  : #ifdef GUNZIP
; 160  :         if (windowBits < 48)

  00027	83 fe 30	 cmp	 esi, 48			; 00000030H
  0002a	7d 03		 jge	 SHORT $LN4@inflateRes@3

; 161  :             windowBits &= 15;

  0002c	83 e6 0f	 and	 esi, 15			; 0000000fH
$LN4@inflateRes@3:

; 162  : #endif
; 163  :     }
; 164  : 
; 165  :     /* set number of window bits, free window if different */
; 166  :     if (windowBits && (windowBits < 8 || windowBits > 15))

  0002f	85 f6		 test	 esi, esi
  00031	74 16		 je	 SHORT $LN3@inflateRes@3
  00033	83 fe 08	 cmp	 esi, 8
  00036	7c 05		 jl	 SHORT $LN2@inflateRes@3
  00038	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003b	7e 0c		 jle	 SHORT $LN3@inflateRes@3
$LN2@inflateRes@3:
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 167  :         return Z_STREAM_ERROR;

  0003f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00044	5f		 pop	 edi

; 177  : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN3@inflateRes@3:

; 168  :     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {

  00049	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0004c	85 c0		 test	 eax, eax
  0004e	74 1c		 je	 SHORT $LN1@inflateRes@3
  00050	39 77 24	 cmp	 DWORD PTR [edi+36], esi
  00053	74 17		 je	 SHORT $LN1@inflateRes@3

; 169  :         ZFREE(strm, state->window);

  00055	50		 push	 eax
  00056	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00059	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0005c	50		 push	 eax
  0005d	ff d1		 call	 ecx

; 170  :         state->window = Z_NULL;

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00062	83 c4 08	 add	 esp, 8
  00065	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
$LN1@inflateRes@3:

; 171  :     }
; 172  : 
; 173  :     /* update state and reset the rest of it */
; 174  :     state->wrap = wrap;
; 175  :     state->wbits = (unsigned)windowBits;
; 176  :     return inflateReset(strm);

  0006c	51		 push	 ecx
  0006d	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00070	89 77 24	 mov	 DWORD PTR [edi+36], esi
  00073	e8 00 00 00 00	 call	 _inflateReset@4
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi

; 177  : }

  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN7@inflateRes@3:

; 145  :     int wrap;
; 146  :     struct inflate_state FAR *state;
; 147  : 
; 148  :     /* get the state */
; 149  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0007f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00084	5f		 pop	 edi

; 177  : }

  00085	5d		 pop	 ebp
  00086	c2 08 00	 ret	 8
_inflateReset2@8 ENDP
PUBLIC	_inflateInit2_@16
; Function compile flags: /Ogtp
;	COMDAT _inflateInit2_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_inflateInit2_@16 PROC					; COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 185  :     int ret;
; 186  :     struct inflate_state FAR *state;
; 187  : 
; 188  :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
; 189  :         stream_size != (int)(sizeof(z_stream)))

  00003	8b 45 10	 mov	 eax, DWORD PTR _version$[ebp]
  00006	53		 push	 ebx
  00007	33 db		 xor	 ebx, ebx
  00009	3b c3		 cmp	 eax, ebx
  0000b	0f 84 9b 00 00
	00		 je	 $LN6@inflateIni
  00011	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00014	0f 85 92 00 00
	00		 jne	 $LN6@inflateIni
  0001a	83 7d 14 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001e	0f 85 88 00 00
	00		 jne	 $LN6@inflateIni

; 191  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00024	56		 push	 esi
  00025	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00028	3b f3		 cmp	 esi, ebx
  0002a	75 09		 jne	 SHORT $LN5@inflateIni
  0002c	5e		 pop	 esi
  0002d	8d 43 fe	 lea	 eax, DWORD PTR [ebx-2]
  00030	5b		 pop	 ebx

; 219  : }

  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
$LN5@inflateIni:

; 192  :     strm->msg = Z_NULL;                 /* in case we return an error */

  00035	89 5e 18	 mov	 DWORD PTR [esi+24], ebx

; 193  :     if (strm->zalloc == (alloc_func)0) {

  00038	39 5e 20	 cmp	 DWORD PTR [esi+32], ebx
  0003b	75 0a		 jne	 SHORT $LN4@inflateIni

; 194  : #ifdef Z_SOLO
; 195  :         return Z_STREAM_ERROR;
; 196  : #else
; 197  :         strm->zalloc = zcalloc;

  0003d	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc

; 198  :         strm->opaque = (voidpf)0;

  00044	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
$LN4@inflateIni:

; 199  : #endif
; 200  :     }
; 201  :     if (strm->zfree == (free_func)0)

  00047	39 5e 24	 cmp	 DWORD PTR [esi+36], ebx
  0004a	75 07		 jne	 SHORT $LN3@inflateIni

; 202  : #ifdef Z_SOLO
; 203  :         return Z_STREAM_ERROR;
; 204  : #else
; 205  :         strm->zfree = zcfree;

  0004c	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN3@inflateIni:

; 206  : #endif
; 207  :     state = (struct inflate_state FAR *)
; 208  :             ZALLOC(strm, 1, sizeof(struct inflate_state));

  00053	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00056	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00059	57		 push	 edi
  0005a	68 cc 1b 00 00	 push	 7116			; 00001bccH
  0005f	6a 01		 push	 1
  00061	50		 push	 eax
  00062	ff d1		 call	 ecx
  00064	8b f8		 mov	 edi, eax
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  :     if (state == Z_NULL) return Z_MEM_ERROR;

  00069	3b fb		 cmp	 edi, ebx
  0006b	75 0c		 jne	 SHORT $LN2@inflateIni
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00074	5b		 pop	 ebx

; 219  : }

  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
$LN2@inflateIni:

; 210  :     Tracev((stderr, "inflate: allocated\n"));
; 211  :     strm->state = (struct internal_state FAR *)state;
; 212  :     state->window = Z_NULL;
; 213  :     ret = inflateReset2(strm, windowBits);

  00079	8b 55 0c	 mov	 edx, DWORD PTR _windowBits$[ebp]
  0007c	52		 push	 edx
  0007d	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00080	56		 push	 esi
  00081	89 5f 34	 mov	 DWORD PTR [edi+52], ebx
  00084	e8 00 00 00 00	 call	 _inflateReset2@8
  00089	8b d8		 mov	 ebx, eax

; 214  :     if (ret != Z_OK) {

  0008b	85 db		 test	 ebx, ebx
  0008d	74 14		 je	 SHORT $LN1@inflateIni

; 215  :         ZFREE(strm, state);

  0008f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00092	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00095	57		 push	 edi
  00096	50		 push	 eax
  00097	ff d1		 call	 ecx
  00099	83 c4 08	 add	 esp, 8

; 216  :         strm->state = Z_NULL;

  0009c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN1@inflateIni:

; 217  :     }
; 218  :     return ret;

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	8b c3		 mov	 eax, ebx
  000a7	5b		 pop	 ebx

; 219  : }

  000a8	5d		 pop	 ebp
  000a9	c2 10 00	 ret	 16			; 00000010H
$LN6@inflateIni:

; 190  :         return Z_VERSION_ERROR;

  000ac	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000b1	5b		 pop	 ebx

; 219  : }

  000b2	5d		 pop	 ebp
  000b3	c2 10 00	 ret	 16			; 00000010H
_inflateInit2_@16 ENDP
PUBLIC	_inflateInit_@12
; Function compile flags: /Ogtp
;	COMDAT _inflateInit_@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_version$ = 12						; size = 4
_stream_size$ = 16					; size = 4
_inflateInit_@12 PROC					; COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  :     return inflateInit2_(strm, DEF_WBITS, version, stream_size);

  00003	8b 45 10	 mov	 eax, DWORD PTR _stream_size$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _version$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	6a 0f		 push	 15			; 0000000fH
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _inflateInit2_@16

; 227  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
_inflateInit_@12 ENDP
END
