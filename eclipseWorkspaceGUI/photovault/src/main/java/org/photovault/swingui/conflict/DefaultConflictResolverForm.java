/*
  Copyright (c) 2010 Harri Kaimio

  This file is part of Photovault.

  Photovault is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Photovault is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Photovault; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
*/

package org.photovault.swingui.conflict;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.photovault.replication.FieldConflictBase;
import org.photovault.replication.ValueFieldConflict;

/**
 * UI component for selecting which of the conflicting field values to choose.
 * This component is used by {@link ResolveConflictDlg} if no field specific UI
 * component s defined. it just displays two radi buttons with the toString()
 * results of the conflicting values.
 * @author Harri Kaimio
 * @since 0.6.0
 */
public class DefaultConflictResolverForm extends javax.swing.JPanel {

    /** Creates new form DefaultConflictResolverForm */
    public DefaultConflictResolverForm( FieldConflictBase c ) {
        initComponents();
        conflict = (ValueFieldConflict) c;
        List values = conflict.getConflictingValues();
        ch1ValueBtn.setText( values.get(0).toString() );
        ch2ValueBtn.setText( values.get(1).toString() );
    }

    ValueFieldConflict conflict;

    Set<ConflictResolutionListener> listeners = 
            new HashSet<ConflictResolutionListener>();
    public void addResolutionListener( ConflictResolutionListener l ) {
        listeners.add( l );
    }

    public void removeResolutionListener( ConflictResolutionListener l ) {
        listeners.remove( l );
    }

    private void fireResolutionEvent() {
        for ( ConflictResolutionListener l : listeners ) {
            l.conflictResolved( conflict );
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        versionSelectionGroup = new javax.swing.ButtonGroup();
        ch1ValueBtn = new javax.swing.JRadioButton();
        ch2ValueBtn = new javax.swing.JRadioButton();

        versionSelectionGroup.add(ch1ValueBtn);
        ch1ValueBtn.setText("jRadioButton1");
        ch1ValueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch1ValueBtnActionPerformed(evt);
            }
        });

        versionSelectionGroup.add(ch2ValueBtn);
        ch2ValueBtn.setText("jRadioButton1");
        ch2ValueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch2ValueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ch1ValueBtn)
                    .addComponent(ch2ValueBtn))
                .addContainerGap(211, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ch1ValueBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ch2ValueBtn)
                .addContainerGap(152, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ch1ValueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch1ValueBtnActionPerformed
        conflict.resolve( 0 );
        fireResolutionEvent();
    }//GEN-LAST:event_ch1ValueBtnActionPerformed

    private void ch2ValueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch2ValueBtnActionPerformed
        conflict.resolve( 1 );
        fireResolutionEvent();
    }//GEN-LAST:event_ch2ValueBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ch1ValueBtn;
    private javax.swing.JRadioButton ch2ValueBtn;
    private javax.swing.ButtonGroup versionSelectionGroup;
    // End of variables declaration//GEN-END:variables

}
