/*
  Copyright (c) 2006 Harri Kaimio
  
  This file is part of Photovault.

  Photovault is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Photovault is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Photovault; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
*/

package org.photovault.swingui.indexer;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.photovault.imginfo.PhotoInfo;
import org.photovault.imginfo.indexer.ExtVolIndexer;
import org.photovault.imginfo.indexer.ExtVolIndexerEvent;
import org.photovault.imginfo.indexer.ExtVolIndexerListener;
import org.photovault.swingui.ThumbnailView;

/**
 * Dialog that shows status of ongoing directory indexing operation.
 * @author  Harri Kaimio
 */
public class IndexerStatusDlg extends javax.swing.JDialog implements ExtVolIndexerListener {
    
    /**
     * Creates new form IndexerStatusDlg
     */
    public IndexerStatusDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        thumbView = new ThumbnailView();
        // thumbPanel.setLayout( new BoxLayout() );
        thumbPanel.add( thumbView );
    }
    
    ThumbnailView thumbView = null;
    
    public void runIndexer( ExtVolIndexer i ) {
        indexer = i;
        indexer.addIndexerListener( this );
        Thread t = new Thread( indexer );
        t.start();
    }
    
    ExtVolIndexer indexer = null;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        indexedFilesLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newPhotosLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        newInstancesLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        newFoldersLabel = new javax.swing.JLabel();
        thumbPanel = new javax.swing.JPanel();
        closeBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        timeElapsedLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Indexing...");
        jLabel1.setText("Files indexed:");

        indexedFilesLabel.setText("0");

        jLabel2.setText("New photos:");

        newPhotosLabel.setText("0");

        jLabel3.setText("New instances:");

        newInstancesLabel.setText("0");

        jLabel4.setText("New folders:");

        newFoldersLabel.setText("0");

        thumbPanel.setLayout(new java.awt.BorderLayout());

        thumbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Last indexed photo"));
        thumbPanel.setPreferredSize(new java.awt.Dimension(110, 110));

        closeBtn.setText("Close");
        closeBtn.setEnabled(false);
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Time elapsed:");

        timeElapsedLabel.setText("0:00:00");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(thumbPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 136, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel1)
                                    .add(jLabel2)
                                    .add(jLabel3)
                                    .add(jLabel4))
                                .add(6, 6, 6)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(newFoldersLabel)
                                    .add(newInstancesLabel)
                                    .add(newPhotosLabel)
                                    .add(indexedFilesLabel)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(timeElapsedLabel))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, closeBtn))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(indexedFilesLabel)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(newPhotosLabel)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(newInstancesLabel)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(newFoldersLabel)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(timeElapsedLabel)
                            .add(jLabel5)))
                    .add(thumbPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(closeBtn)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        setVisible( false );
    }//GEN-LAST:event_closeBtnActionPerformed
    
    /**
     This method is called by the indexer when a new file has been indexed. It 
     updates the statistics fields and thumbnail displayed in dialog.
     @param e Event object describing the file that has been indexed.
     */
    public void fileIndexed(ExtVolIndexerEvent e) {
        final PhotoInfo p = e.getPhoto();
        final ExtVolIndexer indexer = (ExtVolIndexer) e.getSource();
        
        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                int fileCount = indexer.getIndexedFileCount();
                indexedFilesLabel.setText( "" + fileCount );
                int photoCount = indexer.getNewPhotoCount();
                newPhotosLabel.setText( "" + photoCount );
                int instanceCount = indexer.getNewInstanceCount();
                newInstancesLabel.setText( "" + instanceCount );
                int folderCount = indexer.getNewFolderCount();
                newFoldersLabel.setText( "" + folderCount );
                if ( p != null ) {
                    thumbView.setPhoto( p );
                }
                progressBar.setValue( indexer.getPercentComplete() );
                long timeDiff = System.currentTimeMillis() - indexer.getStartTime().getTime();
                
                timeElapsedLabel.setText( getTimeString( timeDiff ) );
            }
            
            DecimalFormat fmt = new DecimalFormat( "00" );
            
            String getTimeString( long millis ) {
                long seconds = ((int)(millis/1000)) % 60;
                long mins = ((int)(millis/60000)) % 60;
                long hours = ((int)(millis/3600000));
                return "" + hours + ":" + fmt.format( mins )+ ":" + fmt.format( seconds );
            }
        });
        
    }
    
    /**
     This method is called after the indexing operation is complete
     @param indexer The indexer that has completed its work.
     */
    public void indexingComplete(ExtVolIndexer indexer) {
        closeBtn.setEnabled( true );
        this.setTitle( "Indexing complete" );
    }

    public void indexingError(String message) {
        final String finalMessage = "Error while indexing:\n" + message;        
        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                JOptionPane.showMessageDialog( null, finalMessage, "Indexing error", 
                        JOptionPane.ERROR_MESSAGE );
            }
        });
        closeBtn.setEnabled( true );
        this.setTitle( "Indexing complete" );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel indexedFilesLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel newFoldersLabel;
    private javax.swing.JLabel newInstancesLabel;
    private javax.swing.JLabel newPhotosLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel thumbPanel;
    private javax.swing.JLabel timeElapsedLabel;
    // End of variables declaration//GEN-END:variables
    
}
