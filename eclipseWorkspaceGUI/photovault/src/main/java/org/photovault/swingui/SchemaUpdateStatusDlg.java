/*
  Copyright (c) 2006 Harri Kaimio
  
  This file is part of Photovault.

  Photovault is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Photovault is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Photovault; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
*/

package org.photovault.swingui;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.SwingUtilities;
import org.photovault.common.SchemaUpdateAction;
import org.photovault.common.SchemaUpdateEvent;
import org.photovault.common.SchemaUpdateListener;
import org.photovault.common.SchemaUpdateOperation;

/**
  Simple dialog to display status of schema update operation
 
 */
public class SchemaUpdateStatusDlg extends javax.swing.JDialog 
        implements SchemaUpdateListener {
    
    /** Creates new form SchemaUpdateStatusDlg */
    public SchemaUpdateStatusDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        // Center the dialog on screen
        int w = getSize().width;
        int h = getSize().height;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width-w)/2;
        int y = (screenSize.height-h)/2;
        setLocation( x, y );                        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        statusLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Upgrading database, please wait...");
        statusLabel.setText("     ");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(statusLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(statusLabel)
                .add(20, 20, 20)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SchemaUpdateStatusDlg(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }

    /**
     Calls upgradeDatabase method for the given SchemaUpdateAction and shows 
     progress status for the operation
     @param a The update action.
     */
    public void runUpgrade( SchemaUpdateAction a ) {
        a.addSchemaUpdateListener( this );
        setVisible( true );
        a.upgradeDatabase();
        setVisible( false );
    }
    /**
     This method is called by @see SchemaUpdateAction to update the status.
     */
    public void schemaUpdateStatusChanged(SchemaUpdateEvent e) {
        String statusText = "";
        boolean isComplete = false;
        SchemaUpdateOperation phase = e.getPhase();
        if ( phase != null ) {
            statusText = phase.getDescription();
        }
        if ( phase == SchemaUpdateOperation.UPDATE_COMPLETE ) {
            isComplete = true;
        }
        final String finalStatusText = statusText;
        final int percentComplete = e.getPercentComplete();
        final boolean finalIsComplete = isComplete;
        SwingUtilities.invokeLater( 
                new Runnable() {
                    public void run() {
                        statusLabel.setText( finalStatusText );
                        progressBar.setValue( percentComplete );
                        if ( finalIsComplete ) {
                            setVisible( false );
                        }
                    }
                });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    
}
